{
	"id": "09f2cb46344a25b3b47a25bc45f44208",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.25",
	"solcLongVersion": "0.8.25+commit.b61c2a91",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Pool.sol": {
				"content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\ncontract Pool is ERC4626 {\n    IERC20 public satoken;\n    bool private isDeposit = false;\n    error DEPRECATED_FUNCTION();\n\n\n    modifier auth() {\n        require(address(satoken) == msg.sender, \"Sender is Not Vaults\");\n        _;\n    }\n\n    constructor(address _satoken) ERC4626(IERC20(_satoken)) ERC20(\"R-shared aUSDC\",\"rsaUSDC\") {\n        satoken = IERC20(_satoken);\n    }\n\n    function deposit(uint256 assets, address receiver) auth public override returns (uint256) {\n        isDeposit = true;\n\n        require(assets > 0, \"Amount must be greater than 0\");\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n        \n        uint256 shares = previewDeposit(assets);\n        _mint(receiver, shares);\n        isDeposit = false;\n        return shares;\n    }\n\n    /** @dev See {IERC4626-withdraw}. */\n    function withdraw(uint256 assets, address receiver, address owner) auth public override returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _burn(owner, shares);\n\n        return maxAssets;\n    }\n\n\n\n    function mint(uint256 shares, address receiver) public override returns (uint256) {\n        revert DEPRECATED_FUNCTION();\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view override returns (uint256) {\n        if (isDeposit) {\n            return Math.mulDiv(assets, totalSupply() + 10 ** _decimalsOffset(), totalAssets() - assets + 1, rounding);\n        } else {\n            return Math.mulDiv(assets, totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\n        }   \n    }\n\n}"
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC4626.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20, IERC20Metadata, ERC20} from \"../ERC20.sol\";\nimport {SafeERC20} from \"../utils/SafeERC20.sol\";\nimport {IERC4626} from \"../../../interfaces/IERC4626.sol\";\nimport {Math} from \"../../../utils/math/Math.sol\";\n\n/**\n * @dev Implementation of the ERC4626 \"Tokenized Vault Standard\" as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\n *\n * This extension allows the minting and burning of \"shares\" (represented using the ERC20 inheritance) in exchange for\n * underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\n * the ERC20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this\n * contract and not the \"assets\" token which is an independent contract.\n *\n * [CAUTION]\n * ====\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\n * with a \"donation\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\n *\n * Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\n * corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\n * decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\n * determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\n * (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\n * donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\n * expensive than it is profitable. More details about the underlying math can be found\n * xref:erc4626.adoc#inflation-attack[here].\n *\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\n * `_convertToShares` and `_convertToAssets` functions.\n *\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\n * ====\n */\nabstract contract ERC4626 is ERC20, IERC4626 {\n    using Math for uint256;\n\n    IERC20 private immutable _asset;\n    uint8 private immutable _underlyingDecimals;\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    /**\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\n     */\n    constructor(IERC20 asset_) {\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\n        _underlyingDecimals = success ? assetDecimals : 18;\n        _asset = asset_;\n    }\n\n    /**\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\n     */\n    function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\n            abi.encodeCall(IERC20Metadata.decimals, ())\n        );\n        if (success && encodedDecimals.length >= 32) {\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\n            if (returnedDecimals <= type(uint8).max) {\n                return (true, uint8(returnedDecimals));\n            }\n        }\n        return (false, 0);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\n     * \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\n        return _underlyingDecimals + _decimalsOffset();\n    }\n\n    /** @dev See {IERC4626-asset}. */\n    function asset() public view virtual returns (address) {\n        return address(_asset);\n    }\n\n    /** @dev See {IERC4626-totalAssets}. */\n    function totalAssets() public view virtual returns (uint256) {\n        return _asset.balanceOf(address(this));\n    }\n\n    /** @dev See {IERC4626-convertToShares}. */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-convertToAssets}. */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-maxDeposit}. */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /** @dev See {IERC4626-maxMint}. */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /** @dev See {IERC4626-maxWithdraw}. */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-maxRedeem}. */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /** @dev See {IERC4626-previewDeposit}. */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-previewMint}. */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /** @dev See {IERC4626-previewWithdraw}. */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /** @dev See {IERC4626-previewRedeem}. */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-deposit}. */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /** @dev See {IERC4626-withdraw}. */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4626-redeem}. */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\n        _mint(receiver, shares);\n\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(\n        address caller,\n        address receiver,\n        address owner,\n        uint256 assets,\n        uint256 shares\n    ) internal virtual {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        SafeERC20.safeTransfer(_asset, receiver, assets);\n\n        emit Withdraw(caller, receiver, owner, assets, shares);\n    }\n\n    function _decimalsOffset() internal view virtual returns (uint8) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC4626.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"../token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n */\ninterface IERC4626 is IERC20, IERC20Metadata {\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the address provided by the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/IERC4626.sol": {
				"IERC4626": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Deposit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Withdraw",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "asset",
							"outputs": [
								{
									"internalType": "address",
									"name": "assetTokenAddress",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "convertToAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "convertToShares",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "deposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "maxDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "maxAssets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "maxMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "maxShares",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "maxShares",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "maxAssets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "redeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "totalManagedAssets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "withdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"asset()": {
								"details": "Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing. - MUST be an ERC-20 token contract. - MUST NOT revert."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"convertToAssets(uint256)": {
								"details": "Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from."
							},
							"convertToShares(uint256)": {
								"details": "Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"deposit(uint256,address)": {
								"details": "Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   deposit execution, and are accounted for during deposit. - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
							},
							"maxDeposit(address)": {
								"details": "Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver, through a deposit call. - MUST return a limited value if receiver is subject to some deposit limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited. - MUST NOT revert."
							},
							"maxMint(address)": {
								"details": "Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call. - MUST return a limited value if receiver is subject to some mint limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted. - MUST NOT revert."
							},
							"maxRedeem(address)": {
								"details": "Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock. - MUST NOT revert."
							},
							"maxWithdraw(address)": {
								"details": "Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST NOT revert."
							},
							"mint(uint256,address)": {
								"details": "Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint   execution, and are accounted for during mint. - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"previewDeposit(uint256)": {
								"details": "Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing."
							},
							"previewMint(uint256)": {
								"details": "Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting."
							},
							"previewRedeem(uint256)": {
								"details": "Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming."
							},
							"previewWithdraw(uint256)": {
								"details": "Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if   called   in the same transaction. - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though   the withdrawal would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing."
							},
							"redeem(uint256,address,address)": {
								"details": "Burns exactly shares from owner and sends assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   redeem execution, and are accounted for during redeem. - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalAssets()": {
								"details": "Returns the total amount of the underlying asset that is “managed” by Vault. - SHOULD include any compounding that occurs from yield. - MUST be inclusive of any fees that are charged against assets in the Vault. - MUST NOT revert."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"withdraw(uint256,address,address)": {
								"details": "Burns shares from owner and sends exactly assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   withdraw execution, and are accounted for during withdraw. - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"asset()": "38d52e0f",
							"balanceOf(address)": "70a08231",
							"convertToAssets(uint256)": "07a2d13a",
							"convertToShares(uint256)": "c6e6f592",
							"decimals()": "313ce567",
							"deposit(uint256,address)": "6e553f65",
							"maxDeposit(address)": "402d267d",
							"maxMint(address)": "c63d75b6",
							"maxRedeem(address)": "d905777e",
							"maxWithdraw(address)": "ce96cb77",
							"mint(uint256,address)": "94bf804d",
							"name()": "06fdde03",
							"previewDeposit(uint256)": "ef8b30f7",
							"previewMint(uint256)": "b3d7f6b9",
							"previewRedeem(uint256)": "4cdad506",
							"previewWithdraw(uint256)": "0a28a477",
							"redeem(uint256,address,address)": "ba087652",
							"symbol()": "95d89b41",
							"totalAssets()": "01e1d114",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256,address,address)": "b460af94"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"assetTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalManagedAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"asset()\":{\"details\":\"Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing. - MUST be an ERC-20 token contract. - MUST NOT revert.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"convertToAssets(uint256)\":{\"details\":\"Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"convertToShares(uint256)\":{\"details\":\"Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"deposit(uint256,address)\":{\"details\":\"Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   deposit execution, and are accounted for during deposit. - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"maxDeposit(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver, through a deposit call. - MUST return a limited value if receiver is subject to some deposit limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited. - MUST NOT revert.\"},\"maxMint(address)\":{\"details\":\"Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call. - MUST return a limited value if receiver is subject to some mint limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted. - MUST NOT revert.\"},\"maxRedeem(address)\":{\"details\":\"Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock. - MUST NOT revert.\"},\"maxWithdraw(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST NOT revert.\"},\"mint(uint256,address)\":{\"details\":\"Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint   execution, and are accounted for during mint. - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"previewMint(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting.\"},\"previewRedeem(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming.\"},\"previewWithdraw(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if   called   in the same transaction. - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though   the withdrawal would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"redeem(uint256,address,address)\":{\"details\":\"Burns exactly shares from owner and sends assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   redeem execution, and are accounted for during redeem. - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalAssets()\":{\"details\":\"Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault. - SHOULD include any compounding that occurs from yield. - MUST be inclusive of any fees that are charged against assets in the Vault. - MUST NOT revert.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"withdraw(uint256,address,address)\":{\"details\":\"Burns shares from owner and sends exactly assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   withdraw execution, and are accounted for during withdraw. - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":\"IERC4626\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 477,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 483,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 485,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 487,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 489,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol": {
				"ERC4626": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "AddressEmptyCode",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxDeposit",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxMint",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxRedeem",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxWithdraw",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Deposit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Withdraw",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "asset",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "convertToAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "convertToShares",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "deposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "maxDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "maxMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "redeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "withdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the ERC4626 \"Tokenized Vault Standard\" as defined in https://eips.ethereum.org/EIPS/eip-4626[EIP-4626]. This extension allows the minting and burning of \"shares\" (represented using the ERC20 inheritance) in exchange for underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends the ERC20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this contract and not the \"assets\" token which is an independent contract. [CAUTION] ==== In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning with a \"donation\" to the vault that inflates the price of a share. This is variously known as a donation or inflation attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by verifying the amount received is as expected, using a wrapper that performs these checks such as https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router]. Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()` corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more expensive than it is profitable. More details about the underlying math can be found xref:erc4626.adoc#inflation-attack[here]. The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets will cause the first user to exit to experience reduced losses in detriment to the last users that will experience bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the `_convertToShares` and `_convertToAssets` functions. To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide]. ====",
						"errors": {
							"AddressEmptyCode(address)": [
								{
									"details": "There's no code at `target` (it is not a contract)."
								}
							],
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC4626ExceededMaxDeposit(address,uint256,uint256)": [
								{
									"details": "Attempted to deposit more assets than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxMint(address,uint256,uint256)": [
								{
									"details": "Attempted to mint more shares than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxRedeem(address,uint256,uint256)": [
								{
									"details": "Attempted to redeem more shares than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxWithdraw(address,uint256,uint256)": [
								{
									"details": "Attempted to withdraw more assets than the max amount for `receiver`."
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							],
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC20 token failed."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"asset()": {
								"details": "See {IERC4626-asset}. "
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777)."
							},
							"convertToAssets(uint256)": {
								"details": "See {IERC4626-convertToAssets}. "
							},
							"convertToShares(uint256)": {
								"details": "See {IERC4626-convertToShares}. "
							},
							"decimals()": {
								"details": "Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}."
							},
							"deposit(uint256,address)": {
								"details": "See {IERC4626-deposit}. "
							},
							"maxDeposit(address)": {
								"details": "See {IERC4626-maxDeposit}. "
							},
							"maxMint(address)": {
								"details": "See {IERC4626-maxMint}. "
							},
							"maxRedeem(address)": {
								"details": "See {IERC4626-maxRedeem}. "
							},
							"maxWithdraw(address)": {
								"details": "See {IERC4626-maxWithdraw}. "
							},
							"mint(uint256,address)": {
								"details": "See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"previewDeposit(uint256)": {
								"details": "See {IERC4626-previewDeposit}. "
							},
							"previewMint(uint256)": {
								"details": "See {IERC4626-previewMint}. "
							},
							"previewRedeem(uint256)": {
								"details": "See {IERC4626-previewRedeem}. "
							},
							"previewWithdraw(uint256)": {
								"details": "See {IERC4626-previewWithdraw}. "
							},
							"redeem(uint256,address,address)": {
								"details": "See {IERC4626-redeem}. "
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalAssets()": {
								"details": "See {IERC4626-totalAssets}. "
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							},
							"withdraw(uint256,address,address)": {
								"details": "See {IERC4626-withdraw}. "
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"asset()": "38d52e0f",
							"balanceOf(address)": "70a08231",
							"convertToAssets(uint256)": "07a2d13a",
							"convertToShares(uint256)": "c6e6f592",
							"decimals()": "313ce567",
							"deposit(uint256,address)": "6e553f65",
							"maxDeposit(address)": "402d267d",
							"maxMint(address)": "c63d75b6",
							"maxRedeem(address)": "d905777e",
							"maxWithdraw(address)": "ce96cb77",
							"mint(uint256,address)": "94bf804d",
							"name()": "06fdde03",
							"previewDeposit(uint256)": "ef8b30f7",
							"previewMint(uint256)": "b3d7f6b9",
							"previewRedeem(uint256)": "4cdad506",
							"previewWithdraw(uint256)": "0a28a477",
							"redeem(uint256,address,address)": "ba087652",
							"symbol()": "95d89b41",
							"totalAssets()": "01e1d114",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256,address,address)": "b460af94"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxRedeem\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in https://eips.ethereum.org/EIPS/eip-4626[EIP-4626]. This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this contract and not the \\\"assets\\\" token which is an independent contract. [CAUTION] ==== In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning with a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by verifying the amount received is as expected, using a wrapper that performs these checks such as https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router]. Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()` corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more expensive than it is profitable. More details about the underlying math can be found xref:erc4626.adoc#inflation-attack[here]. The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets will cause the first user to exit to experience reduced losses in detriment to the last users that will experience bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the `_convertToShares` and `_convertToAssets` functions. To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide]. ====\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC4626ExceededMaxDeposit(address,uint256,uint256)\":[{\"details\":\"Attempted to deposit more assets than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxMint(address,uint256,uint256)\":[{\"details\":\"Attempted to mint more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxRedeem(address,uint256,uint256)\":[{\"details\":\"Attempted to redeem more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxWithdraw(address,uint256,uint256)\":[{\"details\":\"Attempted to withdraw more assets than the max amount for `receiver`.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"asset()\":{\"details\":\"See {IERC4626-asset}. \"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\"},\"convertToAssets(uint256)\":{\"details\":\"See {IERC4626-convertToAssets}. \"},\"convertToShares(uint256)\":{\"details\":\"See {IERC4626-convertToShares}. \"},\"decimals()\":{\"details\":\"Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}.\"},\"deposit(uint256,address)\":{\"details\":\"See {IERC4626-deposit}. \"},\"maxDeposit(address)\":{\"details\":\"See {IERC4626-maxDeposit}. \"},\"maxMint(address)\":{\"details\":\"See {IERC4626-maxMint}. \"},\"maxRedeem(address)\":{\"details\":\"See {IERC4626-maxRedeem}. \"},\"maxWithdraw(address)\":{\"details\":\"See {IERC4626-maxWithdraw}. \"},\"mint(uint256,address)\":{\"details\":\"See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"See {IERC4626-previewDeposit}. \"},\"previewMint(uint256)\":{\"details\":\"See {IERC4626-previewMint}. \"},\"previewRedeem(uint256)\":{\"details\":\"See {IERC4626-previewRedeem}. \"},\"previewWithdraw(uint256)\":{\"details\":\"See {IERC4626-previewWithdraw}. \"},\"redeem(uint256,address,address)\":{\"details\":\"See {IERC4626-redeem}. \"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssets()\":{\"details\":\"See {IERC4626-totalAssets}. \"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"withdraw(uint256,address,address)\":{\"details\":\"See {IERC4626-withdraw}. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":\"ERC4626\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":{\"keccak256\":\"0x1837547e04d5fe5334eeb77a345683c22995f1e7aa033020757ddf83a80fc72d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40d6031bc0e6f70edceb4e63fd624fe6be09dc48f5201c7a9078c26e6a9ef95f\",\"dweb:/ipfs/QmPTEBH7dmU3NgE6vtjMy7xEK54as9VHSgf9ojupwnvoke\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 477,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 483,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 485,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 487,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 489,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentAllowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "requestedDecrease",
									"type": "uint256"
								}
							],
							"name": "SafeERC20FailedDecreaseAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"errors": {
							"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failed `decreaseAllowance` request."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC20 token failed."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":751:5769  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":751:5769  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212206db92e98da7e1a551218b89d8ce0cb6d40f6dff5bc03144b46ba82cfbe992d5664736f6c63430008190033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212206db92e98da7e1a551218b89d8ce0cb6d40f6dff5bc03144b46ba82cfbe992d5664736f6c63430008190033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0xB92E98DA7E1A551218B89D8CE0CB PUSH14 0x40F6DFF5BC03144B46BA82CFBE99 0x2D JUMP PUSH5 0x736F6C6343 STOP ADDMOD NOT STOP CALLER ",
							"sourceMap": "751:5018:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212206db92e98da7e1a551218b89d8ce0cb6d40f6dff5bc03144b46ba82cfbe992d5664736f6c63430008190033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0xB92E98DA7E1A551218B89D8CE0CB PUSH14 0x40F6DFF5BC03144B46BA82CFBE99 0x2D JUMP PUSH5 0x736F6C6343 STOP ADDMOD NOT STOP CALLER ",
							"sourceMap": "751:5018:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"_callOptionalReturnBool(contract IERC20,bytes memory)": "infinite",
								"forceApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206db92e98da7e1a551218b89d8ce0cb6d40f6dff5bc03144b46ba82cfbe992d5664736f6c63430008190033",
									".code": [
										{
											"begin": 751,
											"end": 5769,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC4626.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"contracts/Pool.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"errors\":{\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "AddressEmptyCode",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"errors": {
							"AddressEmptyCode(address)": [
								{
									"details": "There's no code at `target` (it is not a contract)."
								}
							],
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":195:6261  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":195:6261  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220881eb351652b618c77e203da79e265347075bf9824e33e181896a06523d9b6b764736f6c63430008190033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220881eb351652b618c77e203da79e265347075bf9824e33e181896a06523d9b6b764736f6c63430008190033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP9 0x1E 0xB3 MLOAD PUSH6 0x2B618C77E203 0xDA PUSH26 0xE265347075BF9824E33E181896A06523D9B6B764736F6C634300 ADDMOD NOT STOP CALLER ",
							"sourceMap": "195:6066:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220881eb351652b618c77e203da79e265347075bf9824e33e181896a06523d9b6b764736f6c63430008190033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP9 0x1E 0xB3 MLOAD PUSH6 0x2B618C77E203 0xDA PUSH26 0xE265347075BF9824E33E181896A06523D9B6B764736F6C634300 ADDMOD NOT STOP CALLER ",
							"sourceMap": "195:6066:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"_revert(bytes memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220881eb351652b618c77e203da79e265347075bf9824e33e181896a06523d9b6b764736f6c63430008190033",
									".code": [
										{
											"begin": 195,
											"end": 6261,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC4626.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"contracts/Pool.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"errors": {
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/Math.sol\":203:15117  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":203:15117  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212201976350a279af382b692947a5aa6f56d5947abcdaa86f439a7c08cac7a8ded2b64736f6c63430008190033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212201976350a279af382b692947a5aa6f56d5947abcdaa86f439a7c08cac7a8ded2b64736f6c63430008190033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NOT PUSH23 0x350A279AF382B692947A5AA6F56D5947ABCDAA86F439A7 0xC0 DUP13 0xAC PUSH27 0x8DED2B64736F6C6343000819003300000000000000000000000000 ",
							"sourceMap": "203:14914:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212201976350a279af382b692947a5aa6f56d5947abcdaa86f439a7c08cac7a8ded2b64736f6c63430008190033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NOT PUSH23 0x350A279AF382B692947A5AA6F56D5947ABCDAA86F439A7 0xC0 DUP13 0xAC PUSH27 0x8DED2B64736F6C6343000819003300000000000000000000000000 ",
							"sourceMap": "203:14914:11:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite",
								"unsignedRoundsUp(enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "B"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "BYTE",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "ADDRESS",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE8",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "RETURN",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212201976350a279af382b692947a5aa6f56d5947abcdaa86f439a7c08cac7a8ded2b64736f6c63430008190033",
									".code": [
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSHDEPLOYADDRESS",
											"source": 11
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "ADDRESS",
											"source": 11
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "REVERT",
											"source": 11
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC4626.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"contracts/Pool.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Pool.sol": {
				"Pool": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_satoken",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "AddressEmptyCode",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "DEPRECATED_FUNCTION",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxDeposit",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxMint",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxRedeem",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxWithdraw",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Deposit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Withdraw",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "asset",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "convertToAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "convertToShares",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "deposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "maxDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "maxMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "redeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "satoken",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "withdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"AddressEmptyCode(address)": [
								{
									"details": "There's no code at `target` (it is not a contract)."
								}
							],
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC4626ExceededMaxDeposit(address,uint256,uint256)": [
								{
									"details": "Attempted to deposit more assets than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxMint(address,uint256,uint256)": [
								{
									"details": "Attempted to mint more shares than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxRedeem(address,uint256,uint256)": [
								{
									"details": "Attempted to redeem more shares than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxWithdraw(address,uint256,uint256)": [
								{
									"details": "Attempted to withdraw more assets than the max amount for `receiver`."
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							],
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC20 token failed."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"asset()": {
								"details": "See {IERC4626-asset}. "
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"convertToAssets(uint256)": {
								"details": "See {IERC4626-convertToAssets}. "
							},
							"convertToShares(uint256)": {
								"details": "See {IERC4626-convertToShares}. "
							},
							"decimals()": {
								"details": "Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}."
							},
							"deposit(uint256,address)": {
								"details": "See {IERC4626-deposit}. "
							},
							"maxDeposit(address)": {
								"details": "See {IERC4626-maxDeposit}. "
							},
							"maxMint(address)": {
								"details": "See {IERC4626-maxMint}. "
							},
							"maxRedeem(address)": {
								"details": "See {IERC4626-maxRedeem}. "
							},
							"maxWithdraw(address)": {
								"details": "See {IERC4626-maxWithdraw}. "
							},
							"mint(uint256,address)": {
								"details": "See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"previewDeposit(uint256)": {
								"details": "See {IERC4626-previewDeposit}. "
							},
							"previewMint(uint256)": {
								"details": "See {IERC4626-previewMint}. "
							},
							"previewRedeem(uint256)": {
								"details": "See {IERC4626-previewRedeem}. "
							},
							"previewWithdraw(uint256)": {
								"details": "See {IERC4626-previewWithdraw}. "
							},
							"redeem(uint256,address,address)": {
								"details": "See {IERC4626-redeem}. "
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalAssets()": {
								"details": "See {IERC4626-totalAssets}. "
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							},
							"withdraw(uint256,address,address)": {
								"details": "See {IERC4626-withdraw}. "
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Pool.sol\":254:2224  contract Pool is ERC4626 {... */\n  mstore(0x40, 0xc0)\n    /* \"contracts/Pool.sol\":337:342  false */\n  0x00\n    /* \"contracts/Pool.sol\":312:342  bool private isDeposit = false */\n  0x05\n  exp(0x0100, 0x14)\n  dup2\n  sload\n  dup2\n  0xff\n  mul\n  not\n  and\n  swap1\n  dup4\n  iszero\n  iszero\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/Pool.sol\":496:629  constructor(address _satoken) ERC4626(IERC20(_satoken)) ERC20(\"R-shared aUSDC\",\"rsaUSDC\") {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"contracts/Pool.sol\":541:549  _satoken */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1896:2009  constructor(string memory name_, string memory symbol_) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x0e\n  dup2\n  mstore\n  0x20\n  add\n  0x522d736861726564206155534443000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x07\n  dup2\n  mstore\n  0x20\n  add\n  0x7273615553444300000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1970:1975  name_ */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1962:1967  _name */\n  0x03\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1962:1975  _name = name_ */\n  swap1\n  dup2\n  tag_8\n  swap2\n  swap1\n  tag_9\n  jump\t// in\ntag_8:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1995:2002  symbol_ */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1985:1992  _symbol */\n  0x04\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1985:2002  _symbol = symbol_ */\n  swap1\n  dup2\n  tag_10\n  swap2\n  swap1\n  tag_9\n  jump\t// in\ntag_10:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1896:2009  constructor(string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4203:4215  bool success */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4217:4236  uint8 assetDecimals */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4240:4268  _tryGetAssetDecimals(asset_) */\n  tag_12\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4261:4267  asset_ */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4240:4260  _tryGetAssetDecimals */\n  shl(0x20, tag_13)\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4240:4268  _tryGetAssetDecimals(asset_) */\n  0x20\n  shr\n  jump\t// in\ntag_12:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4202:4268  (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_) */\n  swap2\n  pop\n  swap2\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4300:4307  success */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4300:4328  success ? assetDecimals : 18 */\n  tag_14\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4326:4328  18 */\n  0x12\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4300:4328  success ? assetDecimals : 18 */\n  jump(tag_15)\ntag_14:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4310:4323  assetDecimals */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4300:4328  success ? assetDecimals : 18 */\ntag_15:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4278:4328  _underlyingDecimals = success ? assetDecimals : 18 */\n  0xff\n  and\n  0xa0\n  dup2\n  0xff\n  and\n  dup2\n  mstore\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4347:4353  asset_ */\n  dup3\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4338:4353  _asset = asset_ */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x80\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4192:4360  {... */\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4165:4360  constructor(IERC20 asset_) {... */\n  pop\n    /* \"contracts/Pool.sol\":613:621  _satoken */\n  dup1\n    /* \"contracts/Pool.sol\":596:603  satoken */\n  0x05\n  0x00\n    /* \"contracts/Pool.sol\":596:622  satoken = IERC20(_satoken) */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/Pool.sol\":496:629  constructor(address _satoken) ERC4626(IERC20(_satoken)) ERC20(\"R-shared aUSDC\",\"rsaUSDC\") {... */\n  pop\n    /* \"contracts/Pool.sol\":254:2224  contract Pool is ERC4626 {... */\n  jump(tag_17)\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4503:5036  function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {... */\ntag_13:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4570:4574  bool */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4576:4581  uint8 */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4594:4606  bool success */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4608:4636  bytes memory encodedDecimals */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4648:4654  asset_ */\n  dup5\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4640:4666  address(asset_).staticcall */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4680:4723  abi.encodeCall(IERC20Metadata.decimals, ()) */\n  add(0x24, mload(0x40))\n  mload(0x40)\n  0x20\n  dup2\n  dup4\n  sub\n  sub\n  dup2\n  mstore\n  swap1\n  0x40\n  mstore\n  shl(0xe0, 0x313ce567)\n  0x20\n  dup3\n  add\n  dup1\n  mload\n  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n  dup4\n  dup2\n  dup4\n  and\n  or\n  dup4\n  mstore\n  pop\n  pop\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4640:4733  address(asset_).staticcall(... */\n  mload(0x40)\n  tag_19\n  swap2\n  swap1\n  tag_20\n  jump\t// in\ntag_19:\n  0x00\n  mload(0x40)\n  dup1\n  dup4\n  sub\n  dup2\n  dup6\n  gas\n  staticcall\n  swap2\n  pop\n  pop\n  returndatasize\n  dup1\n  0x00\n  dup2\n  eq\n  tag_23\n  jumpi\n  mload(0x40)\n  swap2\n  pop\n  and(add(returndatasize, 0x3f), not(0x1f))\n  dup3\n  add\n  0x40\n  mstore\n  returndatasize\n  dup3\n  mstore\n  returndatasize\n  0x00\n  0x20\n  dup5\n  add\n  returndatacopy\n  jump(tag_22)\ntag_23:\n  0x60\n  swap2\n  pop\ntag_22:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4593:4733  (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(... */\n  swap2\n  pop\n  swap2\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4747:4754  success */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4747:4786  success && encodedDecimals.length >= 32 */\n  dup1\n  iszero\n  tag_24\n  jumpi\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4784:4786  32 */\n  0x20\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4758:4773  encodedDecimals */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4758:4780  encodedDecimals.length */\n  mload\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4758:4786  encodedDecimals.length >= 32 */\n  lt\n  iszero\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4747:4786  success && encodedDecimals.length >= 32 */\ntag_24:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4743:5003  if (success && encodedDecimals.length >= 32) {... */\n  iszero\n  tag_25\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4802:4826  uint256 returnedDecimals */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4840:4855  encodedDecimals */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4829:4867  abi.decode(encodedDecimals, (uint256)) */\n  dup1\n  0x20\n  add\n  swap1\n  mload\n  dup2\n  add\n  swap1\n  tag_26\n  swap2\n  swap1\n  tag_27\n  jump\t// in\ntag_26:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4802:4867  uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256)) */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4905:4920  type(uint8).max */\n  0xff\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4885:4920  returnedDecimals <= type(uint8).max */\n  dup1\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4885:4901  returnedDecimals */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4885:4920  returnedDecimals <= type(uint8).max */\n  gt\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4881:4993  if (returnedDecimals <= type(uint8).max) {... */\n  tag_28\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4948:4952  true */\n  0x01\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4960:4976  returnedDecimals */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4940:4978  return (true, uint8(returnedDecimals)) */\n  swap5\n  pop\n  swap5\n  pop\n  pop\n  pop\n  pop\n  jump(tag_18)\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4881:4993  if (returnedDecimals <= type(uint8).max) {... */\ntag_28:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4788:5003  {... */\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4743:5003  if (success && encodedDecimals.length >= 32) {... */\ntag_25:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5020:5025  false */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5027:5028  0 */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5012:5029  return (false, 0) */\n  swap4\n  pop\n  swap4\n  pop\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4503:5036  function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {... */\ntag_18:\n  swap2\n  pop\n  swap2\n  jump\t// out\n    /* \"#utility.yul\":88:205   */\ntag_30:\n    /* \"#utility.yul\":197:198   */\n  0x00\n    /* \"#utility.yul\":194:195   */\n  dup1\n    /* \"#utility.yul\":187:199   */\n  revert\n    /* \"#utility.yul\":334:460   */\ntag_32:\n    /* \"#utility.yul\":371:378   */\n  0x00\n    /* \"#utility.yul\":411:453   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":404:409   */\n  dup3\n    /* \"#utility.yul\":400:454   */\n  and\n    /* \"#utility.yul\":389:454   */\n  swap1\n  pop\n    /* \"#utility.yul\":334:460   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":466:562   */\ntag_33:\n    /* \"#utility.yul\":503:510   */\n  0x00\n    /* \"#utility.yul\":532:556   */\n  tag_68\n    /* \"#utility.yul\":550:555   */\n  dup3\n    /* \"#utility.yul\":532:556   */\n  tag_32\n  jump\t// in\ntag_68:\n    /* \"#utility.yul\":521:556   */\n  swap1\n  pop\n    /* \"#utility.yul\":466:562   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":568:690   */\ntag_34:\n    /* \"#utility.yul\":641:665   */\n  tag_70\n    /* \"#utility.yul\":659:664   */\n  dup2\n    /* \"#utility.yul\":641:665   */\n  tag_33\n  jump\t// in\ntag_70:\n    /* \"#utility.yul\":634:639   */\n  dup2\n    /* \"#utility.yul\":631:666   */\n  eq\n    /* \"#utility.yul\":621:684   */\n  tag_71\n  jumpi\n    /* \"#utility.yul\":680:681   */\n  0x00\n    /* \"#utility.yul\":677:678   */\n  dup1\n    /* \"#utility.yul\":670:682   */\n  revert\n    /* \"#utility.yul\":621:684   */\ntag_71:\n    /* \"#utility.yul\":568:690   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":696:839   */\ntag_35:\n    /* \"#utility.yul\":753:758   */\n  0x00\n    /* \"#utility.yul\":784:790   */\n  dup2\n    /* \"#utility.yul\":778:791   */\n  mload\n    /* \"#utility.yul\":769:791   */\n  swap1\n  pop\n    /* \"#utility.yul\":800:833   */\n  tag_73\n    /* \"#utility.yul\":827:832   */\n  dup2\n    /* \"#utility.yul\":800:833   */\n  tag_34\n  jump\t// in\ntag_73:\n    /* \"#utility.yul\":696:839   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":845:1196   */\ntag_3:\n    /* \"#utility.yul\":915:921   */\n  0x00\n    /* \"#utility.yul\":964:966   */\n  0x20\n    /* \"#utility.yul\":952:961   */\n  dup3\n    /* \"#utility.yul\":943:950   */\n  dup5\n    /* \"#utility.yul\":939:962   */\n  sub\n    /* \"#utility.yul\":935:967   */\n  slt\n    /* \"#utility.yul\":932:1051   */\n  iszero\n  tag_75\n  jumpi\n    /* \"#utility.yul\":970:1049   */\n  tag_76\n  tag_30\n  jump\t// in\ntag_76:\n    /* \"#utility.yul\":932:1051   */\ntag_75:\n    /* \"#utility.yul\":1090:1091   */\n  0x00\n    /* \"#utility.yul\":1115:1179   */\n  tag_77\n    /* \"#utility.yul\":1171:1178   */\n  dup5\n    /* \"#utility.yul\":1162:1168   */\n  dup3\n    /* \"#utility.yul\":1151:1160   */\n  dup6\n    /* \"#utility.yul\":1147:1169   */\n  add\n    /* \"#utility.yul\":1115:1179   */\n  tag_35\n  jump\t// in\ntag_77:\n    /* \"#utility.yul\":1105:1179   */\n  swap2\n  pop\n    /* \"#utility.yul\":1061:1189   */\n  pop\n    /* \"#utility.yul\":845:1196   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1202:1301   */\ntag_36:\n    /* \"#utility.yul\":1254:1260   */\n  0x00\n    /* \"#utility.yul\":1288:1293   */\n  dup2\n    /* \"#utility.yul\":1282:1294   */\n  mload\n    /* \"#utility.yul\":1272:1294   */\n  swap1\n  pop\n    /* \"#utility.yul\":1202:1301   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1307:1487   */\ntag_37:\n    /* \"#utility.yul\":1355:1432   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":1352:1353   */\n  0x00\n    /* \"#utility.yul\":1345:1433   */\n  mstore\n    /* \"#utility.yul\":1452:1456   */\n  0x41\n    /* \"#utility.yul\":1449:1450   */\n  0x04\n    /* \"#utility.yul\":1442:1457   */\n  mstore\n    /* \"#utility.yul\":1476:1480   */\n  0x24\n    /* \"#utility.yul\":1473:1474   */\n  0x00\n    /* \"#utility.yul\":1466:1481   */\n  revert\n    /* \"#utility.yul\":1493:1673   */\ntag_38:\n    /* \"#utility.yul\":1541:1618   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":1538:1539   */\n  0x00\n    /* \"#utility.yul\":1531:1619   */\n  mstore\n    /* \"#utility.yul\":1638:1642   */\n  0x22\n    /* \"#utility.yul\":1635:1636   */\n  0x04\n    /* \"#utility.yul\":1628:1643   */\n  mstore\n    /* \"#utility.yul\":1662:1666   */\n  0x24\n    /* \"#utility.yul\":1659:1660   */\n  0x00\n    /* \"#utility.yul\":1652:1667   */\n  revert\n    /* \"#utility.yul\":1679:1999   */\ntag_39:\n    /* \"#utility.yul\":1723:1729   */\n  0x00\n    /* \"#utility.yul\":1760:1761   */\n  0x02\n    /* \"#utility.yul\":1754:1758   */\n  dup3\n    /* \"#utility.yul\":1750:1762   */\n  div\n    /* \"#utility.yul\":1740:1762   */\n  swap1\n  pop\n    /* \"#utility.yul\":1807:1808   */\n  0x01\n    /* \"#utility.yul\":1801:1805   */\n  dup3\n    /* \"#utility.yul\":1797:1809   */\n  and\n    /* \"#utility.yul\":1828:1846   */\n  dup1\n    /* \"#utility.yul\":1818:1899   */\n  tag_82\n  jumpi\n    /* \"#utility.yul\":1884:1888   */\n  0x7f\n    /* \"#utility.yul\":1876:1882   */\n  dup3\n    /* \"#utility.yul\":1872:1889   */\n  and\n    /* \"#utility.yul\":1862:1889   */\n  swap2\n  pop\n    /* \"#utility.yul\":1818:1899   */\ntag_82:\n    /* \"#utility.yul\":1946:1948   */\n  0x20\n    /* \"#utility.yul\":1938:1944   */\n  dup3\n    /* \"#utility.yul\":1935:1949   */\n  lt\n    /* \"#utility.yul\":1915:1933   */\n  dup2\n    /* \"#utility.yul\":1912:1950   */\n  sub\n    /* \"#utility.yul\":1909:1993   */\n  tag_83\n  jumpi\n    /* \"#utility.yul\":1965:1983   */\n  tag_84\n  tag_38\n  jump\t// in\ntag_84:\n    /* \"#utility.yul\":1909:1993   */\ntag_83:\n    /* \"#utility.yul\":1730:1999   */\n  pop\n    /* \"#utility.yul\":1679:1999   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2005:2146   */\ntag_40:\n    /* \"#utility.yul\":2054:2058   */\n  0x00\n    /* \"#utility.yul\":2077:2080   */\n  dup2\n    /* \"#utility.yul\":2069:2080   */\n  swap1\n  pop\n    /* \"#utility.yul\":2100:2103   */\n  dup2\n    /* \"#utility.yul\":2097:2098   */\n  0x00\n    /* \"#utility.yul\":2090:2104   */\n  mstore\n    /* \"#utility.yul\":2134:2138   */\n  0x20\n    /* \"#utility.yul\":2131:2132   */\n  0x00\n    /* \"#utility.yul\":2121:2139   */\n  keccak256\n    /* \"#utility.yul\":2113:2139   */\n  swap1\n  pop\n    /* \"#utility.yul\":2005:2146   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2152:2245   */\ntag_41:\n    /* \"#utility.yul\":2189:2195   */\n  0x00\n    /* \"#utility.yul\":2236:2238   */\n  0x20\n    /* \"#utility.yul\":2231:2233   */\n  0x1f\n    /* \"#utility.yul\":2224:2229   */\n  dup4\n    /* \"#utility.yul\":2220:2234   */\n  add\n    /* \"#utility.yul\":2216:2239   */\n  div\n    /* \"#utility.yul\":2206:2239   */\n  swap1\n  pop\n    /* \"#utility.yul\":2152:2245   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2251:2358   */\ntag_42:\n    /* \"#utility.yul\":2295:2303   */\n  0x00\n    /* \"#utility.yul\":2345:2350   */\n  dup3\n    /* \"#utility.yul\":2339:2343   */\n  dup3\n    /* \"#utility.yul\":2335:2351   */\n  shl\n    /* \"#utility.yul\":2314:2351   */\n  swap1\n  pop\n    /* \"#utility.yul\":2251:2358   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2364:2757   */\ntag_43:\n    /* \"#utility.yul\":2433:2439   */\n  0x00\n    /* \"#utility.yul\":2483:2484   */\n  0x08\n    /* \"#utility.yul\":2471:2481   */\n  dup4\n    /* \"#utility.yul\":2467:2485   */\n  mul\n    /* \"#utility.yul\":2506:2603   */\n  tag_89\n    /* \"#utility.yul\":2536:2602   */\n  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":2525:2534   */\n  dup3\n    /* \"#utility.yul\":2506:2603   */\n  tag_42\n  jump\t// in\ntag_89:\n    /* \"#utility.yul\":2624:2663   */\n  tag_90\n    /* \"#utility.yul\":2654:2662   */\n  dup7\n    /* \"#utility.yul\":2643:2652   */\n  dup4\n    /* \"#utility.yul\":2624:2663   */\n  tag_42\n  jump\t// in\ntag_90:\n    /* \"#utility.yul\":2612:2663   */\n  swap6\n  pop\n    /* \"#utility.yul\":2696:2700   */\n  dup1\n    /* \"#utility.yul\":2692:2701   */\n  not\n    /* \"#utility.yul\":2685:2690   */\n  dup5\n    /* \"#utility.yul\":2681:2702   */\n  and\n    /* \"#utility.yul\":2672:2702   */\n  swap4\n  pop\n    /* \"#utility.yul\":2745:2749   */\n  dup1\n    /* \"#utility.yul\":2735:2743   */\n  dup7\n    /* \"#utility.yul\":2731:2750   */\n  and\n    /* \"#utility.yul\":2724:2729   */\n  dup5\n    /* \"#utility.yul\":2721:2751   */\n  or\n    /* \"#utility.yul\":2711:2751   */\n  swap3\n  pop\n    /* \"#utility.yul\":2440:2757   */\n  pop\n  pop\n    /* \"#utility.yul\":2364:2757   */\n  swap4\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2763:2840   */\ntag_44:\n    /* \"#utility.yul\":2800:2807   */\n  0x00\n    /* \"#utility.yul\":2829:2834   */\n  dup2\n    /* \"#utility.yul\":2818:2834   */\n  swap1\n  pop\n    /* \"#utility.yul\":2763:2840   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2846:2906   */\ntag_45:\n    /* \"#utility.yul\":2874:2877   */\n  0x00\n    /* \"#utility.yul\":2895:2900   */\n  dup2\n    /* \"#utility.yul\":2888:2900   */\n  swap1\n  pop\n    /* \"#utility.yul\":2846:2906   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2912:3054   */\ntag_46:\n    /* \"#utility.yul\":2962:2971   */\n  0x00\n    /* \"#utility.yul\":2995:3048   */\n  tag_94\n    /* \"#utility.yul\":3013:3047   */\n  tag_95\n    /* \"#utility.yul\":3022:3046   */\n  tag_96\n    /* \"#utility.yul\":3040:3045   */\n  dup5\n    /* \"#utility.yul\":3022:3046   */\n  tag_44\n  jump\t// in\ntag_96:\n    /* \"#utility.yul\":3013:3047   */\n  tag_45\n  jump\t// in\ntag_95:\n    /* \"#utility.yul\":2995:3048   */\n  tag_44\n  jump\t// in\ntag_94:\n    /* \"#utility.yul\":2982:3048   */\n  swap1\n  pop\n    /* \"#utility.yul\":2912:3054   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3060:3135   */\ntag_47:\n    /* \"#utility.yul\":3103:3106   */\n  0x00\n    /* \"#utility.yul\":3124:3129   */\n  dup2\n    /* \"#utility.yul\":3117:3129   */\n  swap1\n  pop\n    /* \"#utility.yul\":3060:3135   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3141:3410   */\ntag_48:\n    /* \"#utility.yul\":3251:3290   */\n  tag_99\n    /* \"#utility.yul\":3282:3289   */\n  dup4\n    /* \"#utility.yul\":3251:3290   */\n  tag_46\n  jump\t// in\ntag_99:\n    /* \"#utility.yul\":3312:3403   */\n  tag_100\n    /* \"#utility.yul\":3361:3402   */\n  tag_101\n    /* \"#utility.yul\":3385:3401   */\n  dup3\n    /* \"#utility.yul\":3361:3402   */\n  tag_47\n  jump\t// in\ntag_101:\n    /* \"#utility.yul\":3353:3359   */\n  dup5\n    /* \"#utility.yul\":3346:3350   */\n  dup5\n    /* \"#utility.yul\":3340:3351   */\n  sload\n    /* \"#utility.yul\":3312:3403   */\n  tag_43\n  jump\t// in\ntag_100:\n    /* \"#utility.yul\":3306:3310   */\n  dup3\n    /* \"#utility.yul\":3299:3404   */\n  sstore\n    /* \"#utility.yul\":3217:3410   */\n  pop\n    /* \"#utility.yul\":3141:3410   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3416:3489   */\ntag_49:\n    /* \"#utility.yul\":3461:3464   */\n  0x00\n    /* \"#utility.yul\":3416:3489   */\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":3495:3684   */\ntag_50:\n    /* \"#utility.yul\":3572:3604   */\n  tag_104\n  tag_49\n  jump\t// in\ntag_104:\n    /* \"#utility.yul\":3613:3678   */\n  tag_105\n    /* \"#utility.yul\":3671:3677   */\n  dup2\n    /* \"#utility.yul\":3663:3669   */\n  dup5\n    /* \"#utility.yul\":3657:3661   */\n  dup5\n    /* \"#utility.yul\":3613:3678   */\n  tag_48\n  jump\t// in\ntag_105:\n    /* \"#utility.yul\":3548:3684   */\n  pop\n    /* \"#utility.yul\":3495:3684   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3690:3876   */\ntag_51:\n    /* \"#utility.yul\":3750:3870   */\ntag_107:\n    /* \"#utility.yul\":3767:3770   */\n  dup2\n    /* \"#utility.yul\":3760:3765   */\n  dup2\n    /* \"#utility.yul\":3757:3771   */\n  lt\n    /* \"#utility.yul\":3750:3870   */\n  iszero\n  tag_109\n  jumpi\n    /* \"#utility.yul\":3821:3860   */\n  tag_110\n    /* \"#utility.yul\":3858:3859   */\n  0x00\n    /* \"#utility.yul\":3851:3856   */\n  dup3\n    /* \"#utility.yul\":3821:3860   */\n  tag_50\n  jump\t// in\ntag_110:\n    /* \"#utility.yul\":3794:3795   */\n  0x01\n    /* \"#utility.yul\":3787:3792   */\n  dup2\n    /* \"#utility.yul\":3783:3796   */\n  add\n    /* \"#utility.yul\":3774:3796   */\n  swap1\n  pop\n    /* \"#utility.yul\":3750:3870   */\n  jump(tag_107)\ntag_109:\n    /* \"#utility.yul\":3690:3876   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3882:4425   */\ntag_52:\n    /* \"#utility.yul\":3983:3985   */\n  0x1f\n    /* \"#utility.yul\":3978:3981   */\n  dup3\n    /* \"#utility.yul\":3975:3986   */\n  gt\n    /* \"#utility.yul\":3972:4418   */\n  iszero\n  tag_112\n  jumpi\n    /* \"#utility.yul\":4017:4055   */\n  tag_113\n    /* \"#utility.yul\":4049:4054   */\n  dup2\n    /* \"#utility.yul\":4017:4055   */\n  tag_40\n  jump\t// in\ntag_113:\n    /* \"#utility.yul\":4101:4130   */\n  tag_114\n    /* \"#utility.yul\":4119:4129   */\n  dup5\n    /* \"#utility.yul\":4101:4130   */\n  tag_41\n  jump\t// in\ntag_114:\n    /* \"#utility.yul\":4091:4099   */\n  dup2\n    /* \"#utility.yul\":4087:4131   */\n  add\n    /* \"#utility.yul\":4284:4286   */\n  0x20\n    /* \"#utility.yul\":4272:4282   */\n  dup6\n    /* \"#utility.yul\":4269:4287   */\n  lt\n    /* \"#utility.yul\":4266:4315   */\n  iszero\n  tag_115\n  jumpi\n    /* \"#utility.yul\":4305:4313   */\n  dup2\n    /* \"#utility.yul\":4290:4313   */\n  swap1\n  pop\n    /* \"#utility.yul\":4266:4315   */\ntag_115:\n    /* \"#utility.yul\":4328:4408   */\n  tag_116\n    /* \"#utility.yul\":4384:4406   */\n  tag_117\n    /* \"#utility.yul\":4402:4405   */\n  dup6\n    /* \"#utility.yul\":4384:4406   */\n  tag_41\n  jump\t// in\ntag_117:\n    /* \"#utility.yul\":4374:4382   */\n  dup4\n    /* \"#utility.yul\":4370:4407   */\n  add\n    /* \"#utility.yul\":4357:4368   */\n  dup3\n    /* \"#utility.yul\":4328:4408   */\n  tag_51\n  jump\t// in\ntag_116:\n    /* \"#utility.yul\":3987:4418   */\n  pop\n  pop\n    /* \"#utility.yul\":3972:4418   */\ntag_112:\n    /* \"#utility.yul\":3882:4425   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4431:4548   */\ntag_53:\n    /* \"#utility.yul\":4485:4493   */\n  0x00\n    /* \"#utility.yul\":4535:4540   */\n  dup3\n    /* \"#utility.yul\":4529:4533   */\n  dup3\n    /* \"#utility.yul\":4525:4541   */\n  shr\n    /* \"#utility.yul\":4504:4541   */\n  swap1\n  pop\n    /* \"#utility.yul\":4431:4548   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4554:4723   */\ntag_54:\n    /* \"#utility.yul\":4598:4604   */\n  0x00\n    /* \"#utility.yul\":4631:4682   */\n  tag_120\n    /* \"#utility.yul\":4679:4680   */\n  0x00\n    /* \"#utility.yul\":4675:4681   */\n  not\n    /* \"#utility.yul\":4667:4672   */\n  dup5\n    /* \"#utility.yul\":4664:4665   */\n  0x08\n    /* \"#utility.yul\":4660:4673   */\n  mul\n    /* \"#utility.yul\":4631:4682   */\n  tag_53\n  jump\t// in\ntag_120:\n    /* \"#utility.yul\":4627:4683   */\n  not\n    /* \"#utility.yul\":4712:4716   */\n  dup1\n    /* \"#utility.yul\":4706:4710   */\n  dup4\n    /* \"#utility.yul\":4702:4717   */\n  and\n    /* \"#utility.yul\":4692:4717   */\n  swap2\n  pop\n    /* \"#utility.yul\":4605:4723   */\n  pop\n    /* \"#utility.yul\":4554:4723   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4728:5023   */\ntag_55:\n    /* \"#utility.yul\":4804:4808   */\n  0x00\n    /* \"#utility.yul\":4950:4979   */\n  tag_122\n    /* \"#utility.yul\":4975:4978   */\n  dup4\n    /* \"#utility.yul\":4969:4973   */\n  dup4\n    /* \"#utility.yul\":4950:4979   */\n  tag_54\n  jump\t// in\ntag_122:\n    /* \"#utility.yul\":4942:4979   */\n  swap2\n  pop\n    /* \"#utility.yul\":5012:5015   */\n  dup3\n    /* \"#utility.yul\":5009:5010   */\n  0x02\n    /* \"#utility.yul\":5005:5016   */\n  mul\n    /* \"#utility.yul\":4999:5003   */\n  dup3\n    /* \"#utility.yul\":4996:5017   */\n  or\n    /* \"#utility.yul\":4988:5017   */\n  swap1\n  pop\n    /* \"#utility.yul\":4728:5023   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5028:6423   */\ntag_9:\n    /* \"#utility.yul\":5145:5182   */\n  tag_124\n    /* \"#utility.yul\":5178:5181   */\n  dup3\n    /* \"#utility.yul\":5145:5182   */\n  tag_36\n  jump\t// in\ntag_124:\n    /* \"#utility.yul\":5247:5265   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":5239:5245   */\n  dup2\n    /* \"#utility.yul\":5236:5266   */\n  gt\n    /* \"#utility.yul\":5233:5289   */\n  iszero\n  tag_125\n  jumpi\n    /* \"#utility.yul\":5269:5287   */\n  tag_126\n  tag_37\n  jump\t// in\ntag_126:\n    /* \"#utility.yul\":5233:5289   */\ntag_125:\n    /* \"#utility.yul\":5313:5351   */\n  tag_127\n    /* \"#utility.yul\":5345:5349   */\n  dup3\n    /* \"#utility.yul\":5339:5350   */\n  sload\n    /* \"#utility.yul\":5313:5351   */\n  tag_39\n  jump\t// in\ntag_127:\n    /* \"#utility.yul\":5398:5465   */\n  tag_128\n    /* \"#utility.yul\":5458:5464   */\n  dup3\n    /* \"#utility.yul\":5450:5456   */\n  dup3\n    /* \"#utility.yul\":5444:5448   */\n  dup6\n    /* \"#utility.yul\":5398:5465   */\n  tag_52\n  jump\t// in\ntag_128:\n    /* \"#utility.yul\":5492:5493   */\n  0x00\n    /* \"#utility.yul\":5516:5520   */\n  0x20\n    /* \"#utility.yul\":5503:5520   */\n  swap1\n  pop\n    /* \"#utility.yul\":5548:5550   */\n  0x1f\n    /* \"#utility.yul\":5540:5546   */\n  dup4\n    /* \"#utility.yul\":5537:5551   */\n  gt\n    /* \"#utility.yul\":5565:5566   */\n  0x01\n    /* \"#utility.yul\":5560:6178   */\n  dup2\n  eq\n  tag_130\n  jumpi\n    /* \"#utility.yul\":6222:6223   */\n  0x00\n    /* \"#utility.yul\":6239:6245   */\n  dup5\n    /* \"#utility.yul\":6236:6313   */\n  iszero\n  tag_131\n  jumpi\n    /* \"#utility.yul\":6288:6297   */\n  dup3\n    /* \"#utility.yul\":6283:6286   */\n  dup8\n    /* \"#utility.yul\":6279:6298   */\n  add\n    /* \"#utility.yul\":6273:6299   */\n  mload\n    /* \"#utility.yul\":6264:6299   */\n  swap1\n  pop\n    /* \"#utility.yul\":6236:6313   */\ntag_131:\n    /* \"#utility.yul\":6339:6406   */\n  tag_132\n    /* \"#utility.yul\":6399:6405   */\n  dup6\n    /* \"#utility.yul\":6392:6397   */\n  dup3\n    /* \"#utility.yul\":6339:6406   */\n  tag_55\n  jump\t// in\ntag_132:\n    /* \"#utility.yul\":6333:6337   */\n  dup7\n    /* \"#utility.yul\":6326:6407   */\n  sstore\n    /* \"#utility.yul\":6195:6417   */\n  pop\n    /* \"#utility.yul\":5530:6417   */\n  jump(tag_129)\n    /* \"#utility.yul\":5560:6178   */\ntag_130:\n    /* \"#utility.yul\":5612:5616   */\n  0x1f\n    /* \"#utility.yul\":5608:5617   */\n  not\n    /* \"#utility.yul\":5600:5606   */\n  dup5\n    /* \"#utility.yul\":5596:5618   */\n  and\n    /* \"#utility.yul\":5646:5683   */\n  tag_133\n    /* \"#utility.yul\":5678:5682   */\n  dup7\n    /* \"#utility.yul\":5646:5683   */\n  tag_40\n  jump\t// in\ntag_133:\n    /* \"#utility.yul\":5705:5706   */\n  0x00\n    /* \"#utility.yul\":5719:5927   */\ntag_134:\n    /* \"#utility.yul\":5733:5740   */\n  dup3\n    /* \"#utility.yul\":5730:5731   */\n  dup2\n    /* \"#utility.yul\":5727:5741   */\n  lt\n    /* \"#utility.yul\":5719:5927   */\n  iszero\n  tag_136\n  jumpi\n    /* \"#utility.yul\":5812:5821   */\n  dup5\n    /* \"#utility.yul\":5807:5810   */\n  dup10\n    /* \"#utility.yul\":5803:5822   */\n  add\n    /* \"#utility.yul\":5797:5823   */\n  mload\n    /* \"#utility.yul\":5789:5795   */\n  dup3\n    /* \"#utility.yul\":5782:5824   */\n  sstore\n    /* \"#utility.yul\":5863:5864   */\n  0x01\n    /* \"#utility.yul\":5855:5861   */\n  dup3\n    /* \"#utility.yul\":5851:5865   */\n  add\n    /* \"#utility.yul\":5841:5865   */\n  swap2\n  pop\n    /* \"#utility.yul\":5910:5912   */\n  0x20\n    /* \"#utility.yul\":5899:5908   */\n  dup6\n    /* \"#utility.yul\":5895:5913   */\n  add\n    /* \"#utility.yul\":5882:5913   */\n  swap5\n  pop\n    /* \"#utility.yul\":5756:5760   */\n  0x20\n    /* \"#utility.yul\":5753:5754   */\n  dup2\n    /* \"#utility.yul\":5749:5761   */\n  add\n    /* \"#utility.yul\":5744:5761   */\n  swap1\n  pop\n    /* \"#utility.yul\":5719:5927   */\n  jump(tag_134)\ntag_136:\n    /* \"#utility.yul\":5955:5961   */\n  dup7\n    /* \"#utility.yul\":5946:5953   */\n  dup4\n    /* \"#utility.yul\":5943:5962   */\n  lt\n    /* \"#utility.yul\":5940:6119   */\n  iszero\n  tag_137\n  jumpi\n    /* \"#utility.yul\":6013:6022   */\n  dup5\n    /* \"#utility.yul\":6008:6011   */\n  dup10\n    /* \"#utility.yul\":6004:6023   */\n  add\n    /* \"#utility.yul\":5998:6024   */\n  mload\n    /* \"#utility.yul\":6056:6104   */\n  tag_138\n    /* \"#utility.yul\":6098:6102   */\n  0x1f\n    /* \"#utility.yul\":6090:6096   */\n  dup10\n    /* \"#utility.yul\":6086:6103   */\n  and\n    /* \"#utility.yul\":6075:6084   */\n  dup3\n    /* \"#utility.yul\":6056:6104   */\n  tag_54\n  jump\t// in\ntag_138:\n    /* \"#utility.yul\":6048:6054   */\n  dup4\n    /* \"#utility.yul\":6041:6105   */\n  sstore\n    /* \"#utility.yul\":5963:6119   */\n  pop\n    /* \"#utility.yul\":5940:6119   */\ntag_137:\n    /* \"#utility.yul\":6165:6166   */\n  0x01\n    /* \"#utility.yul\":6161:6162   */\n  0x02\n    /* \"#utility.yul\":6153:6159   */\n  dup9\n    /* \"#utility.yul\":6149:6163   */\n  mul\n    /* \"#utility.yul\":6145:6167   */\n  add\n    /* \"#utility.yul\":6139:6143   */\n  dup9\n    /* \"#utility.yul\":6132:6168   */\n  sstore\n    /* \"#utility.yul\":5567:6178   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":5530:6417   */\ntag_129:\n  pop\n    /* \"#utility.yul\":5120:6423   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":5028:6423   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6429:6527   */\ntag_56:\n    /* \"#utility.yul\":6480:6486   */\n  0x00\n    /* \"#utility.yul\":6514:6519   */\n  dup2\n    /* \"#utility.yul\":6508:6520   */\n  mload\n    /* \"#utility.yul\":6498:6520   */\n  swap1\n  pop\n    /* \"#utility.yul\":6429:6527   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6533:6680   */\ntag_57:\n    /* \"#utility.yul\":6634:6645   */\n  0x00\n    /* \"#utility.yul\":6671:6674   */\n  dup2\n    /* \"#utility.yul\":6656:6674   */\n  swap1\n  pop\n    /* \"#utility.yul\":6533:6680   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6686:6825   */\ntag_58:\n    /* \"#utility.yul\":6775:6781   */\n  dup3\n    /* \"#utility.yul\":6770:6773   */\n  dup2\n    /* \"#utility.yul\":6765:6768   */\n  dup4\n    /* \"#utility.yul\":6759:6782   */\n  mcopy\n    /* \"#utility.yul\":6816:6817   */\n  0x00\n    /* \"#utility.yul\":6807:6813   */\n  dup4\n    /* \"#utility.yul\":6802:6805   */\n  dup4\n    /* \"#utility.yul\":6798:6814   */\n  add\n    /* \"#utility.yul\":6791:6818   */\n  mstore\n    /* \"#utility.yul\":6686:6825   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6831:7217   */\ntag_59:\n    /* \"#utility.yul\":6935:6938   */\n  0x00\n    /* \"#utility.yul\":6963:7001   */\n  tag_143\n    /* \"#utility.yul\":6995:7000   */\n  dup3\n    /* \"#utility.yul\":6963:7001   */\n  tag_56\n  jump\t// in\ntag_143:\n    /* \"#utility.yul\":7017:7105   */\n  tag_144\n    /* \"#utility.yul\":7098:7104   */\n  dup2\n    /* \"#utility.yul\":7093:7096   */\n  dup6\n    /* \"#utility.yul\":7017:7105   */\n  tag_57\n  jump\t// in\ntag_144:\n    /* \"#utility.yul\":7010:7105   */\n  swap4\n  pop\n    /* \"#utility.yul\":7114:7179   */\n  tag_145\n    /* \"#utility.yul\":7172:7178   */\n  dup2\n    /* \"#utility.yul\":7167:7170   */\n  dup6\n    /* \"#utility.yul\":7160:7164   */\n  0x20\n    /* \"#utility.yul\":7153:7158   */\n  dup7\n    /* \"#utility.yul\":7149:7165   */\n  add\n    /* \"#utility.yul\":7114:7179   */\n  tag_58\n  jump\t// in\ntag_145:\n    /* \"#utility.yul\":7204:7210   */\n  dup1\n    /* \"#utility.yul\":7199:7202   */\n  dup5\n    /* \"#utility.yul\":7195:7211   */\n  add\n    /* \"#utility.yul\":7188:7211   */\n  swap2\n  pop\n    /* \"#utility.yul\":6939:7217   */\n  pop\n    /* \"#utility.yul\":6831:7217   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7223:7494   */\ntag_20:\n    /* \"#utility.yul\":7353:7356   */\n  0x00\n    /* \"#utility.yul\":7375:7468   */\n  tag_147\n    /* \"#utility.yul\":7464:7467   */\n  dup3\n    /* \"#utility.yul\":7455:7461   */\n  dup5\n    /* \"#utility.yul\":7375:7468   */\n  tag_59\n  jump\t// in\ntag_147:\n    /* \"#utility.yul\":7368:7468   */\n  swap2\n  pop\n    /* \"#utility.yul\":7485:7488   */\n  dup2\n    /* \"#utility.yul\":7478:7488   */\n  swap1\n  pop\n    /* \"#utility.yul\":7223:7494   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7500:7622   */\ntag_60:\n    /* \"#utility.yul\":7573:7597   */\n  tag_149\n    /* \"#utility.yul\":7591:7596   */\n  dup2\n    /* \"#utility.yul\":7573:7597   */\n  tag_44\n  jump\t// in\ntag_149:\n    /* \"#utility.yul\":7566:7571   */\n  dup2\n    /* \"#utility.yul\":7563:7598   */\n  eq\n    /* \"#utility.yul\":7553:7616   */\n  tag_150\n  jumpi\n    /* \"#utility.yul\":7612:7613   */\n  0x00\n    /* \"#utility.yul\":7609:7610   */\n  dup1\n    /* \"#utility.yul\":7602:7614   */\n  revert\n    /* \"#utility.yul\":7553:7616   */\ntag_150:\n    /* \"#utility.yul\":7500:7622   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7628:7771   */\ntag_61:\n    /* \"#utility.yul\":7685:7690   */\n  0x00\n    /* \"#utility.yul\":7716:7722   */\n  dup2\n    /* \"#utility.yul\":7710:7723   */\n  mload\n    /* \"#utility.yul\":7701:7723   */\n  swap1\n  pop\n    /* \"#utility.yul\":7732:7765   */\n  tag_152\n    /* \"#utility.yul\":7759:7764   */\n  dup2\n    /* \"#utility.yul\":7732:7765   */\n  tag_60\n  jump\t// in\ntag_152:\n    /* \"#utility.yul\":7628:7771   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7777:8128   */\ntag_27:\n    /* \"#utility.yul\":7847:7853   */\n  0x00\n    /* \"#utility.yul\":7896:7898   */\n  0x20\n    /* \"#utility.yul\":7884:7893   */\n  dup3\n    /* \"#utility.yul\":7875:7882   */\n  dup5\n    /* \"#utility.yul\":7871:7894   */\n  sub\n    /* \"#utility.yul\":7867:7899   */\n  slt\n    /* \"#utility.yul\":7864:7983   */\n  iszero\n  tag_154\n  jumpi\n    /* \"#utility.yul\":7902:7981   */\n  tag_155\n  tag_30\n  jump\t// in\ntag_155:\n    /* \"#utility.yul\":7864:7983   */\ntag_154:\n    /* \"#utility.yul\":8022:8023   */\n  0x00\n    /* \"#utility.yul\":8047:8111   */\n  tag_156\n    /* \"#utility.yul\":8103:8110   */\n  dup5\n    /* \"#utility.yul\":8094:8100   */\n  dup3\n    /* \"#utility.yul\":8083:8092   */\n  dup6\n    /* \"#utility.yul\":8079:8101   */\n  add\n    /* \"#utility.yul\":8047:8111   */\n  tag_61\n  jump\t// in\ntag_156:\n    /* \"#utility.yul\":8037:8111   */\n  swap2\n  pop\n    /* \"#utility.yul\":7993:8121   */\n  pop\n    /* \"#utility.yul\":7777:8128   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/Pool.sol\":254:2224  contract Pool is ERC4626 {... */\ntag_17:\n  mload(0x80)\n  mload(0xa0)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0x03ded74204f6f646223f7cf6a543675febcd907713c268f77886749ddbf07d3e\")\n  0x00\n  assignImmutable(\"0x912cdad641b4408bd64eb5a331e5fe393f33f2296e0c7fad54e613ac760cfb47\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"contracts/Pool.sol\":254:2224  contract Pool is ERC4626 {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x866c99e2\n      gt\n      tag_29\n      jumpi\n      dup1\n      0xba087652\n      gt\n      tag_30\n      jumpi\n      dup1\n      0xce96cb77\n      gt\n      tag_31\n      jumpi\n      dup1\n      0xce96cb77\n      eq\n      tag_25\n      jumpi\n      dup1\n      0xd905777e\n      eq\n      tag_26\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_27\n      jumpi\n      dup1\n      0xef8b30f7\n      eq\n      tag_28\n      jumpi\n      jump(tag_2)\n    tag_31:\n      dup1\n      0xba087652\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xc63d75b6\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xc6e6f592\n      eq\n      tag_24\n      jumpi\n      jump(tag_2)\n    tag_30:\n      dup1\n      0x866c99e2\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x94bf804d\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xb3d7f6b9\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xb460af94\n      eq\n      tag_21\n      jumpi\n      jump(tag_2)\n    tag_29:\n      dup1\n      0x23b872dd\n      gt\n      tag_32\n      jumpi\n      dup1\n      0x402d267d\n      gt\n      tag_33\n      jumpi\n      dup1\n      0x402d267d\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x4cdad506\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x6e553f65\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_15\n      jumpi\n      jump(tag_2)\n    tag_33:\n      dup1\n      0x23b872dd\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x38d52e0f\n      eq\n      tag_11\n      jumpi\n      jump(tag_2)\n    tag_32:\n      dup1\n      0x01e1d114\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x07a2d13a\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x0a28a477\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_8\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5780:5896  function totalAssets() public view virtual returns (uint256) {... */\n    tag_3:\n      tag_34\n      tag_35\n      jump\t// in\n    tag_34:\n      mload(0x40)\n      tag_36\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_36:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n    tag_4:\n      tag_38\n      tag_39\n      jump\t// in\n    tag_38:\n      mload(0x40)\n      tag_40\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_40:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6152:6300  function convertToAssets(uint256 shares) public view virtual returns (uint256) {... */\n    tag_5:\n      tag_42\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_43\n      swap2\n      swap1\n      tag_44\n      jump\t// in\n    tag_43:\n      tag_45\n      jump\t// in\n    tag_42:\n      mload(0x40)\n      tag_46\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_46:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_6:\n      tag_47\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_48\n      swap2\n      swap1\n      tag_49\n      jump\t// in\n    tag_48:\n      tag_50\n      jump\t// in\n    tag_47:\n      mload(0x40)\n      tag_51\n      swap2\n      swap1\n      tag_52\n      jump\t// in\n    tag_51:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7418:7565  function previewWithdraw(uint256 assets) public view virtual returns (uint256) {... */\n    tag_7:\n      tag_53\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_54\n      swap2\n      swap1\n      tag_44\n      jump\t// in\n    tag_54:\n      tag_55\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      tag_56\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_56:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n    tag_8:\n      tag_57\n      tag_58\n      jump\t// in\n    tag_57:\n      mload(0x40)\n      tag_59\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_59:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_9:\n      tag_60\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_61\n      swap2\n      swap1\n      tag_62\n      jump\t// in\n    tag_61:\n      tag_63\n      jump\t// in\n    tag_60:\n      mload(0x40)\n      tag_64\n      swap2\n      swap1\n      tag_52\n      jump\t// in\n    tag_64:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5441:5592  function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {... */\n    tag_10:\n      tag_65\n      tag_66\n      jump\t// in\n    tag_65:\n      mload(0x40)\n      tag_67\n      swap2\n      swap1\n      tag_68\n      jump\t// in\n    tag_67:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5636:5730  function asset() public view virtual returns (address) {... */\n    tag_11:\n      tag_69\n      tag_70\n      jump\t// in\n    tag_69:\n      mload(0x40)\n      tag_71\n      swap2\n      swap1\n      tag_72\n      jump\t// in\n    tag_71:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6349:6457  function maxDeposit(address) public view virtual returns (uint256) {... */\n    tag_12:\n      tag_73\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_74\n      swap2\n      swap1\n      tag_75\n      jump\t// in\n    tag_74:\n      tag_76\n      jump\t// in\n    tag_73:\n      mload(0x40)\n      tag_77\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_77:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7617:7763  function previewRedeem(uint256 shares) public view virtual returns (uint256) {... */\n    tag_13:\n      tag_78\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_79\n      swap2\n      swap1\n      tag_44\n      jump\t// in\n    tag_79:\n      tag_80\n      jump\t// in\n    tag_78:\n      mload(0x40)\n      tag_81\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_81:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Pool.sol\":635:1131  function deposit(uint256 assets, address receiver) auth public override returns (uint256) {... */\n    tag_14:\n      tag_82\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_83\n      swap2\n      swap1\n      tag_84\n      jump\t// in\n    tag_83:\n      tag_85\n      jump\t// in\n    tag_82:\n      mload(0x40)\n      tag_86\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_86:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_15:\n      tag_87\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_88\n      swap2\n      swap1\n      tag_75\n      jump\t// in\n    tag_88:\n      tag_89\n      jump\t// in\n    tag_87:\n      mload(0x40)\n      tag_90\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_90:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Pool.sol\":285:306  IERC20 public satoken */\n    tag_16:\n      tag_91\n      tag_92\n      jump\t// in\n    tag_91:\n      mload(0x40)\n      tag_93\n      swap2\n      swap1\n      tag_94\n      jump\t// in\n    tag_93:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Pool.sol\":1572:1699  function mint(uint256 shares, address receiver) public override returns (uint256) {... */\n    tag_17:\n      tag_95\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_96\n      swap2\n      swap1\n      tag_84\n      jump\t// in\n    tag_96:\n      tag_97\n      jump\t// in\n    tag_95:\n      mload(0x40)\n      tag_98\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_98:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n    tag_18:\n      tag_99\n      tag_100\n      jump\t// in\n    tag_99:\n      mload(0x40)\n      tag_101\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_101:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_19:\n      tag_102\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_103\n      swap2\n      swap1\n      tag_49\n      jump\t// in\n    tag_103:\n      tag_104\n      jump\t// in\n    tag_102:\n      mload(0x40)\n      tag_105\n      swap2\n      swap1\n      tag_52\n      jump\t// in\n    tag_105:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7221:7364  function previewMint(uint256 shares) public view virtual returns (uint256) {... */\n    tag_20:\n      tag_106\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_107\n      swap2\n      swap1\n      tag_44\n      jump\t// in\n    tag_107:\n      tag_108\n      jump\t// in\n    tag_106:\n      mload(0x40)\n      tag_109\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_109:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Pool.sol\":1178:1564  function withdraw(uint256 assets, address receiver, address owner) auth public override returns (uint256) {... */\n    tag_21:\n      tag_110\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_111\n      swap2\n      swap1\n      tag_112\n      jump\t// in\n    tag_111:\n      tag_113\n      jump\t// in\n    tag_110:\n      mload(0x40)\n      tag_114\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_114:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9353:9758  function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {... */\n    tag_22:\n      tag_115\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_116\n      swap2\n      swap1\n      tag_112\n      jump\t// in\n    tag_116:\n      tag_117\n      jump\t// in\n    tag_115:\n      mload(0x40)\n      tag_118\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_118:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6503:6608  function maxMint(address) public view virtual returns (uint256) {... */\n    tag_23:\n      tag_119\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_120\n      swap2\n      swap1\n      tag_75\n      jump\t// in\n    tag_120:\n      tag_121\n      jump\t// in\n    tag_119:\n      mload(0x40)\n      tag_122\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_122:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5950:6098  function convertToShares(uint256 assets) public view virtual returns (uint256) {... */\n    tag_24:\n      tag_123\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_124\n      swap2\n      swap1\n      tag_44\n      jump\t// in\n    tag_124:\n      tag_125\n      jump\t// in\n    tag_123:\n      mload(0x40)\n      tag_126\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_126:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6658:6811  function maxWithdraw(address owner) public view virtual returns (uint256) {... */\n    tag_25:\n      tag_127\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_128\n      swap2\n      swap1\n      tag_75\n      jump\t// in\n    tag_128:\n      tag_129\n      jump\t// in\n    tag_127:\n      mload(0x40)\n      tag_130\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_130:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6859:6971  function maxRedeem(address owner) public view virtual returns (uint256) {... */\n    tag_26:\n      tag_131\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_132\n      swap2\n      swap1\n      tag_75\n      jump\t// in\n    tag_132:\n      tag_133\n      jump\t// in\n    tag_131:\n      mload(0x40)\n      tag_134\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_134:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_27:\n      tag_135\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_136\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_136:\n      tag_138\n      jump\t// in\n    tag_135:\n      mload(0x40)\n      tag_139\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_139:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7024:7171  function previewDeposit(uint256 assets) public view virtual returns (uint256) {... */\n    tag_28:\n      tag_140\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_141\n      swap2\n      swap1\n      tag_44\n      jump\t// in\n    tag_141:\n      tag_142\n      jump\t// in\n    tag_140:\n      mload(0x40)\n      tag_143\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_143:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5780:5896  function totalAssets() public view virtual returns (uint256) {... */\n    tag_35:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5832:5839  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5858:5864  _asset */\n      immutable(\"0x912cdad641b4408bd64eb5a331e5fe393f33f2296e0c7fad54e613ac760cfb47\")\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5858:5874  _asset.balanceOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x70a08231\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5883:5887  this */\n      address\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5858:5889  _asset.balanceOf(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_145\n      swap2\n      swap1\n      tag_72\n      jump\t// in\n    tag_145:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_147\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_147:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_148\n      swap2\n      swap1\n      tag_149\n      jump\t// in\n    tag_148:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5851:5889  return _asset.balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5780:5896  function totalAssets() public view virtual returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n    tag_39:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2119:2132  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2151:2156  _name */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2144:2156  return _name */\n      dup1\n      sload\n      tag_151\n      swap1\n      tag_152\n      jump\t// in\n    tag_151:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_153\n      swap1\n      tag_152\n      jump\t// in\n    tag_153:\n      dup1\n      iszero\n      tag_154\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_155\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_154)\n    tag_155:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_156:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_156\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_154:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6152:6300  function convertToAssets(uint256 shares) public view virtual returns (uint256) {... */\n    tag_45:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6222:6229  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6248:6293  _convertToAssets(shares, Math.Rounding.Floor) */\n      tag_158\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6265:6271  shares */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6273:6292  Math.Rounding.Floor */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6248:6264  _convertToAssets */\n      tag_159\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6248:6293  _convertToAssets(shares, Math.Rounding.Floor) */\n      jump\t// in\n    tag_158:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6241:6293  return _convertToAssets(shares, Math.Rounding.Floor) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6152:6300  function convertToAssets(uint256 shares) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_50:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4366:4370  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4382:4395  address owner */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4398:4410  _msgSender() */\n      tag_161\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4398:4408  _msgSender */\n      tag_162\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4398:4410  _msgSender() */\n      jump\t// in\n    tag_161:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4382:4410  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4420:4451  _approve(owner, spender, value) */\n      tag_163\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4429:4434  owner */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4436:4443  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4445:4450  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4420:4428  _approve */\n      tag_164\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4420:4451  _approve(owner, spender, value) */\n      jump\t// in\n    tag_163:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4468:4472  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4461:4472  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7418:7565  function previewWithdraw(uint256 assets) public view virtual returns (uint256) {... */\n    tag_55:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7488:7495  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7514:7558  _convertToShares(assets, Math.Rounding.Ceil) */\n      tag_166\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7531:7537  assets */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7539:7557  Math.Rounding.Ceil */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7514:7530  _convertToShares */\n      tag_167\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7514:7558  _convertToShares(assets, Math.Rounding.Ceil) */\n      jump\t// in\n    tag_166:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7507:7558  return _convertToShares(assets, Math.Rounding.Ceil) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7418:7565  function previewWithdraw(uint256 assets) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n    tag_58:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3196:3203  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3222:3234  _totalSupply */\n      sload(0x02)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3215:3234  return _totalSupply */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_63:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5126:5130  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5142:5157  address spender */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5160:5172  _msgSender() */\n      tag_170\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5160:5170  _msgSender */\n      tag_162\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5160:5172  _msgSender() */\n      jump\t// in\n    tag_170:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5142:5172  address spender = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5182:5219  _spendAllowance(from, spender, value) */\n      tag_171\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5198:5202  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5204:5211  spender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5213:5218  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5182:5197  _spendAllowance */\n      tag_172\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5182:5219  _spendAllowance(from, spender, value) */\n      jump\t// in\n    tag_171:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5229:5255  _transfer(from, to, value) */\n      tag_173\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5239:5243  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5245:5247  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5249:5254  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5229:5238  _transfer */\n      tag_174\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5229:5255  _transfer(from, to, value) */\n      jump\t// in\n    tag_173:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5272:5276  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5265:5276  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5441:5592  function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {... */\n    tag_66:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5522:5527  uint8 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5568:5585  _decimalsOffset() */\n      tag_176\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5568:5583  _decimalsOffset */\n      tag_177\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5568:5585  _decimalsOffset() */\n      jump\t// in\n    tag_176:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5546:5565  _underlyingDecimals */\n      immutable(\"0x03ded74204f6f646223f7cf6a543675febcd907713c268f77886749ddbf07d3e\")\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5546:5585  _underlyingDecimals + _decimalsOffset() */\n      tag_178\n      swap2\n      swap1\n      tag_179\n      jump\t// in\n    tag_178:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5539:5585  return _underlyingDecimals + _decimalsOffset() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5441:5592  function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5636:5730  function asset() public view virtual returns (address) {... */\n    tag_70:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5682:5689  address */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5716:5722  _asset */\n      immutable(\"0x912cdad641b4408bd64eb5a331e5fe393f33f2296e0c7fad54e613ac760cfb47\")\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5701:5723  return address(_asset) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5636:5730  function asset() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6349:6457  function maxDeposit(address) public view virtual returns (uint256) {... */\n    tag_76:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6407:6414  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6433:6450  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6426:6450  return type(uint256).max */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6349:6457  function maxDeposit(address) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7617:7763  function previewRedeem(uint256 shares) public view virtual returns (uint256) {... */\n    tag_80:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7685:7692  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7711:7756  _convertToAssets(shares, Math.Rounding.Floor) */\n      tag_183\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7728:7734  shares */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7736:7755  Math.Rounding.Floor */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7711:7727  _convertToAssets */\n      tag_159\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7711:7756  _convertToAssets(shares, Math.Rounding.Floor) */\n      jump\t// in\n    tag_183:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7704:7756  return _convertToAssets(shares, Math.Rounding.Floor) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7617:7763  function previewRedeem(uint256 shares) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Pool.sol\":635:1131  function deposit(uint256 assets, address receiver) auth public override returns (uint256) {... */\n    tag_85:\n        /* \"contracts/Pool.sol\":716:723  uint256 */\n      0x00\n        /* \"contracts/Pool.sol\":437:447  msg.sender */\n      caller\n        /* \"contracts/Pool.sol\":417:447  address(satoken) == msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Pool.sol\":425:432  satoken */\n      0x05\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Pool.sol\":417:447  address(satoken) == msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/Pool.sol\":409:472  require(address(satoken) == msg.sender, \"Sender is Not Vaults\") */\n      tag_185\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_186\n      swap1\n      tag_187\n      jump\t// in\n    tag_186:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_185:\n        /* \"contracts/Pool.sol\":747:751  true */\n      0x01\n        /* \"contracts/Pool.sol\":735:744  isDeposit */\n      0x05\n      0x14\n        /* \"contracts/Pool.sol\":735:751  isDeposit = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/Pool.sol\":779:780  0 */\n      0x00\n        /* \"contracts/Pool.sol\":770:776  assets */\n      dup4\n        /* \"contracts/Pool.sol\":770:780  assets > 0 */\n      gt\n        /* \"contracts/Pool.sol\":762:814  require(assets > 0, \"Amount must be greater than 0\") */\n      tag_189\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_190\n      swap1\n      tag_191\n      jump\t// in\n    tag_190:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_189:\n        /* \"contracts/Pool.sol\":824:841  uint256 maxAssets */\n      0x00\n        /* \"contracts/Pool.sol\":844:864  maxDeposit(receiver) */\n      tag_192\n        /* \"contracts/Pool.sol\":855:863  receiver */\n      dup4\n        /* \"contracts/Pool.sol\":844:854  maxDeposit */\n      tag_76\n        /* \"contracts/Pool.sol\":844:864  maxDeposit(receiver) */\n      jump\t// in\n    tag_192:\n        /* \"contracts/Pool.sol\":824:864  uint256 maxAssets = maxDeposit(receiver) */\n      swap1\n      pop\n        /* \"contracts/Pool.sol\":887:896  maxAssets */\n      dup1\n        /* \"contracts/Pool.sol\":878:884  assets */\n      dup5\n        /* \"contracts/Pool.sol\":878:896  assets > maxAssets */\n      gt\n        /* \"contracts/Pool.sol\":874:984  if (assets > maxAssets) {... */\n      iszero\n      tag_193\n      jumpi\n        /* \"contracts/Pool.sol\":945:953  receiver */\n      dup3\n        /* \"contracts/Pool.sol\":955:961  assets */\n      dup5\n        /* \"contracts/Pool.sol\":963:972  maxAssets */\n      dup3\n        /* \"contracts/Pool.sol\":919:973  ERC4626ExceededMaxDeposit(receiver, assets, maxAssets) */\n      mload(0x40)\n      0x79012fb200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_194\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_195\n      jump\t// in\n    tag_194:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Pool.sol\":874:984  if (assets > maxAssets) {... */\n    tag_193:\n        /* \"contracts/Pool.sol\":1002:1016  uint256 shares */\n      0x00\n        /* \"contracts/Pool.sol\":1019:1041  previewDeposit(assets) */\n      tag_196\n        /* \"contracts/Pool.sol\":1034:1040  assets */\n      dup6\n        /* \"contracts/Pool.sol\":1019:1033  previewDeposit */\n      tag_142\n        /* \"contracts/Pool.sol\":1019:1041  previewDeposit(assets) */\n      jump\t// in\n    tag_196:\n        /* \"contracts/Pool.sol\":1002:1041  uint256 shares = previewDeposit(assets) */\n      swap1\n      pop\n        /* \"contracts/Pool.sol\":1051:1074  _mint(receiver, shares) */\n      tag_197\n        /* \"contracts/Pool.sol\":1057:1065  receiver */\n      dup5\n        /* \"contracts/Pool.sol\":1067:1073  shares */\n      dup3\n        /* \"contracts/Pool.sol\":1051:1056  _mint */\n      tag_198\n        /* \"contracts/Pool.sol\":1051:1074  _mint(receiver, shares) */\n      jump\t// in\n    tag_197:\n        /* \"contracts/Pool.sol\":1096:1101  false */\n      0x00\n        /* \"contracts/Pool.sol\":1084:1093  isDeposit */\n      0x05\n      0x14\n        /* \"contracts/Pool.sol\":1084:1101  isDeposit = false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/Pool.sol\":1118:1124  shares */\n      dup1\n        /* \"contracts/Pool.sol\":1111:1124  return shares */\n      swap3\n      pop\n      pop\n      pop\n        /* \"contracts/Pool.sol\":635:1131  function deposit(uint256 assets, address receiver) auth public override returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_89:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3364:3371  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3399  _balances */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3408  _balances[account] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3400:3407  account */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3408  _balances[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3383:3408  return _balances[account] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Pool.sol\":285:306  IERC20 public satoken */\n    tag_92:\n      0x05\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/Pool.sol\":1572:1699  function mint(uint256 shares, address receiver) public override returns (uint256) {... */\n    tag_97:\n        /* \"contracts/Pool.sol\":1645:1652  uint256 */\n      0x00\n        /* \"contracts/Pool.sol\":1671:1692  DEPRECATED_FUNCTION() */\n      mload(0x40)\n      0xa9a2322b00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n    tag_100:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2323:2336  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2355:2362  _symbol */\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2348:2362  return _symbol */\n      dup1\n      sload\n      tag_202\n      swap1\n      tag_152\n      jump\t// in\n    tag_202:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_203\n      swap1\n      tag_152\n      jump\t// in\n    tag_203:\n      dup1\n      iszero\n      tag_204\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_205\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_204)\n    tag_205:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_206:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_206\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_204:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_104:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3679:3683  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3695:3708  address owner */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3711:3723  _msgSender() */\n      tag_208\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3711:3721  _msgSender */\n      tag_162\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3711:3723  _msgSender() */\n      jump\t// in\n    tag_208:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3695:3723  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3733:3760  _transfer(owner, to, value) */\n      tag_209\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3743:3748  owner */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3750:3752  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3754:3759  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3733:3742  _transfer */\n      tag_174\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3733:3760  _transfer(owner, to, value) */\n      jump\t// in\n    tag_209:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3777:3781  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3770:3781  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7221:7364  function previewMint(uint256 shares) public view virtual returns (uint256) {... */\n    tag_108:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7287:7294  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7313:7357  _convertToAssets(shares, Math.Rounding.Ceil) */\n      tag_211\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7330:7336  shares */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7338:7356  Math.Rounding.Ceil */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7313:7329  _convertToAssets */\n      tag_159\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7313:7357  _convertToAssets(shares, Math.Rounding.Ceil) */\n      jump\t// in\n    tag_211:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7306:7357  return _convertToAssets(shares, Math.Rounding.Ceil) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7221:7364  function previewMint(uint256 shares) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Pool.sol\":1178:1564  function withdraw(uint256 assets, address receiver, address owner) auth public override returns (uint256) {... */\n    tag_113:\n        /* \"contracts/Pool.sol\":1275:1282  uint256 */\n      0x00\n        /* \"contracts/Pool.sol\":437:447  msg.sender */\n      caller\n        /* \"contracts/Pool.sol\":417:447  address(satoken) == msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Pool.sol\":425:432  satoken */\n      0x05\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Pool.sol\":417:447  address(satoken) == msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/Pool.sol\":409:472  require(address(satoken) == msg.sender, \"Sender is Not Vaults\") */\n      tag_213\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_214\n      swap1\n      tag_187\n      jump\t// in\n    tag_214:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_213:\n        /* \"contracts/Pool.sol\":1294:1311  uint256 maxAssets */\n      0x00\n        /* \"contracts/Pool.sol\":1314:1332  maxWithdraw(owner) */\n      tag_216\n        /* \"contracts/Pool.sol\":1326:1331  owner */\n      dup4\n        /* \"contracts/Pool.sol\":1314:1325  maxWithdraw */\n      tag_129\n        /* \"contracts/Pool.sol\":1314:1332  maxWithdraw(owner) */\n      jump\t// in\n    tag_216:\n        /* \"contracts/Pool.sol\":1294:1332  uint256 maxAssets = maxWithdraw(owner) */\n      swap1\n      pop\n        /* \"contracts/Pool.sol\":1355:1364  maxAssets */\n      dup1\n        /* \"contracts/Pool.sol\":1346:1352  assets */\n      dup6\n        /* \"contracts/Pool.sol\":1346:1364  assets > maxAssets */\n      gt\n        /* \"contracts/Pool.sol\":1342:1450  if (assets > maxAssets) {... */\n      iszero\n      tag_217\n      jumpi\n        /* \"contracts/Pool.sol\":1414:1419  owner */\n      dup3\n        /* \"contracts/Pool.sol\":1421:1427  assets */\n      dup6\n        /* \"contracts/Pool.sol\":1429:1438  maxAssets */\n      dup3\n        /* \"contracts/Pool.sol\":1387:1439  ERC4626ExceededMaxWithdraw(owner, assets, maxAssets) */\n      mload(0x40)\n      0xfe9cceec00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_218\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_195\n      jump\t// in\n    tag_218:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Pool.sol\":1342:1450  if (assets > maxAssets) {... */\n    tag_217:\n        /* \"contracts/Pool.sol\":1460:1474  uint256 shares */\n      0x00\n        /* \"contracts/Pool.sol\":1477:1500  previewWithdraw(assets) */\n      tag_219\n        /* \"contracts/Pool.sol\":1493:1499  assets */\n      dup7\n        /* \"contracts/Pool.sol\":1477:1492  previewWithdraw */\n      tag_55\n        /* \"contracts/Pool.sol\":1477:1500  previewWithdraw(assets) */\n      jump\t// in\n    tag_219:\n        /* \"contracts/Pool.sol\":1460:1500  uint256 shares = previewWithdraw(assets) */\n      swap1\n      pop\n        /* \"contracts/Pool.sol\":1510:1530  _burn(owner, shares) */\n      tag_220\n        /* \"contracts/Pool.sol\":1516:1521  owner */\n      dup5\n        /* \"contracts/Pool.sol\":1523:1529  shares */\n      dup3\n        /* \"contracts/Pool.sol\":1510:1515  _burn */\n      tag_221\n        /* \"contracts/Pool.sol\":1510:1530  _burn(owner, shares) */\n      jump\t// in\n    tag_220:\n        /* \"contracts/Pool.sol\":1548:1557  maxAssets */\n      dup2\n        /* \"contracts/Pool.sol\":1541:1557  return maxAssets */\n      swap3\n      pop\n      pop\n      pop\n        /* \"contracts/Pool.sol\":1178:1564  function withdraw(uint256 assets, address receiver, address owner) auth public override returns (uint256) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9353:9758  function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {... */\n    tag_117:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9442:9449  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9461:9478  uint256 maxShares */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9481:9497  maxRedeem(owner) */\n      tag_223\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9491:9496  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9481:9490  maxRedeem */\n      tag_133\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9481:9497  maxRedeem(owner) */\n      jump\t// in\n    tag_223:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9461:9497  uint256 maxShares = maxRedeem(owner) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9520:9529  maxShares */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9511:9517  shares */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9511:9529  shares > maxShares */\n      gt\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9507:9613  if (shares > maxShares) {... */\n      iszero\n      tag_224\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9577:9582  owner */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9584:9590  shares */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9592:9601  maxShares */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9552:9602  ERC4626ExceededMaxRedeem(owner, shares, maxShares) */\n      mload(0x40)\n      0xb94abeec00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_225\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_195\n      jump\t// in\n    tag_225:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9507:9613  if (shares > maxShares) {... */\n    tag_224:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9623:9637  uint256 assets */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9640:9661  previewRedeem(shares) */\n      tag_226\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9654:9660  shares */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9640:9653  previewRedeem */\n      tag_80\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9640:9661  previewRedeem(shares) */\n      jump\t// in\n    tag_226:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9623:9661  uint256 assets = previewRedeem(shares) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9671:9727  _withdraw(_msgSender(), receiver, owner, assets, shares) */\n      tag_227\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9681:9693  _msgSender() */\n      tag_228\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9681:9691  _msgSender */\n      tag_162\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9681:9693  _msgSender() */\n      jump\t// in\n    tag_228:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9695:9703  receiver */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9705:9710  owner */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9712:9718  assets */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9720:9726  shares */\n      dup11\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9671:9680  _withdraw */\n      tag_229\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9671:9727  _withdraw(_msgSender(), receiver, owner, assets, shares) */\n      jump\t// in\n    tag_227:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9745:9751  assets */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9738:9751  return assets */\n      swap3\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9353:9758  function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6503:6608  function maxMint(address) public view virtual returns (uint256) {... */\n    tag_121:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6558:6565  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6584:6601  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6577:6601  return type(uint256).max */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6503:6608  function maxMint(address) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5950:6098  function convertToShares(uint256 assets) public view virtual returns (uint256) {... */\n    tag_125:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6020:6027  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6046:6091  _convertToShares(assets, Math.Rounding.Floor) */\n      tag_232\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6063:6069  assets */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6071:6090  Math.Rounding.Floor */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6046:6062  _convertToShares */\n      tag_167\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6046:6091  _convertToShares(assets, Math.Rounding.Floor) */\n      jump\t// in\n    tag_232:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6039:6091  return _convertToShares(assets, Math.Rounding.Floor) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5950:6098  function convertToShares(uint256 assets) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6658:6811  function maxWithdraw(address owner) public view virtual returns (uint256) {... */\n    tag_129:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6723:6730  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6749:6804  _convertToAssets(balanceOf(owner), Math.Rounding.Floor) */\n      tag_234\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6766:6782  balanceOf(owner) */\n      tag_235\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6776:6781  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6766:6775  balanceOf */\n      tag_89\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6766:6782  balanceOf(owner) */\n      jump\t// in\n    tag_235:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6784:6803  Math.Rounding.Floor */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6749:6765  _convertToAssets */\n      tag_159\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6749:6804  _convertToAssets(balanceOf(owner), Math.Rounding.Floor) */\n      jump\t// in\n    tag_234:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6742:6804  return _convertToAssets(balanceOf(owner), Math.Rounding.Floor) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6658:6811  function maxWithdraw(address owner) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6859:6971  function maxRedeem(address owner) public view virtual returns (uint256) {... */\n    tag_133:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6922:6929  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6948:6964  balanceOf(owner) */\n      tag_237\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6958:6963  owner */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6948:6957  balanceOf */\n      tag_89\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6948:6964  balanceOf(owner) */\n      jump\t// in\n    tag_237:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6941:6964  return balanceOf(owner) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6859:6971  function maxRedeem(address owner) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_138:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3926:3933  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3963  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3964:3969  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3979  _allowances[owner][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3971:3978  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3979  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3945:3979  return _allowances[owner][spender] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7024:7171  function previewDeposit(uint256 assets) public view virtual returns (uint256) {... */\n    tag_142:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7093:7100  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7119:7164  _convertToShares(assets, Math.Rounding.Floor) */\n      tag_240\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7136:7142  assets */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7144:7163  Math.Rounding.Floor */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7119:7135  _convertToShares */\n      tag_167\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7119:7164  _convertToShares(assets, Math.Rounding.Floor) */\n      jump\t// in\n    tag_240:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7112:7164  return _convertToShares(assets, Math.Rounding.Floor) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7024:7171  function previewDeposit(uint256 assets) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10219:10432  function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {... */\n    tag_159:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10316:10323  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10342:10425  shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding) */\n      tag_242\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10372:10373  1 */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10356:10369  totalAssets() */\n      tag_243\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10356:10367  totalAssets */\n      tag_35\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10356:10369  totalAssets() */\n      jump\t// in\n    tag_243:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10356:10373  totalAssets() + 1 */\n      tag_244\n      swap2\n      swap1\n      tag_245\n      jump\t// in\n    tag_244:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10397:10414  _decimalsOffset() */\n      tag_246\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10397:10412  _decimalsOffset */\n      tag_177\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10397:10414  _decimalsOffset() */\n      jump\t// in\n    tag_246:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10391:10393  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10391:10414  10 ** _decimalsOffset() */\n      tag_247\n      swap2\n      swap1\n      tag_248\n      jump\t// in\n    tag_247:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10375:10388  totalSupply() */\n      tag_249\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10375:10386  totalSupply */\n      tag_58\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10375:10388  totalSupply() */\n      jump\t// in\n    tag_249:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10375:10414  totalSupply() + 10 ** _decimalsOffset() */\n      tag_250\n      swap2\n      swap1\n      tag_245\n      jump\t// in\n    tag_250:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10416:10424  rounding */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10342:10348  shares */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10342:10355  shares.mulDiv */\n      tag_251\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10342:10425  shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding) */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_242:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10335:10425  return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10219:10432  function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":656:752  function _msgSender() internal view virtual returns (address) {... */\n    tag_162:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":709:716  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":728:745  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":656:752  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8989:9117  function _approve(address owner, address spender, uint256 value) internal {... */\n    tag_164:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9073:9110  _approve(owner, spender, value, true) */\n      tag_254\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9082:9087  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9089:9096  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9098:9103  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9105:9109  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9073:9081  _approve */\n      tag_255\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9073:9110  _approve(owner, spender, value, true) */\n      jump\t// in\n    tag_254:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8989:9117  function _approve(address owner, address spender, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Pool.sol\":1823:2221  function _convertToShares(uint256 assets, Math.Rounding rounding) internal view override returns (uint256) {... */\n    tag_167:\n        /* \"contracts/Pool.sol\":1921:1928  uint256 */\n      0x00\n        /* \"contracts/Pool.sol\":1944:1953  isDeposit */\n      0x05\n      0x14\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/Pool.sol\":1940:2212  if (isDeposit) {... */\n      iszero\n      tag_257\n      jumpi\n        /* \"contracts/Pool.sol\":1976:2074  Math.mulDiv(assets, totalSupply() + 10 ** _decimalsOffset(), totalAssets() - assets + 1, rounding) */\n      tag_258\n        /* \"contracts/Pool.sol\":1988:1994  assets */\n      dup4\n        /* \"contracts/Pool.sol\":2018:2035  _decimalsOffset() */\n      tag_259\n        /* \"contracts/Pool.sol\":2018:2033  _decimalsOffset */\n      tag_177\n        /* \"contracts/Pool.sol\":2018:2035  _decimalsOffset() */\n      jump\t// in\n    tag_259:\n        /* \"contracts/Pool.sol\":2012:2014  10 */\n      0x0a\n        /* \"contracts/Pool.sol\":2012:2035  10 ** _decimalsOffset() */\n      tag_260\n      swap2\n      swap1\n      tag_248\n      jump\t// in\n    tag_260:\n        /* \"contracts/Pool.sol\":1996:2009  totalSupply() */\n      tag_261\n        /* \"contracts/Pool.sol\":1996:2007  totalSupply */\n      tag_58\n        /* \"contracts/Pool.sol\":1996:2009  totalSupply() */\n      jump\t// in\n    tag_261:\n        /* \"contracts/Pool.sol\":1996:2035  totalSupply() + 10 ** _decimalsOffset() */\n      tag_262\n      swap2\n      swap1\n      tag_245\n      jump\t// in\n    tag_262:\n        /* \"contracts/Pool.sol\":2062:2063  1 */\n      0x01\n        /* \"contracts/Pool.sol\":2053:2059  assets */\n      dup7\n        /* \"contracts/Pool.sol\":2037:2050  totalAssets() */\n      tag_263\n        /* \"contracts/Pool.sol\":2037:2048  totalAssets */\n      tag_35\n        /* \"contracts/Pool.sol\":2037:2050  totalAssets() */\n      jump\t// in\n    tag_263:\n        /* \"contracts/Pool.sol\":2037:2059  totalAssets() - assets */\n      tag_264\n      swap2\n      swap1\n      tag_265\n      jump\t// in\n    tag_264:\n        /* \"contracts/Pool.sol\":2037:2063  totalAssets() - assets + 1 */\n      tag_266\n      swap2\n      swap1\n      tag_245\n      jump\t// in\n    tag_266:\n        /* \"contracts/Pool.sol\":2065:2073  rounding */\n      dup6\n        /* \"contracts/Pool.sol\":1976:1987  Math.mulDiv */\n      tag_251\n        /* \"contracts/Pool.sol\":1976:2074  Math.mulDiv(assets, totalSupply() + 10 ** _decimalsOffset(), totalAssets() - assets + 1, rounding) */\n      jump\t// in\n    tag_258:\n        /* \"contracts/Pool.sol\":1969:2074  return Math.mulDiv(assets, totalSupply() + 10 ** _decimalsOffset(), totalAssets() - assets + 1, rounding) */\n      swap1\n      pop\n      jump(tag_256)\n        /* \"contracts/Pool.sol\":1940:2212  if (isDeposit) {... */\n    tag_257:\n        /* \"contracts/Pool.sol\":2112:2201  Math.mulDiv(assets, totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding) */\n      tag_268\n        /* \"contracts/Pool.sol\":2124:2130  assets */\n      dup4\n        /* \"contracts/Pool.sol\":2154:2171  _decimalsOffset() */\n      tag_269\n        /* \"contracts/Pool.sol\":2154:2169  _decimalsOffset */\n      tag_177\n        /* \"contracts/Pool.sol\":2154:2171  _decimalsOffset() */\n      jump\t// in\n    tag_269:\n        /* \"contracts/Pool.sol\":2148:2150  10 */\n      0x0a\n        /* \"contracts/Pool.sol\":2148:2171  10 ** _decimalsOffset() */\n      tag_270\n      swap2\n      swap1\n      tag_248\n      jump\t// in\n    tag_270:\n        /* \"contracts/Pool.sol\":2132:2145  totalSupply() */\n      tag_271\n        /* \"contracts/Pool.sol\":2132:2143  totalSupply */\n      tag_58\n        /* \"contracts/Pool.sol\":2132:2145  totalSupply() */\n      jump\t// in\n    tag_271:\n        /* \"contracts/Pool.sol\":2132:2171  totalSupply() + 10 ** _decimalsOffset() */\n      tag_272\n      swap2\n      swap1\n      tag_245\n      jump\t// in\n    tag_272:\n        /* \"contracts/Pool.sol\":2189:2190  1 */\n      0x01\n        /* \"contracts/Pool.sol\":2173:2186  totalAssets() */\n      tag_273\n        /* \"contracts/Pool.sol\":2173:2184  totalAssets */\n      tag_35\n        /* \"contracts/Pool.sol\":2173:2186  totalAssets() */\n      jump\t// in\n    tag_273:\n        /* \"contracts/Pool.sol\":2173:2190  totalAssets() + 1 */\n      tag_274\n      swap2\n      swap1\n      tag_245\n      jump\t// in\n    tag_274:\n        /* \"contracts/Pool.sol\":2192:2200  rounding */\n      dup6\n        /* \"contracts/Pool.sol\":2112:2123  Math.mulDiv */\n      tag_251\n        /* \"contracts/Pool.sol\":2112:2201  Math.mulDiv(assets, totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding) */\n      jump\t// in\n    tag_268:\n        /* \"contracts/Pool.sol\":2105:2201  return Math.mulDiv(assets, totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding) */\n      swap1\n      pop\n        /* \"contracts/Pool.sol\":1823:2221  function _convertToShares(uint256 assets, Math.Rounding rounding) internal view override returns (uint256) {... */\n    tag_256:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10663:11140  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n    tag_172:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10762:10786  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10789:10814  allowance(owner, spender) */\n      tag_276\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10799:10804  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10806:10813  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10789:10798  allowance */\n      tag_138\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10789:10814  allowance(owner, spender) */\n      jump\t// in\n    tag_276:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10762:10814  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10848:10865  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10828:10844  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10828:10865  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10824:11134  if (currentAllowance != type(uint256).max) {... */\n      tag_277\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10904:10909  value */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10885:10901  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10885:10909  currentAllowance < value */\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10881:11011  if (currentAllowance < value) {... */\n      iszero\n      tag_278\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10963:10970  spender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10972:10988  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10990:10995  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10936:10996  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      mload(0x40)\n      0xfb8f41b200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_279\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_195\n      jump\t// in\n    tag_279:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10881:11011  if (currentAllowance < value) {... */\n    tag_278:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11052:11109  _approve(owner, spender, currentAllowance - value, false) */\n      tag_280\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11061:11066  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11068:11075  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11096:11101  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11077:11093  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11077:11101  currentAllowance - value */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11103:11108  false */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11052:11060  _approve */\n      tag_255\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11052:11109  _approve(owner, spender, currentAllowance - value, false) */\n      jump\t// in\n    tag_280:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10824:11134  if (currentAllowance != type(uint256).max) {... */\n    tag_277:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10752:11140  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10663:11140  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5656:5956  function _transfer(address from, address to, uint256 value) internal {... */\n    tag_174:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5755:5756  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5739:5757  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5739:5743  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5739:5757  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5735:5821  if (from == address(0)) {... */\n      tag_282\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5807:5808  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5780:5810  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      0x96c6fd1e00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_283\n      swap2\n      swap1\n      tag_72\n      jump\t// in\n    tag_283:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5735:5821  if (from == address(0)) {... */\n    tag_282:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5848:5849  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5834:5850  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5834:5836  to */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5834:5850  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5830:5916  if (to == address(0)) {... */\n      tag_284\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5902:5903  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:5905  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      0xec442f0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_285\n      swap2\n      swap1\n      tag_72\n      jump\t// in\n    tag_285:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5830:5916  if (to == address(0)) {... */\n    tag_284:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5925:5949  _update(from, to, value) */\n      tag_286\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5933:5937  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5939:5941  to */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5943:5948  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5925:5932  _update */\n      tag_287\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5925:5949  _update(from, to, value) */\n      jump\t// in\n    tag_286:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5656:5956  function _transfer(address from, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12313:12403  function _decimalsOffset() internal view virtual returns (uint8) {... */\n    tag_177:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12371:12376  uint8 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12313:12403  function _decimalsOffset() internal view virtual returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7721:7929  function _mint(address account, uint256 value) internal {... */\n    tag_198:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7810:7811  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7791:7812  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7791:7798  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7791:7812  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7787:7878  if (account == address(0)) {... */\n      tag_290\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7864:7865  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7835:7867  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      0xec442f0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_291\n      swap2\n      swap1\n      tag_72\n      jump\t// in\n    tag_291:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7787:7878  if (account == address(0)) {... */\n    tag_290:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7922  _update(address(0), account, value) */\n      tag_292\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7903:7904  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7907:7914  account */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7916:7921  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7894  _update */\n      tag_287\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7922  _update(address(0), account, value) */\n      jump\t// in\n    tag_292:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7721:7929  function _mint(address account, uint256 value) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8247:8453  function _burn(address account, uint256 value) internal {... */\n    tag_221:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8336:8337  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8317:8338  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8317:8324  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8317:8338  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8313:8402  if (account == address(0)) {... */\n      tag_294\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8388:8389  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8361:8391  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      0x96c6fd1e00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_295\n      swap2\n      swap1\n      tag_72\n      jump\t// in\n    tag_295:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8313:8402  if (account == address(0)) {... */\n    tag_294:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8411:8446  _update(account, address(0), value) */\n      tag_296\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8419:8426  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8436:8437  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8440:8445  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8411:8418  _update */\n      tag_287\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8411:8446  _update(account, address(0), value) */\n      jump\t// in\n    tag_296:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8247:8453  function _burn(address account, uint256 value) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11393:12307  function _withdraw(... */\n    tag_229:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11580:11585  owner */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11570:11585  caller != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11570:11576  caller */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11570:11585  caller != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11566:11650  if (caller != owner) {... */\n      tag_298\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11601:11639  _spendAllowance(owner, caller, shares) */\n      tag_299\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11617:11622  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11624:11630  caller */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11632:11638  shares */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11601:11616  _spendAllowance */\n      tag_172\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11601:11639  _spendAllowance(owner, caller, shares) */\n      jump\t// in\n    tag_299:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11566:11650  if (caller != owner) {... */\n    tag_298:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12157:12177  _burn(owner, shares) */\n      tag_300\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12163:12168  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12170:12176  shares */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12157:12162  _burn */\n      tag_221\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12157:12177  _burn(owner, shares) */\n      jump\t// in\n    tag_300:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12187:12235  SafeERC20.safeTransfer(_asset, receiver, assets) */\n      tag_301\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12210:12216  _asset */\n      immutable(\"0x912cdad641b4408bd64eb5a331e5fe393f33f2296e0c7fad54e613ac760cfb47\")\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12218:12226  receiver */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12228:12234  assets */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12187:12209  SafeERC20.safeTransfer */\n      tag_302\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12187:12235  SafeERC20.safeTransfer(_asset, receiver, assets) */\n      jump\t// in\n    tag_301:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12278:12283  owner */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12251:12300  Withdraw(caller, receiver, owner, assets, shares) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12268:12276  receiver */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12251:12300  Withdraw(caller, receiver, owner, assets, shares) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12260:12266  caller */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12251:12300  Withdraw(caller, receiver, owner, assets, shares) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xfbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12285:12291  assets */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12293:12299  shares */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12251:12300  Withdraw(caller, receiver, owner, assets, shares) */\n      mload(0x40)\n      tag_303\n      swap3\n      swap2\n      swap1\n      tag_304\n      jump\t// in\n    tag_303:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11393:12307  function _withdraw(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8051:8353  function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {... */\n    tag_251:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8152:8159  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8171:8185  uint256 result */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8188:8213  mulDiv(x, y, denominator) */\n      tag_306\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8195:8196  x */\n      dup7\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8198:8199  y */\n      dup7\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8201:8212  denominator */\n      dup7\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8188:8194  mulDiv */\n      tag_307\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8188:8213  mulDiv(x, y, denominator) */\n      jump\t// in\n    tag_306:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8171:8213  uint256 result = mulDiv(x, y, denominator) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8227:8253  unsignedRoundsUp(rounding) */\n      tag_308\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8244:8252  rounding */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8227:8243  unsignedRoundsUp */\n      tag_309\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8227:8253  unsignedRoundsUp(rounding) */\n      jump\t// in\n    tag_308:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8227:8286  unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0 */\n      dup1\n      iszero\n      tag_310\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8285:8286  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8270:8281  denominator */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8257:8282  mulmod(x, y, denominator) */\n      dup1\n      tag_311\n      jumpi\n      tag_312\n      tag_313\n      jump\t// in\n    tag_312:\n    tag_311:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8267:8268  y */\n      dup7\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8264:8265  x */\n      dup9\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8257:8282  mulmod(x, y, denominator) */\n      mulmod\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8257:8286  mulmod(x, y, denominator) > 0 */\n      gt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8227:8286  unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0 */\n    tag_310:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8223:8324  if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {... */\n      iszero\n      tag_314\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8312:8313  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8302:8313  result += 1 */\n      dup2\n      tag_315\n      swap2\n      swap1\n      tag_245\n      jump\t// in\n    tag_315:\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8223:8324  if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {... */\n    tag_314:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8340:8346  result */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8333:8346  return result */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8051:8353  function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9949:10381  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n    tag_255:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10078:10079  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10061:10080  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10061:10066  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10061:10080  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10057:10146  if (owner == address(0)) {... */\n      tag_317\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10132:10133  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10103:10135  ERC20InvalidApprover(address(0)) */\n      mload(0x40)\n      0xe602df0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_318\n      swap2\n      swap1\n      tag_72\n      jump\t// in\n    tag_318:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10057:10146  if (owner == address(0)) {... */\n    tag_317:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10178:10179  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10159:10180  spender == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10159:10166  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10159:10180  spender == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10155:10245  if (spender == address(0)) {... */\n      tag_319\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10231:10232  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10203:10234  ERC20InvalidSpender(address(0)) */\n      mload(0x40)\n      0x94280d6200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_320\n      swap2\n      swap1\n      tag_72\n      jump\t// in\n    tag_320:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10155:10245  if (spender == address(0)) {... */\n    tag_319:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10284:10289  value */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10265  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10272  _allowances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10266:10271  owner */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10272  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10281  _allowances[owner][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10273:10280  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10281  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10289  _allowances[owner][spender] = value */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10303:10312  emitEvent */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10299:10375  if (emitEvent) {... */\n      iszero\n      tag_321\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10349:10356  spender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10342:10347  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10358:10363  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      mload(0x40)\n      tag_322\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_322:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10299:10375  if (emitEvent) {... */\n    tag_321:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9949:10381  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6271:7378  function _update(address from, address to, uint256 value) internal virtual {... */\n    tag_287:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6376:6377  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6360:6378  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6360:6364  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6360:6378  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      tag_324\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6512:6517  value */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6496:6508  _totalSupply */\n      0x02\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6496:6517  _totalSupply += value */\n      dup3\n      dup3\n      sload\n      tag_325\n      swap2\n      swap1\n      tag_245\n      jump\t// in\n    tag_325:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      jump(tag_326)\n    tag_324:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6548:6567  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6579  _balances */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6580:6584  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6548:6585  uint256 fromBalance = _balances[from] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6617:6622  value */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6603:6614  fromBalance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6603:6622  fromBalance < value */\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n      iszero\n      tag_327\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6674:6678  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6680:6691  fromBalance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6693:6698  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n      mload(0x40)\n      0xe450d38c00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_328\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_195\n      jump\t// in\n    tag_328:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n    tag_327:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6866:6871  value */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6852:6863  fromBalance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6852:6871  fromBalance - value */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6843  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6849  _balances[from] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6844:6848  from */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6849  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6871  _balances[from] = fromBalance - value */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6534:6896  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n    tag_326:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6924:6925  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6910:6926  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6910:6912  to */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6910:6926  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n      tag_329\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7089:7094  value */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7073:7085  _totalSupply */\n      0x02\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7073:7094  _totalSupply -= value */\n      dup3\n      dup3\n      sload\n      sub\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n      jump(tag_330)\n    tag_329:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7301:7306  value */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7293  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7297  _balances[to] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7294:7296  to */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7297  _balances[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7306  _balances[to] += value */\n      dup3\n      dup3\n      sload\n      add\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n    tag_330:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7361:7363  to */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7355:7359  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7365:7370  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      mload(0x40)\n      tag_331\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_331:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6271:7378  function _update(address from, address to, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1303:1463  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n    tag_302:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1385:1456  _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value))) */\n      tag_333\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1405:1410  token */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1427:1432  token */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1427:1441  token.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xa9059cbb\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1444:1446  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1448:1453  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1412:1455  abi.encodeCall(token.transfer, (to, value)) */\n      add(0x24, mload(0x40))\n      tag_334\n      swap3\n      swap2\n      swap1\n      tag_335\n      jump\t// in\n    tag_334:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap2\n      pop\n      0xe0\n      shl\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1385:1404  _callOptionalReturn */\n      tag_336\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1385:1456  _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value))) */\n      jump\t// in\n    tag_333:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1303:1463  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3803:7919  function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {... */\n    tag_307:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3885:3899  uint256 result */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4232:4245  uint256 prod0 */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4252:4253  y */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4248:4249  x */\n      dup6\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4248:4253  x * y */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4232:4253  uint256 prod0 = x * y */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4312:4325  uint256 prod1 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4437:4438  0 */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4433:4439  not(0) */\n      not\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4430:4431  y */\n      dup6\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4427:4428  x */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4420:4440  mulmod(x, y, not(0)) */\n      mulmod\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4493:4498  prod0 */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4489:4491  mm */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4486:4499  lt(mm, prod0) */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4478:4483  prod0 */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4474:4476  mm */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4470:4484  sub(mm, prod0) */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4466:4500  sub(sub(mm, prod0), lt(mm, prod0)) */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4457:4500  prod1 := sub(sub(mm, prod0), lt(mm, prod0)) */\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4392:4514  {... */\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4604:4605  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4595:4600  prod1 */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4595:4605  prod1 == 0 */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4591:4959  if (prod1 == 0) {... */\n      tag_338\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4933:4944  denominator */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4925:4930  prod0 */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4925:4944  prod0 / denominator */\n      dup2\n      tag_339\n      jumpi\n      tag_340\n      tag_313\n      jump\t// in\n    tag_340:\n    tag_339:\n      div\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4918:4944  return prod0 / denominator */\n      swap3\n      pop\n      pop\n      pop\n      jump(tag_337)\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4591:4959  if (prod1 == 0) {... */\n    tag_338:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5080:5085  prod1 */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5065:5076  denominator */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5065:5085  denominator <= prod1 */\n      gt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5061:5149  if (denominator <= prod1) {... */\n      tag_341\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5112:5134  MathOverflowedMulDiv() */\n      mload(0x40)\n      0x227bc15300000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5061:5149  if (denominator <= prod1) {... */\n    tag_341:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5404:5421  uint256 remainder */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5539:5550  denominator */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5536:5537  y */\n      dup7\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5533:5534  x */\n      dup9\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5526:5551  mulmod(x, y, denominator) */\n      mulmod\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5513:5551  remainder := mulmod(x, y, denominator) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5667:5672  prod0 */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5656:5665  remainder */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5653:5673  gt(remainder, prod0) */\n      gt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5646:5651  prod1 */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5642:5674  sub(prod1, gt(remainder, prod0)) */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5633:5674  prod1 := sub(prod1, gt(remainder, prod0)) */\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5711:5720  remainder */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5704:5709  prod0 */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5700:5721  sub(prod0, remainder) */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5691:5721  prod0 := sub(prod0, remainder) */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5939:5951  uint256 twos */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5973:5984  denominator */\n      dup6\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5969:5970  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5969:5984  0 - denominator */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5954:5965  denominator */\n      dup7\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5954:5985  denominator & (0 - denominator) */\n      and\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5939:5985  uint256 twos = denominator & (0 - denominator) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6105:6109  twos */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6092:6103  denominator */\n      dup7\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6088:6110  div(denominator, twos) */\n      div\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6073:6110  denominator := div(denominator, twos) */\n      swap6\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6197:6201  twos */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6190:6195  prod0 */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6186:6202  div(prod0, twos) */\n      div\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6177:6202  prod0 := div(prod0, twos) */\n      swap4\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6354:6355  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6347:6351  twos */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6340:6344  twos */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6337:6338  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6333:6345  sub(0, twos) */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6329:6352  div(sub(0, twos), twos) */\n      div\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6325:6356  add(div(sub(0, twos), twos), 1) */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6317:6356  twos := add(div(sub(0, twos), twos), 1) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6453:6457  twos */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6445:6450  prod1 */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6445:6457  prod1 * twos */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6436:6457  prod0 |= prod1 * twos */\n      dup5\n      or\n      swap4\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6775:6790  uint256 inverse */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6813:6814  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6798:6809  denominator */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6794:6795  3 */\n      0x03\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6794:6809  3 * denominator */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6793:6814  (3 * denominator) ^ 2 */\n      xor\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6775:6814  uint256 inverse = (3 * denominator) ^ 2 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7060:7067  inverse */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7046:7057  denominator */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7046:7067  denominator * inverse */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7042:7043  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7042:7067  2 - denominator * inverse */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7031:7067  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7129:7136  inverse */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7115:7126  denominator */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7115:7136  denominator * inverse */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7111:7112  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7111:7136  2 - denominator * inverse */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7100:7136  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7199:7206  inverse */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7185:7196  denominator */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7185:7206  denominator * inverse */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7181:7182  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7181:7206  2 - denominator * inverse */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7170:7206  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7269:7276  inverse */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7255:7266  denominator */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7255:7276  denominator * inverse */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7251:7252  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7251:7276  2 - denominator * inverse */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7240:7276  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7339:7346  inverse */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7325:7336  denominator */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7325:7346  denominator * inverse */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7321:7322  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7321:7346  2 - denominator * inverse */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7310:7346  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7410:7417  inverse */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7396:7407  denominator */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7396:7417  denominator * inverse */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7392:7393  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7392:7417  2 - denominator * inverse */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7381:7417  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7868:7875  inverse */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7860:7865  prod0 */\n      dup6\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7860:7875  prod0 * inverse */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7851:7875  result = prod0 * inverse */\n      swap6\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7889:7902  return result */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3803:7919  function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {... */\n    tag_337:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":14993:15115  function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {... */\n    tag_309:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":15061:15065  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":15107:15108  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":15102:15103  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":15090:15098  rounding */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":15084:15099  uint8(rounding) */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_343\n      jumpi\n      tag_344\n      tag_345\n      jump\t// in\n    tag_344:\n    tag_343:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":15084:15103  uint8(rounding) % 2 */\n      tag_346\n      swap2\n      swap1\n      tag_347\n      jump\t// in\n    tag_346:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":15084:15108  uint8(rounding) % 2 == 1 */\n      0xff\n      and\n      eq\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":15077:15108  return uint8(rounding) % 2 == 1 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":14993:15115  function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4059:4688  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_336:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4478:4501  bytes memory returndata */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4504:4537  address(token).functionCall(data) */\n      tag_349\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4532:4536  data */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4512:4517  token */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4504:4531  address(token).functionCall */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_350\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4504:4537  address(token).functionCall(data) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_349:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4478:4537  bytes memory returndata = address(token).functionCall(data) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4572:4573  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4561  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4568  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4573  returndata.length != 0 */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4608  returndata.length != 0 && !abi.decode(returndata, (bool)) */\n      dup1\n      iszero\n      tag_351\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4589:4599  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4578:4608  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_352\n      swap2\n      swap1\n      tag_353\n      jump\t// in\n    tag_352:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4577:4608  !abi.decode(returndata, (bool)) */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4608  returndata.length != 0 && !abi.decode(returndata, (bool)) */\n    tag_351:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4547:4682  if (returndata.length != 0 && !abi.decode(returndata, (bool))) {... */\n      iszero\n      tag_354\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4664:4669  token */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4631:4671  SafeERC20FailedOperation(address(token)) */\n      mload(0x40)\n      0x5274afe700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_355\n      swap2\n      swap1\n      tag_72\n      jump\t// in\n    tag_355:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4547:4682  if (returndata.length != 0 && !abi.decode(returndata, (bool))) {... */\n    tag_354:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4129:4688  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4059:4688  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2705:2856  function functionCall(address target, bytes memory data) internal returns (bytes memory) {... */\n    tag_350:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2780:2792  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2811:2849  functionCallWithValue(target, data, 0) */\n      tag_357\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2833:2839  target */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2841:2845  data */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2847:2848  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2811:2832  functionCallWithValue */\n      tag_358\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2811:2849  functionCallWithValue(target, data, 0) */\n      jump\t// in\n    tag_357:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2804:2849  return functionCallWithValue(target, data, 0) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2705:2856  function functionCall(address target, bytes memory data) internal returns (bytes memory) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3180:3572  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {... */\n    tag_358:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3279:3291  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3331:3336  value */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3307:3328  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3307:3336  address(this).balance < value */\n      lt\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3303:3411  if (address(this).balance < value) {... */\n      iszero\n      tag_360\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3394:3398  this */\n      address\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3359:3400  AddressInsufficientBalance(address(this)) */\n      mload(0x40)\n      0xcd78605900000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_361\n      swap2\n      swap1\n      tag_72\n      jump\t// in\n    tag_361:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3303:3411  if (address(this).balance < value) {... */\n    tag_360:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3421:3433  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3435:3458  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3462:3468  target */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3462:3473  target.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3481:3486  value */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3488:3492  data */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3462:3493  target.call{value: value}(data) */\n      mload(0x40)\n      tag_362\n      swap2\n      swap1\n      tag_363\n      jump\t// in\n    tag_362:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_366\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_365)\n    tag_366:\n      0x60\n      swap2\n      pop\n    tag_365:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3420:3493  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3510:3565  verifyCallResultFromTarget(target, success, returndata) */\n      tag_367\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3537:3543  target */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3545:3552  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3554:3564  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3510:3536  verifyCallResultFromTarget */\n      tag_368\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3510:3565  verifyCallResultFromTarget(target, success, returndata) */\n      jump\t// in\n    tag_367:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3503:3565  return verifyCallResultFromTarget(target, success, returndata) */\n      swap3\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3180:3572  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4625:5207  function verifyCallResultFromTarget(... */\n    tag_368:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4769:4781  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4798:4805  success */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4793:5201  if (!success) {... */\n      tag_370\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4821:4840  _revert(returndata) */\n      tag_371\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4829:4839  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4821:4828  _revert */\n      tag_372\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4821:4840  _revert(returndata) */\n      jump\t// in\n    tag_371:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4793:5201  if (!success) {... */\n      jump(tag_373)\n    tag_370:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5066:5067  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5055  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5062  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5067  returndata.length == 0 */\n      eq\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5094  returndata.length == 0 && target.code.length == 0 */\n      dup1\n      iszero\n      tag_374\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5093:5094  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5071:5077  target */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5071:5089  target.code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5071:5094  target.code.length == 0 */\n      eq\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5094  returndata.length == 0 && target.code.length == 0 */\n    tag_374:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5041:5160  if (returndata.length == 0 && target.code.length == 0) {... */\n      iszero\n      tag_375\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5138:5144  target */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5121:5145  AddressEmptyCode(target) */\n      mload(0x40)\n      0x9996b31500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_376\n      swap2\n      swap1\n      tag_72\n      jump\t// in\n    tag_376:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5041:5160  if (returndata.length == 0 && target.code.length == 0) {... */\n    tag_375:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5180:5190  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5173:5190  return returndata */\n      swap1\n      pop\n      jump(tag_369)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4793:5201  if (!success) {... */\n    tag_373:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4625:5207  function verifyCallResultFromTarget(... */\n    tag_369:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5743:6259  function _revert(bytes memory returndata) private pure {... */\n    tag_372:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5894:5895  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5874:5884  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5874:5891  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5874:5895  returndata.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5870:6253  if (returndata.length > 0) {... */\n      iszero\n      tag_378\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6102:6112  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6096:6113  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6158:6173  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6145:6155  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6141:6143  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6137:6156  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6130:6174  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5870:6253  if (returndata.length > 0) {... */\n    tag_378:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6225:6242  FailedInnerCall() */\n      mload(0x40)\n      0x1425ea4200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"#utility.yul\":7:84   */\n    tag_380:\n        /* \"#utility.yul\":44:51   */\n      0x00\n        /* \"#utility.yul\":73:78   */\n      dup2\n        /* \"#utility.yul\":62:78   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:84   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":90:208   */\n    tag_381:\n        /* \"#utility.yul\":177:201   */\n      tag_424\n        /* \"#utility.yul\":195:200   */\n      dup2\n        /* \"#utility.yul\":177:201   */\n      tag_380\n      jump\t// in\n    tag_424:\n        /* \"#utility.yul\":172:175   */\n      dup3\n        /* \"#utility.yul\":165:202   */\n      mstore\n        /* \"#utility.yul\":90:208   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":214:436   */\n    tag_37:\n        /* \"#utility.yul\":307:311   */\n      0x00\n        /* \"#utility.yul\":345:347   */\n      0x20\n        /* \"#utility.yul\":334:343   */\n      dup3\n        /* \"#utility.yul\":330:348   */\n      add\n        /* \"#utility.yul\":322:348   */\n      swap1\n      pop\n        /* \"#utility.yul\":358:429   */\n      tag_426\n        /* \"#utility.yul\":426:427   */\n      0x00\n        /* \"#utility.yul\":415:424   */\n      dup4\n        /* \"#utility.yul\":411:428   */\n      add\n        /* \"#utility.yul\":402:408   */\n      dup5\n        /* \"#utility.yul\":358:429   */\n      tag_381\n      jump\t// in\n    tag_426:\n        /* \"#utility.yul\":214:436   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":442:541   */\n    tag_382:\n        /* \"#utility.yul\":494:500   */\n      0x00\n        /* \"#utility.yul\":528:533   */\n      dup2\n        /* \"#utility.yul\":522:534   */\n      mload\n        /* \"#utility.yul\":512:534   */\n      swap1\n      pop\n        /* \"#utility.yul\":442:541   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":547:716   */\n    tag_383:\n        /* \"#utility.yul\":631:642   */\n      0x00\n        /* \"#utility.yul\":665:671   */\n      dup3\n        /* \"#utility.yul\":660:663   */\n      dup3\n        /* \"#utility.yul\":653:672   */\n      mstore\n        /* \"#utility.yul\":705:709   */\n      0x20\n        /* \"#utility.yul\":700:703   */\n      dup3\n        /* \"#utility.yul\":696:710   */\n      add\n        /* \"#utility.yul\":681:710   */\n      swap1\n      pop\n        /* \"#utility.yul\":547:716   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":722:861   */\n    tag_384:\n        /* \"#utility.yul\":811:817   */\n      dup3\n        /* \"#utility.yul\":806:809   */\n      dup2\n        /* \"#utility.yul\":801:804   */\n      dup4\n        /* \"#utility.yul\":795:818   */\n      mcopy\n        /* \"#utility.yul\":852:853   */\n      0x00\n        /* \"#utility.yul\":843:849   */\n      dup4\n        /* \"#utility.yul\":838:841   */\n      dup4\n        /* \"#utility.yul\":834:850   */\n      add\n        /* \"#utility.yul\":827:854   */\n      mstore\n        /* \"#utility.yul\":722:861   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":867:969   */\n    tag_385:\n        /* \"#utility.yul\":908:914   */\n      0x00\n        /* \"#utility.yul\":959:961   */\n      0x1f\n        /* \"#utility.yul\":955:962   */\n      not\n        /* \"#utility.yul\":950:952   */\n      0x1f\n        /* \"#utility.yul\":943:948   */\n      dup4\n        /* \"#utility.yul\":939:953   */\n      add\n        /* \"#utility.yul\":935:963   */\n      and\n        /* \"#utility.yul\":925:963   */\n      swap1\n      pop\n        /* \"#utility.yul\":867:969   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":975:1352   */\n    tag_386:\n        /* \"#utility.yul\":1063:1066   */\n      0x00\n        /* \"#utility.yul\":1091:1130   */\n      tag_432\n        /* \"#utility.yul\":1124:1129   */\n      dup3\n        /* \"#utility.yul\":1091:1130   */\n      tag_382\n      jump\t// in\n    tag_432:\n        /* \"#utility.yul\":1146:1217   */\n      tag_433\n        /* \"#utility.yul\":1210:1216   */\n      dup2\n        /* \"#utility.yul\":1205:1208   */\n      dup6\n        /* \"#utility.yul\":1146:1217   */\n      tag_383\n      jump\t// in\n    tag_433:\n        /* \"#utility.yul\":1139:1217   */\n      swap4\n      pop\n        /* \"#utility.yul\":1226:1291   */\n      tag_434\n        /* \"#utility.yul\":1284:1290   */\n      dup2\n        /* \"#utility.yul\":1279:1282   */\n      dup6\n        /* \"#utility.yul\":1272:1276   */\n      0x20\n        /* \"#utility.yul\":1265:1270   */\n      dup7\n        /* \"#utility.yul\":1261:1277   */\n      add\n        /* \"#utility.yul\":1226:1291   */\n      tag_384\n      jump\t// in\n    tag_434:\n        /* \"#utility.yul\":1316:1345   */\n      tag_435\n        /* \"#utility.yul\":1338:1344   */\n      dup2\n        /* \"#utility.yul\":1316:1345   */\n      tag_385\n      jump\t// in\n    tag_435:\n        /* \"#utility.yul\":1311:1314   */\n      dup5\n        /* \"#utility.yul\":1307:1346   */\n      add\n        /* \"#utility.yul\":1300:1346   */\n      swap2\n      pop\n        /* \"#utility.yul\":1067:1352   */\n      pop\n        /* \"#utility.yul\":975:1352   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1358:1671   */\n    tag_41:\n        /* \"#utility.yul\":1471:1475   */\n      0x00\n        /* \"#utility.yul\":1509:1511   */\n      0x20\n        /* \"#utility.yul\":1498:1507   */\n      dup3\n        /* \"#utility.yul\":1494:1512   */\n      add\n        /* \"#utility.yul\":1486:1512   */\n      swap1\n      pop\n        /* \"#utility.yul\":1558:1567   */\n      dup2\n        /* \"#utility.yul\":1552:1556   */\n      dup2\n        /* \"#utility.yul\":1548:1568   */\n      sub\n        /* \"#utility.yul\":1544:1545   */\n      0x00\n        /* \"#utility.yul\":1533:1542   */\n      dup4\n        /* \"#utility.yul\":1529:1546   */\n      add\n        /* \"#utility.yul\":1522:1569   */\n      mstore\n        /* \"#utility.yul\":1586:1664   */\n      tag_437\n        /* \"#utility.yul\":1659:1663   */\n      dup2\n        /* \"#utility.yul\":1650:1656   */\n      dup5\n        /* \"#utility.yul\":1586:1664   */\n      tag_386\n      jump\t// in\n    tag_437:\n        /* \"#utility.yul\":1578:1664   */\n      swap1\n      pop\n        /* \"#utility.yul\":1358:1671   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1758:1875   */\n    tag_388:\n        /* \"#utility.yul\":1867:1868   */\n      0x00\n        /* \"#utility.yul\":1864:1865   */\n      dup1\n        /* \"#utility.yul\":1857:1869   */\n      revert\n        /* \"#utility.yul\":2004:2126   */\n    tag_390:\n        /* \"#utility.yul\":2077:2101   */\n      tag_442\n        /* \"#utility.yul\":2095:2100   */\n      dup2\n        /* \"#utility.yul\":2077:2101   */\n      tag_380\n      jump\t// in\n    tag_442:\n        /* \"#utility.yul\":2070:2075   */\n      dup2\n        /* \"#utility.yul\":2067:2102   */\n      eq\n        /* \"#utility.yul\":2057:2120   */\n      tag_443\n      jumpi\n        /* \"#utility.yul\":2116:2117   */\n      0x00\n        /* \"#utility.yul\":2113:2114   */\n      dup1\n        /* \"#utility.yul\":2106:2118   */\n      revert\n        /* \"#utility.yul\":2057:2120   */\n    tag_443:\n        /* \"#utility.yul\":2004:2126   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2132:2271   */\n    tag_391:\n        /* \"#utility.yul\":2178:2183   */\n      0x00\n        /* \"#utility.yul\":2216:2222   */\n      dup2\n        /* \"#utility.yul\":2203:2223   */\n      calldataload\n        /* \"#utility.yul\":2194:2223   */\n      swap1\n      pop\n        /* \"#utility.yul\":2232:2265   */\n      tag_445\n        /* \"#utility.yul\":2259:2264   */\n      dup2\n        /* \"#utility.yul\":2232:2265   */\n      tag_390\n      jump\t// in\n    tag_445:\n        /* \"#utility.yul\":2132:2271   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2277:2606   */\n    tag_44:\n        /* \"#utility.yul\":2336:2342   */\n      0x00\n        /* \"#utility.yul\":2385:2387   */\n      0x20\n        /* \"#utility.yul\":2373:2382   */\n      dup3\n        /* \"#utility.yul\":2364:2371   */\n      dup5\n        /* \"#utility.yul\":2360:2383   */\n      sub\n        /* \"#utility.yul\":2356:2388   */\n      slt\n        /* \"#utility.yul\":2353:2472   */\n      iszero\n      tag_447\n      jumpi\n        /* \"#utility.yul\":2391:2470   */\n      tag_448\n      tag_388\n      jump\t// in\n    tag_448:\n        /* \"#utility.yul\":2353:2472   */\n    tag_447:\n        /* \"#utility.yul\":2511:2512   */\n      0x00\n        /* \"#utility.yul\":2536:2589   */\n      tag_449\n        /* \"#utility.yul\":2581:2588   */\n      dup5\n        /* \"#utility.yul\":2572:2578   */\n      dup3\n        /* \"#utility.yul\":2561:2570   */\n      dup6\n        /* \"#utility.yul\":2557:2579   */\n      add\n        /* \"#utility.yul\":2536:2589   */\n      tag_391\n      jump\t// in\n    tag_449:\n        /* \"#utility.yul\":2526:2589   */\n      swap2\n      pop\n        /* \"#utility.yul\":2482:2599   */\n      pop\n        /* \"#utility.yul\":2277:2606   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2612:2738   */\n    tag_392:\n        /* \"#utility.yul\":2649:2656   */\n      0x00\n        /* \"#utility.yul\":2689:2731   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":2682:2687   */\n      dup3\n        /* \"#utility.yul\":2678:2732   */\n      and\n        /* \"#utility.yul\":2667:2732   */\n      swap1\n      pop\n        /* \"#utility.yul\":2612:2738   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2744:2840   */\n    tag_393:\n        /* \"#utility.yul\":2781:2788   */\n      0x00\n        /* \"#utility.yul\":2810:2834   */\n      tag_452\n        /* \"#utility.yul\":2828:2833   */\n      dup3\n        /* \"#utility.yul\":2810:2834   */\n      tag_392\n      jump\t// in\n    tag_452:\n        /* \"#utility.yul\":2799:2834   */\n      swap1\n      pop\n        /* \"#utility.yul\":2744:2840   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2846:2968   */\n    tag_394:\n        /* \"#utility.yul\":2919:2943   */\n      tag_454\n        /* \"#utility.yul\":2937:2942   */\n      dup2\n        /* \"#utility.yul\":2919:2943   */\n      tag_393\n      jump\t// in\n    tag_454:\n        /* \"#utility.yul\":2912:2917   */\n      dup2\n        /* \"#utility.yul\":2909:2944   */\n      eq\n        /* \"#utility.yul\":2899:2962   */\n      tag_455\n      jumpi\n        /* \"#utility.yul\":2958:2959   */\n      0x00\n        /* \"#utility.yul\":2955:2956   */\n      dup1\n        /* \"#utility.yul\":2948:2960   */\n      revert\n        /* \"#utility.yul\":2899:2962   */\n    tag_455:\n        /* \"#utility.yul\":2846:2968   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2974:3113   */\n    tag_395:\n        /* \"#utility.yul\":3020:3025   */\n      0x00\n        /* \"#utility.yul\":3058:3064   */\n      dup2\n        /* \"#utility.yul\":3045:3065   */\n      calldataload\n        /* \"#utility.yul\":3036:3065   */\n      swap1\n      pop\n        /* \"#utility.yul\":3074:3107   */\n      tag_457\n        /* \"#utility.yul\":3101:3106   */\n      dup2\n        /* \"#utility.yul\":3074:3107   */\n      tag_394\n      jump\t// in\n    tag_457:\n        /* \"#utility.yul\":2974:3113   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3119:3593   */\n    tag_49:\n        /* \"#utility.yul\":3187:3193   */\n      0x00\n        /* \"#utility.yul\":3195:3201   */\n      dup1\n        /* \"#utility.yul\":3244:3246   */\n      0x40\n        /* \"#utility.yul\":3232:3241   */\n      dup4\n        /* \"#utility.yul\":3223:3230   */\n      dup6\n        /* \"#utility.yul\":3219:3242   */\n      sub\n        /* \"#utility.yul\":3215:3247   */\n      slt\n        /* \"#utility.yul\":3212:3331   */\n      iszero\n      tag_459\n      jumpi\n        /* \"#utility.yul\":3250:3329   */\n      tag_460\n      tag_388\n      jump\t// in\n    tag_460:\n        /* \"#utility.yul\":3212:3331   */\n    tag_459:\n        /* \"#utility.yul\":3370:3371   */\n      0x00\n        /* \"#utility.yul\":3395:3448   */\n      tag_461\n        /* \"#utility.yul\":3440:3447   */\n      dup6\n        /* \"#utility.yul\":3431:3437   */\n      dup3\n        /* \"#utility.yul\":3420:3429   */\n      dup7\n        /* \"#utility.yul\":3416:3438   */\n      add\n        /* \"#utility.yul\":3395:3448   */\n      tag_395\n      jump\t// in\n    tag_461:\n        /* \"#utility.yul\":3385:3448   */\n      swap3\n      pop\n        /* \"#utility.yul\":3341:3458   */\n      pop\n        /* \"#utility.yul\":3497:3499   */\n      0x20\n        /* \"#utility.yul\":3523:3576   */\n      tag_462\n        /* \"#utility.yul\":3568:3575   */\n      dup6\n        /* \"#utility.yul\":3559:3565   */\n      dup3\n        /* \"#utility.yul\":3548:3557   */\n      dup7\n        /* \"#utility.yul\":3544:3566   */\n      add\n        /* \"#utility.yul\":3523:3576   */\n      tag_391\n      jump\t// in\n    tag_462:\n        /* \"#utility.yul\":3513:3576   */\n      swap2\n      pop\n        /* \"#utility.yul\":3468:3586   */\n      pop\n        /* \"#utility.yul\":3119:3593   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3599:3689   */\n    tag_396:\n        /* \"#utility.yul\":3633:3640   */\n      0x00\n        /* \"#utility.yul\":3676:3681   */\n      dup2\n        /* \"#utility.yul\":3669:3682   */\n      iszero\n        /* \"#utility.yul\":3662:3683   */\n      iszero\n        /* \"#utility.yul\":3651:3683   */\n      swap1\n      pop\n        /* \"#utility.yul\":3599:3689   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3695:3804   */\n    tag_397:\n        /* \"#utility.yul\":3776:3797   */\n      tag_465\n        /* \"#utility.yul\":3791:3796   */\n      dup2\n        /* \"#utility.yul\":3776:3797   */\n      tag_396\n      jump\t// in\n    tag_465:\n        /* \"#utility.yul\":3771:3774   */\n      dup3\n        /* \"#utility.yul\":3764:3798   */\n      mstore\n        /* \"#utility.yul\":3695:3804   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3810:4020   */\n    tag_52:\n        /* \"#utility.yul\":3897:3901   */\n      0x00\n        /* \"#utility.yul\":3935:3937   */\n      0x20\n        /* \"#utility.yul\":3924:3933   */\n      dup3\n        /* \"#utility.yul\":3920:3938   */\n      add\n        /* \"#utility.yul\":3912:3938   */\n      swap1\n      pop\n        /* \"#utility.yul\":3948:4013   */\n      tag_467\n        /* \"#utility.yul\":4010:4011   */\n      0x00\n        /* \"#utility.yul\":3999:4008   */\n      dup4\n        /* \"#utility.yul\":3995:4012   */\n      add\n        /* \"#utility.yul\":3986:3992   */\n      dup5\n        /* \"#utility.yul\":3948:4013   */\n      tag_397\n      jump\t// in\n    tag_467:\n        /* \"#utility.yul\":3810:4020   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4026:4645   */\n    tag_62:\n        /* \"#utility.yul\":4103:4109   */\n      0x00\n        /* \"#utility.yul\":4111:4117   */\n      dup1\n        /* \"#utility.yul\":4119:4125   */\n      0x00\n        /* \"#utility.yul\":4168:4170   */\n      0x60\n        /* \"#utility.yul\":4156:4165   */\n      dup5\n        /* \"#utility.yul\":4147:4154   */\n      dup7\n        /* \"#utility.yul\":4143:4166   */\n      sub\n        /* \"#utility.yul\":4139:4171   */\n      slt\n        /* \"#utility.yul\":4136:4255   */\n      iszero\n      tag_469\n      jumpi\n        /* \"#utility.yul\":4174:4253   */\n      tag_470\n      tag_388\n      jump\t// in\n    tag_470:\n        /* \"#utility.yul\":4136:4255   */\n    tag_469:\n        /* \"#utility.yul\":4294:4295   */\n      0x00\n        /* \"#utility.yul\":4319:4372   */\n      tag_471\n        /* \"#utility.yul\":4364:4371   */\n      dup7\n        /* \"#utility.yul\":4355:4361   */\n      dup3\n        /* \"#utility.yul\":4344:4353   */\n      dup8\n        /* \"#utility.yul\":4340:4362   */\n      add\n        /* \"#utility.yul\":4319:4372   */\n      tag_395\n      jump\t// in\n    tag_471:\n        /* \"#utility.yul\":4309:4372   */\n      swap4\n      pop\n        /* \"#utility.yul\":4265:4382   */\n      pop\n        /* \"#utility.yul\":4421:4423   */\n      0x20\n        /* \"#utility.yul\":4447:4500   */\n      tag_472\n        /* \"#utility.yul\":4492:4499   */\n      dup7\n        /* \"#utility.yul\":4483:4489   */\n      dup3\n        /* \"#utility.yul\":4472:4481   */\n      dup8\n        /* \"#utility.yul\":4468:4490   */\n      add\n        /* \"#utility.yul\":4447:4500   */\n      tag_395\n      jump\t// in\n    tag_472:\n        /* \"#utility.yul\":4437:4500   */\n      swap3\n      pop\n        /* \"#utility.yul\":4392:4510   */\n      pop\n        /* \"#utility.yul\":4549:4551   */\n      0x40\n        /* \"#utility.yul\":4575:4628   */\n      tag_473\n        /* \"#utility.yul\":4620:4627   */\n      dup7\n        /* \"#utility.yul\":4611:4617   */\n      dup3\n        /* \"#utility.yul\":4600:4609   */\n      dup8\n        /* \"#utility.yul\":4596:4618   */\n      add\n        /* \"#utility.yul\":4575:4628   */\n      tag_391\n      jump\t// in\n    tag_473:\n        /* \"#utility.yul\":4565:4628   */\n      swap2\n      pop\n        /* \"#utility.yul\":4520:4638   */\n      pop\n        /* \"#utility.yul\":4026:4645   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":4651:4737   */\n    tag_398:\n        /* \"#utility.yul\":4686:4693   */\n      0x00\n        /* \"#utility.yul\":4726:4730   */\n      0xff\n        /* \"#utility.yul\":4719:4724   */\n      dup3\n        /* \"#utility.yul\":4715:4731   */\n      and\n        /* \"#utility.yul\":4704:4731   */\n      swap1\n      pop\n        /* \"#utility.yul\":4651:4737   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4743:4855   */\n    tag_399:\n        /* \"#utility.yul\":4826:4848   */\n      tag_476\n        /* \"#utility.yul\":4842:4847   */\n      dup2\n        /* \"#utility.yul\":4826:4848   */\n      tag_398\n      jump\t// in\n    tag_476:\n        /* \"#utility.yul\":4821:4824   */\n      dup3\n        /* \"#utility.yul\":4814:4849   */\n      mstore\n        /* \"#utility.yul\":4743:4855   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4861:5075   */\n    tag_68:\n        /* \"#utility.yul\":4950:4954   */\n      0x00\n        /* \"#utility.yul\":4988:4990   */\n      0x20\n        /* \"#utility.yul\":4977:4986   */\n      dup3\n        /* \"#utility.yul\":4973:4991   */\n      add\n        /* \"#utility.yul\":4965:4991   */\n      swap1\n      pop\n        /* \"#utility.yul\":5001:5068   */\n      tag_478\n        /* \"#utility.yul\":5065:5066   */\n      0x00\n        /* \"#utility.yul\":5054:5063   */\n      dup4\n        /* \"#utility.yul\":5050:5067   */\n      add\n        /* \"#utility.yul\":5041:5047   */\n      dup5\n        /* \"#utility.yul\":5001:5068   */\n      tag_399\n      jump\t// in\n    tag_478:\n        /* \"#utility.yul\":4861:5075   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5081:5199   */\n    tag_400:\n        /* \"#utility.yul\":5168:5192   */\n      tag_480\n        /* \"#utility.yul\":5186:5191   */\n      dup2\n        /* \"#utility.yul\":5168:5192   */\n      tag_393\n      jump\t// in\n    tag_480:\n        /* \"#utility.yul\":5163:5166   */\n      dup3\n        /* \"#utility.yul\":5156:5193   */\n      mstore\n        /* \"#utility.yul\":5081:5199   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5205:5427   */\n    tag_72:\n        /* \"#utility.yul\":5298:5302   */\n      0x00\n        /* \"#utility.yul\":5336:5338   */\n      0x20\n        /* \"#utility.yul\":5325:5334   */\n      dup3\n        /* \"#utility.yul\":5321:5339   */\n      add\n        /* \"#utility.yul\":5313:5339   */\n      swap1\n      pop\n        /* \"#utility.yul\":5349:5420   */\n      tag_482\n        /* \"#utility.yul\":5417:5418   */\n      0x00\n        /* \"#utility.yul\":5406:5415   */\n      dup4\n        /* \"#utility.yul\":5402:5419   */\n      add\n        /* \"#utility.yul\":5393:5399   */\n      dup5\n        /* \"#utility.yul\":5349:5420   */\n      tag_400\n      jump\t// in\n    tag_482:\n        /* \"#utility.yul\":5205:5427   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5433:5762   */\n    tag_75:\n        /* \"#utility.yul\":5492:5498   */\n      0x00\n        /* \"#utility.yul\":5541:5543   */\n      0x20\n        /* \"#utility.yul\":5529:5538   */\n      dup3\n        /* \"#utility.yul\":5520:5527   */\n      dup5\n        /* \"#utility.yul\":5516:5539   */\n      sub\n        /* \"#utility.yul\":5512:5544   */\n      slt\n        /* \"#utility.yul\":5509:5628   */\n      iszero\n      tag_484\n      jumpi\n        /* \"#utility.yul\":5547:5626   */\n      tag_485\n      tag_388\n      jump\t// in\n    tag_485:\n        /* \"#utility.yul\":5509:5628   */\n    tag_484:\n        /* \"#utility.yul\":5667:5668   */\n      0x00\n        /* \"#utility.yul\":5692:5745   */\n      tag_486\n        /* \"#utility.yul\":5737:5744   */\n      dup5\n        /* \"#utility.yul\":5728:5734   */\n      dup3\n        /* \"#utility.yul\":5717:5726   */\n      dup6\n        /* \"#utility.yul\":5713:5735   */\n      add\n        /* \"#utility.yul\":5692:5745   */\n      tag_395\n      jump\t// in\n    tag_486:\n        /* \"#utility.yul\":5682:5745   */\n      swap2\n      pop\n        /* \"#utility.yul\":5638:5755   */\n      pop\n        /* \"#utility.yul\":5433:5762   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5768:6242   */\n    tag_84:\n        /* \"#utility.yul\":5836:5842   */\n      0x00\n        /* \"#utility.yul\":5844:5850   */\n      dup1\n        /* \"#utility.yul\":5893:5895   */\n      0x40\n        /* \"#utility.yul\":5881:5890   */\n      dup4\n        /* \"#utility.yul\":5872:5879   */\n      dup6\n        /* \"#utility.yul\":5868:5891   */\n      sub\n        /* \"#utility.yul\":5864:5896   */\n      slt\n        /* \"#utility.yul\":5861:5980   */\n      iszero\n      tag_488\n      jumpi\n        /* \"#utility.yul\":5899:5978   */\n      tag_489\n      tag_388\n      jump\t// in\n    tag_489:\n        /* \"#utility.yul\":5861:5980   */\n    tag_488:\n        /* \"#utility.yul\":6019:6020   */\n      0x00\n        /* \"#utility.yul\":6044:6097   */\n      tag_490\n        /* \"#utility.yul\":6089:6096   */\n      dup6\n        /* \"#utility.yul\":6080:6086   */\n      dup3\n        /* \"#utility.yul\":6069:6078   */\n      dup7\n        /* \"#utility.yul\":6065:6087   */\n      add\n        /* \"#utility.yul\":6044:6097   */\n      tag_391\n      jump\t// in\n    tag_490:\n        /* \"#utility.yul\":6034:6097   */\n      swap3\n      pop\n        /* \"#utility.yul\":5990:6107   */\n      pop\n        /* \"#utility.yul\":6146:6148   */\n      0x20\n        /* \"#utility.yul\":6172:6225   */\n      tag_491\n        /* \"#utility.yul\":6217:6224   */\n      dup6\n        /* \"#utility.yul\":6208:6214   */\n      dup3\n        /* \"#utility.yul\":6197:6206   */\n      dup7\n        /* \"#utility.yul\":6193:6215   */\n      add\n        /* \"#utility.yul\":6172:6225   */\n      tag_395\n      jump\t// in\n    tag_491:\n        /* \"#utility.yul\":6162:6225   */\n      swap2\n      pop\n        /* \"#utility.yul\":6117:6235   */\n      pop\n        /* \"#utility.yul\":5768:6242   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6248:6308   */\n    tag_401:\n        /* \"#utility.yul\":6276:6279   */\n      0x00\n        /* \"#utility.yul\":6297:6302   */\n      dup2\n        /* \"#utility.yul\":6290:6302   */\n      swap1\n      pop\n        /* \"#utility.yul\":6248:6308   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6314:6456   */\n    tag_402:\n        /* \"#utility.yul\":6364:6373   */\n      0x00\n        /* \"#utility.yul\":6397:6450   */\n      tag_494\n        /* \"#utility.yul\":6415:6449   */\n      tag_495\n        /* \"#utility.yul\":6424:6448   */\n      tag_496\n        /* \"#utility.yul\":6442:6447   */\n      dup5\n        /* \"#utility.yul\":6424:6448   */\n      tag_392\n      jump\t// in\n    tag_496:\n        /* \"#utility.yul\":6415:6449   */\n      tag_401\n      jump\t// in\n    tag_495:\n        /* \"#utility.yul\":6397:6450   */\n      tag_392\n      jump\t// in\n    tag_494:\n        /* \"#utility.yul\":6384:6450   */\n      swap1\n      pop\n        /* \"#utility.yul\":6314:6456   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6462:6588   */\n    tag_403:\n        /* \"#utility.yul\":6512:6521   */\n      0x00\n        /* \"#utility.yul\":6545:6582   */\n      tag_498\n        /* \"#utility.yul\":6576:6581   */\n      dup3\n        /* \"#utility.yul\":6545:6582   */\n      tag_402\n      jump\t// in\n    tag_498:\n        /* \"#utility.yul\":6532:6582   */\n      swap1\n      pop\n        /* \"#utility.yul\":6462:6588   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6594:6735   */\n    tag_404:\n        /* \"#utility.yul\":6659:6668   */\n      0x00\n        /* \"#utility.yul\":6692:6729   */\n      tag_500\n        /* \"#utility.yul\":6723:6728   */\n      dup3\n        /* \"#utility.yul\":6692:6729   */\n      tag_403\n      jump\t// in\n    tag_500:\n        /* \"#utility.yul\":6679:6729   */\n      swap1\n      pop\n        /* \"#utility.yul\":6594:6735   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6741:6902   */\n    tag_405:\n        /* \"#utility.yul\":6843:6895   */\n      tag_502\n        /* \"#utility.yul\":6889:6894   */\n      dup2\n        /* \"#utility.yul\":6843:6895   */\n      tag_404\n      jump\t// in\n    tag_502:\n        /* \"#utility.yul\":6838:6841   */\n      dup3\n        /* \"#utility.yul\":6831:6896   */\n      mstore\n        /* \"#utility.yul\":6741:6902   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6908:7160   */\n    tag_94:\n        /* \"#utility.yul\":7016:7020   */\n      0x00\n        /* \"#utility.yul\":7054:7056   */\n      0x20\n        /* \"#utility.yul\":7043:7052   */\n      dup3\n        /* \"#utility.yul\":7039:7057   */\n      add\n        /* \"#utility.yul\":7031:7057   */\n      swap1\n      pop\n        /* \"#utility.yul\":7067:7153   */\n      tag_504\n        /* \"#utility.yul\":7150:7151   */\n      0x00\n        /* \"#utility.yul\":7139:7148   */\n      dup4\n        /* \"#utility.yul\":7135:7152   */\n      add\n        /* \"#utility.yul\":7126:7132   */\n      dup5\n        /* \"#utility.yul\":7067:7153   */\n      tag_405\n      jump\t// in\n    tag_504:\n        /* \"#utility.yul\":6908:7160   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7166:7785   */\n    tag_112:\n        /* \"#utility.yul\":7243:7249   */\n      0x00\n        /* \"#utility.yul\":7251:7257   */\n      dup1\n        /* \"#utility.yul\":7259:7265   */\n      0x00\n        /* \"#utility.yul\":7308:7310   */\n      0x60\n        /* \"#utility.yul\":7296:7305   */\n      dup5\n        /* \"#utility.yul\":7287:7294   */\n      dup7\n        /* \"#utility.yul\":7283:7306   */\n      sub\n        /* \"#utility.yul\":7279:7311   */\n      slt\n        /* \"#utility.yul\":7276:7395   */\n      iszero\n      tag_506\n      jumpi\n        /* \"#utility.yul\":7314:7393   */\n      tag_507\n      tag_388\n      jump\t// in\n    tag_507:\n        /* \"#utility.yul\":7276:7395   */\n    tag_506:\n        /* \"#utility.yul\":7434:7435   */\n      0x00\n        /* \"#utility.yul\":7459:7512   */\n      tag_508\n        /* \"#utility.yul\":7504:7511   */\n      dup7\n        /* \"#utility.yul\":7495:7501   */\n      dup3\n        /* \"#utility.yul\":7484:7493   */\n      dup8\n        /* \"#utility.yul\":7480:7502   */\n      add\n        /* \"#utility.yul\":7459:7512   */\n      tag_391\n      jump\t// in\n    tag_508:\n        /* \"#utility.yul\":7449:7512   */\n      swap4\n      pop\n        /* \"#utility.yul\":7405:7522   */\n      pop\n        /* \"#utility.yul\":7561:7563   */\n      0x20\n        /* \"#utility.yul\":7587:7640   */\n      tag_509\n        /* \"#utility.yul\":7632:7639   */\n      dup7\n        /* \"#utility.yul\":7623:7629   */\n      dup3\n        /* \"#utility.yul\":7612:7621   */\n      dup8\n        /* \"#utility.yul\":7608:7630   */\n      add\n        /* \"#utility.yul\":7587:7640   */\n      tag_395\n      jump\t// in\n    tag_509:\n        /* \"#utility.yul\":7577:7640   */\n      swap3\n      pop\n        /* \"#utility.yul\":7532:7650   */\n      pop\n        /* \"#utility.yul\":7689:7691   */\n      0x40\n        /* \"#utility.yul\":7715:7768   */\n      tag_510\n        /* \"#utility.yul\":7760:7767   */\n      dup7\n        /* \"#utility.yul\":7751:7757   */\n      dup3\n        /* \"#utility.yul\":7740:7749   */\n      dup8\n        /* \"#utility.yul\":7736:7758   */\n      add\n        /* \"#utility.yul\":7715:7768   */\n      tag_395\n      jump\t// in\n    tag_510:\n        /* \"#utility.yul\":7705:7768   */\n      swap2\n      pop\n        /* \"#utility.yul\":7660:7778   */\n      pop\n        /* \"#utility.yul\":7166:7785   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":7791:8265   */\n    tag_137:\n        /* \"#utility.yul\":7859:7865   */\n      0x00\n        /* \"#utility.yul\":7867:7873   */\n      dup1\n        /* \"#utility.yul\":7916:7918   */\n      0x40\n        /* \"#utility.yul\":7904:7913   */\n      dup4\n        /* \"#utility.yul\":7895:7902   */\n      dup6\n        /* \"#utility.yul\":7891:7914   */\n      sub\n        /* \"#utility.yul\":7887:7919   */\n      slt\n        /* \"#utility.yul\":7884:8003   */\n      iszero\n      tag_512\n      jumpi\n        /* \"#utility.yul\":7922:8001   */\n      tag_513\n      tag_388\n      jump\t// in\n    tag_513:\n        /* \"#utility.yul\":7884:8003   */\n    tag_512:\n        /* \"#utility.yul\":8042:8043   */\n      0x00\n        /* \"#utility.yul\":8067:8120   */\n      tag_514\n        /* \"#utility.yul\":8112:8119   */\n      dup6\n        /* \"#utility.yul\":8103:8109   */\n      dup3\n        /* \"#utility.yul\":8092:8101   */\n      dup7\n        /* \"#utility.yul\":8088:8110   */\n      add\n        /* \"#utility.yul\":8067:8120   */\n      tag_395\n      jump\t// in\n    tag_514:\n        /* \"#utility.yul\":8057:8120   */\n      swap3\n      pop\n        /* \"#utility.yul\":8013:8130   */\n      pop\n        /* \"#utility.yul\":8169:8171   */\n      0x20\n        /* \"#utility.yul\":8195:8248   */\n      tag_515\n        /* \"#utility.yul\":8240:8247   */\n      dup6\n        /* \"#utility.yul\":8231:8237   */\n      dup3\n        /* \"#utility.yul\":8220:8229   */\n      dup7\n        /* \"#utility.yul\":8216:8238   */\n      add\n        /* \"#utility.yul\":8195:8248   */\n      tag_395\n      jump\t// in\n    tag_515:\n        /* \"#utility.yul\":8185:8248   */\n      swap2\n      pop\n        /* \"#utility.yul\":8140:8258   */\n      pop\n        /* \"#utility.yul\":7791:8265   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8271:8414   */\n    tag_406:\n        /* \"#utility.yul\":8328:8333   */\n      0x00\n        /* \"#utility.yul\":8359:8365   */\n      dup2\n        /* \"#utility.yul\":8353:8366   */\n      mload\n        /* \"#utility.yul\":8344:8366   */\n      swap1\n      pop\n        /* \"#utility.yul\":8375:8408   */\n      tag_517\n        /* \"#utility.yul\":8402:8407   */\n      dup2\n        /* \"#utility.yul\":8375:8408   */\n      tag_390\n      jump\t// in\n    tag_517:\n        /* \"#utility.yul\":8271:8414   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8420:8771   */\n    tag_149:\n        /* \"#utility.yul\":8490:8496   */\n      0x00\n        /* \"#utility.yul\":8539:8541   */\n      0x20\n        /* \"#utility.yul\":8527:8536   */\n      dup3\n        /* \"#utility.yul\":8518:8525   */\n      dup5\n        /* \"#utility.yul\":8514:8537   */\n      sub\n        /* \"#utility.yul\":8510:8542   */\n      slt\n        /* \"#utility.yul\":8507:8626   */\n      iszero\n      tag_519\n      jumpi\n        /* \"#utility.yul\":8545:8624   */\n      tag_520\n      tag_388\n      jump\t// in\n    tag_520:\n        /* \"#utility.yul\":8507:8626   */\n    tag_519:\n        /* \"#utility.yul\":8665:8666   */\n      0x00\n        /* \"#utility.yul\":8690:8754   */\n      tag_521\n        /* \"#utility.yul\":8746:8753   */\n      dup5\n        /* \"#utility.yul\":8737:8743   */\n      dup3\n        /* \"#utility.yul\":8726:8735   */\n      dup6\n        /* \"#utility.yul\":8722:8744   */\n      add\n        /* \"#utility.yul\":8690:8754   */\n      tag_406\n      jump\t// in\n    tag_521:\n        /* \"#utility.yul\":8680:8754   */\n      swap2\n      pop\n        /* \"#utility.yul\":8636:8764   */\n      pop\n        /* \"#utility.yul\":8420:8771   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8777:8957   */\n    tag_407:\n        /* \"#utility.yul\":8825:8902   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":8822:8823   */\n      0x00\n        /* \"#utility.yul\":8815:8903   */\n      mstore\n        /* \"#utility.yul\":8922:8926   */\n      0x22\n        /* \"#utility.yul\":8919:8920   */\n      0x04\n        /* \"#utility.yul\":8912:8927   */\n      mstore\n        /* \"#utility.yul\":8946:8950   */\n      0x24\n        /* \"#utility.yul\":8943:8944   */\n      0x00\n        /* \"#utility.yul\":8936:8951   */\n      revert\n        /* \"#utility.yul\":8963:9283   */\n    tag_152:\n        /* \"#utility.yul\":9007:9013   */\n      0x00\n        /* \"#utility.yul\":9044:9045   */\n      0x02\n        /* \"#utility.yul\":9038:9042   */\n      dup3\n        /* \"#utility.yul\":9034:9046   */\n      div\n        /* \"#utility.yul\":9024:9046   */\n      swap1\n      pop\n        /* \"#utility.yul\":9091:9092   */\n      0x01\n        /* \"#utility.yul\":9085:9089   */\n      dup3\n        /* \"#utility.yul\":9081:9093   */\n      and\n        /* \"#utility.yul\":9112:9130   */\n      dup1\n        /* \"#utility.yul\":9102:9183   */\n      tag_524\n      jumpi\n        /* \"#utility.yul\":9168:9172   */\n      0x7f\n        /* \"#utility.yul\":9160:9166   */\n      dup3\n        /* \"#utility.yul\":9156:9173   */\n      and\n        /* \"#utility.yul\":9146:9173   */\n      swap2\n      pop\n        /* \"#utility.yul\":9102:9183   */\n    tag_524:\n        /* \"#utility.yul\":9230:9232   */\n      0x20\n        /* \"#utility.yul\":9222:9228   */\n      dup3\n        /* \"#utility.yul\":9219:9233   */\n      lt\n        /* \"#utility.yul\":9199:9217   */\n      dup2\n        /* \"#utility.yul\":9196:9234   */\n      sub\n        /* \"#utility.yul\":9193:9277   */\n      tag_525\n      jumpi\n        /* \"#utility.yul\":9249:9267   */\n      tag_526\n      tag_407\n      jump\t// in\n    tag_526:\n        /* \"#utility.yul\":9193:9277   */\n    tag_525:\n        /* \"#utility.yul\":9014:9283   */\n      pop\n        /* \"#utility.yul\":8963:9283   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9289:9469   */\n    tag_408:\n        /* \"#utility.yul\":9337:9414   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":9334:9335   */\n      0x00\n        /* \"#utility.yul\":9327:9415   */\n      mstore\n        /* \"#utility.yul\":9434:9438   */\n      0x11\n        /* \"#utility.yul\":9431:9432   */\n      0x04\n        /* \"#utility.yul\":9424:9439   */\n      mstore\n        /* \"#utility.yul\":9458:9462   */\n      0x24\n        /* \"#utility.yul\":9455:9456   */\n      0x00\n        /* \"#utility.yul\":9448:9463   */\n      revert\n        /* \"#utility.yul\":9475:9663   */\n    tag_179:\n        /* \"#utility.yul\":9513:9516   */\n      0x00\n        /* \"#utility.yul\":9532:9550   */\n      tag_529\n        /* \"#utility.yul\":9548:9549   */\n      dup3\n        /* \"#utility.yul\":9532:9550   */\n      tag_398\n      jump\t// in\n    tag_529:\n        /* \"#utility.yul\":9527:9550   */\n      swap2\n      pop\n        /* \"#utility.yul\":9564:9582   */\n      tag_530\n        /* \"#utility.yul\":9580:9581   */\n      dup4\n        /* \"#utility.yul\":9564:9582   */\n      tag_398\n      jump\t// in\n    tag_530:\n        /* \"#utility.yul\":9559:9582   */\n      swap3\n      pop\n        /* \"#utility.yul\":9605:9606   */\n      dup3\n        /* \"#utility.yul\":9602:9603   */\n      dup3\n        /* \"#utility.yul\":9598:9607   */\n      add\n        /* \"#utility.yul\":9591:9607   */\n      swap1\n      pop\n        /* \"#utility.yul\":9628:9632   */\n      0xff\n        /* \"#utility.yul\":9623:9626   */\n      dup2\n        /* \"#utility.yul\":9620:9633   */\n      gt\n        /* \"#utility.yul\":9617:9656   */\n      iszero\n      tag_531\n      jumpi\n        /* \"#utility.yul\":9636:9654   */\n      tag_532\n      tag_408\n      jump\t// in\n    tag_532:\n        /* \"#utility.yul\":9617:9656   */\n    tag_531:\n        /* \"#utility.yul\":9475:9663   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9669:9839   */\n    tag_409:\n        /* \"#utility.yul\":9809:9831   */\n      0x53656e646572206973204e6f74205661756c7473000000000000000000000000\n        /* \"#utility.yul\":9805:9806   */\n      0x00\n        /* \"#utility.yul\":9797:9803   */\n      dup3\n        /* \"#utility.yul\":9793:9807   */\n      add\n        /* \"#utility.yul\":9786:9832   */\n      mstore\n        /* \"#utility.yul\":9669:9839   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9845:10211   */\n    tag_410:\n        /* \"#utility.yul\":9987:9990   */\n      0x00\n        /* \"#utility.yul\":10008:10075   */\n      tag_535\n        /* \"#utility.yul\":10072:10074   */\n      0x14\n        /* \"#utility.yul\":10067:10070   */\n      dup4\n        /* \"#utility.yul\":10008:10075   */\n      tag_383\n      jump\t// in\n    tag_535:\n        /* \"#utility.yul\":10001:10075   */\n      swap2\n      pop\n        /* \"#utility.yul\":10084:10177   */\n      tag_536\n        /* \"#utility.yul\":10173:10176   */\n      dup3\n        /* \"#utility.yul\":10084:10177   */\n      tag_409\n      jump\t// in\n    tag_536:\n        /* \"#utility.yul\":10202:10204   */\n      0x20\n        /* \"#utility.yul\":10197:10200   */\n      dup3\n        /* \"#utility.yul\":10193:10205   */\n      add\n        /* \"#utility.yul\":10186:10205   */\n      swap1\n      pop\n        /* \"#utility.yul\":9845:10211   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10217:10636   */\n    tag_187:\n        /* \"#utility.yul\":10383:10387   */\n      0x00\n        /* \"#utility.yul\":10421:10423   */\n      0x20\n        /* \"#utility.yul\":10410:10419   */\n      dup3\n        /* \"#utility.yul\":10406:10424   */\n      add\n        /* \"#utility.yul\":10398:10424   */\n      swap1\n      pop\n        /* \"#utility.yul\":10470:10479   */\n      dup2\n        /* \"#utility.yul\":10464:10468   */\n      dup2\n        /* \"#utility.yul\":10460:10480   */\n      sub\n        /* \"#utility.yul\":10456:10457   */\n      0x00\n        /* \"#utility.yul\":10445:10454   */\n      dup4\n        /* \"#utility.yul\":10441:10458   */\n      add\n        /* \"#utility.yul\":10434:10481   */\n      mstore\n        /* \"#utility.yul\":10498:10629   */\n      tag_538\n        /* \"#utility.yul\":10624:10628   */\n      dup2\n        /* \"#utility.yul\":10498:10629   */\n      tag_410\n      jump\t// in\n    tag_538:\n        /* \"#utility.yul\":10490:10629   */\n      swap1\n      pop\n        /* \"#utility.yul\":10217:10636   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10642:10821   */\n    tag_411:\n        /* \"#utility.yul\":10782:10813   */\n      0x416d6f756e74206d7573742062652067726561746572207468616e2030000000\n        /* \"#utility.yul\":10778:10779   */\n      0x00\n        /* \"#utility.yul\":10770:10776   */\n      dup3\n        /* \"#utility.yul\":10766:10780   */\n      add\n        /* \"#utility.yul\":10759:10814   */\n      mstore\n        /* \"#utility.yul\":10642:10821   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10827:11193   */\n    tag_412:\n        /* \"#utility.yul\":10969:10972   */\n      0x00\n        /* \"#utility.yul\":10990:11057   */\n      tag_541\n        /* \"#utility.yul\":11054:11056   */\n      0x1d\n        /* \"#utility.yul\":11049:11052   */\n      dup4\n        /* \"#utility.yul\":10990:11057   */\n      tag_383\n      jump\t// in\n    tag_541:\n        /* \"#utility.yul\":10983:11057   */\n      swap2\n      pop\n        /* \"#utility.yul\":11066:11159   */\n      tag_542\n        /* \"#utility.yul\":11155:11158   */\n      dup3\n        /* \"#utility.yul\":11066:11159   */\n      tag_411\n      jump\t// in\n    tag_542:\n        /* \"#utility.yul\":11184:11186   */\n      0x20\n        /* \"#utility.yul\":11179:11182   */\n      dup3\n        /* \"#utility.yul\":11175:11187   */\n      add\n        /* \"#utility.yul\":11168:11187   */\n      swap1\n      pop\n        /* \"#utility.yul\":10827:11193   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11199:11618   */\n    tag_191:\n        /* \"#utility.yul\":11365:11369   */\n      0x00\n        /* \"#utility.yul\":11403:11405   */\n      0x20\n        /* \"#utility.yul\":11392:11401   */\n      dup3\n        /* \"#utility.yul\":11388:11406   */\n      add\n        /* \"#utility.yul\":11380:11406   */\n      swap1\n      pop\n        /* \"#utility.yul\":11452:11461   */\n      dup2\n        /* \"#utility.yul\":11446:11450   */\n      dup2\n        /* \"#utility.yul\":11442:11462   */\n      sub\n        /* \"#utility.yul\":11438:11439   */\n      0x00\n        /* \"#utility.yul\":11427:11436   */\n      dup4\n        /* \"#utility.yul\":11423:11440   */\n      add\n        /* \"#utility.yul\":11416:11463   */\n      mstore\n        /* \"#utility.yul\":11480:11611   */\n      tag_544\n        /* \"#utility.yul\":11606:11610   */\n      dup2\n        /* \"#utility.yul\":11480:11611   */\n      tag_412\n      jump\t// in\n    tag_544:\n        /* \"#utility.yul\":11472:11611   */\n      swap1\n      pop\n        /* \"#utility.yul\":11199:11618   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11624:12066   */\n    tag_195:\n        /* \"#utility.yul\":11773:11777   */\n      0x00\n        /* \"#utility.yul\":11811:11813   */\n      0x60\n        /* \"#utility.yul\":11800:11809   */\n      dup3\n        /* \"#utility.yul\":11796:11814   */\n      add\n        /* \"#utility.yul\":11788:11814   */\n      swap1\n      pop\n        /* \"#utility.yul\":11824:11895   */\n      tag_546\n        /* \"#utility.yul\":11892:11893   */\n      0x00\n        /* \"#utility.yul\":11881:11890   */\n      dup4\n        /* \"#utility.yul\":11877:11894   */\n      add\n        /* \"#utility.yul\":11868:11874   */\n      dup7\n        /* \"#utility.yul\":11824:11895   */\n      tag_400\n      jump\t// in\n    tag_546:\n        /* \"#utility.yul\":11905:11977   */\n      tag_547\n        /* \"#utility.yul\":11973:11975   */\n      0x20\n        /* \"#utility.yul\":11962:11971   */\n      dup4\n        /* \"#utility.yul\":11958:11976   */\n      add\n        /* \"#utility.yul\":11949:11955   */\n      dup6\n        /* \"#utility.yul\":11905:11977   */\n      tag_381\n      jump\t// in\n    tag_547:\n        /* \"#utility.yul\":11987:12059   */\n      tag_548\n        /* \"#utility.yul\":12055:12057   */\n      0x40\n        /* \"#utility.yul\":12044:12053   */\n      dup4\n        /* \"#utility.yul\":12040:12058   */\n      add\n        /* \"#utility.yul\":12031:12037   */\n      dup5\n        /* \"#utility.yul\":11987:12059   */\n      tag_381\n      jump\t// in\n    tag_548:\n        /* \"#utility.yul\":11624:12066   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12072:12263   */\n    tag_245:\n        /* \"#utility.yul\":12112:12115   */\n      0x00\n        /* \"#utility.yul\":12131:12151   */\n      tag_550\n        /* \"#utility.yul\":12149:12150   */\n      dup3\n        /* \"#utility.yul\":12131:12151   */\n      tag_380\n      jump\t// in\n    tag_550:\n        /* \"#utility.yul\":12126:12151   */\n      swap2\n      pop\n        /* \"#utility.yul\":12165:12185   */\n      tag_551\n        /* \"#utility.yul\":12183:12184   */\n      dup4\n        /* \"#utility.yul\":12165:12185   */\n      tag_380\n      jump\t// in\n    tag_551:\n        /* \"#utility.yul\":12160:12185   */\n      swap3\n      pop\n        /* \"#utility.yul\":12208:12209   */\n      dup3\n        /* \"#utility.yul\":12205:12206   */\n      dup3\n        /* \"#utility.yul\":12201:12210   */\n      add\n        /* \"#utility.yul\":12194:12210   */\n      swap1\n      pop\n        /* \"#utility.yul\":12229:12232   */\n      dup1\n        /* \"#utility.yul\":12226:12227   */\n      dup3\n        /* \"#utility.yul\":12223:12233   */\n      gt\n        /* \"#utility.yul\":12220:12256   */\n      iszero\n      tag_552\n      jumpi\n        /* \"#utility.yul\":12236:12254   */\n      tag_553\n      tag_408\n      jump\t// in\n    tag_553:\n        /* \"#utility.yul\":12220:12256   */\n    tag_552:\n        /* \"#utility.yul\":12072:12263   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12269:12371   */\n    tag_413:\n        /* \"#utility.yul\":12311:12319   */\n      0x00\n        /* \"#utility.yul\":12358:12363   */\n      dup2\n        /* \"#utility.yul\":12355:12356   */\n      0x01\n        /* \"#utility.yul\":12351:12364   */\n      shr\n        /* \"#utility.yul\":12330:12364   */\n      swap1\n      pop\n        /* \"#utility.yul\":12269:12371   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12377:13225   */\n    tag_414:\n        /* \"#utility.yul\":12438:12443   */\n      0x00\n        /* \"#utility.yul\":12445:12449   */\n      dup1\n        /* \"#utility.yul\":12469:12475   */\n      dup3\n        /* \"#utility.yul\":12460:12475   */\n      swap2\n      pop\n        /* \"#utility.yul\":12493:12498   */\n      dup4\n        /* \"#utility.yul\":12484:12498   */\n      swap1\n      pop\n        /* \"#utility.yul\":12507:13219   */\n    tag_556:\n        /* \"#utility.yul\":12528:12529   */\n      0x01\n        /* \"#utility.yul\":12518:12526   */\n      dup6\n        /* \"#utility.yul\":12515:12530   */\n      gt\n        /* \"#utility.yul\":12507:13219   */\n      iszero\n      tag_558\n      jumpi\n        /* \"#utility.yul\":12623:12627   */\n      dup1\n        /* \"#utility.yul\":12618:12621   */\n      dup7\n        /* \"#utility.yul\":12614:12628   */\n      div\n        /* \"#utility.yul\":12608:12612   */\n      dup2\n        /* \"#utility.yul\":12605:12629   */\n      gt\n        /* \"#utility.yul\":12602:12652   */\n      iszero\n      tag_559\n      jumpi\n        /* \"#utility.yul\":12632:12650   */\n      tag_560\n      tag_408\n      jump\t// in\n    tag_560:\n        /* \"#utility.yul\":12602:12652   */\n    tag_559:\n        /* \"#utility.yul\":12682:12683   */\n      0x01\n        /* \"#utility.yul\":12672:12680   */\n      dup6\n        /* \"#utility.yul\":12668:12684   */\n      and\n        /* \"#utility.yul\":12665:13116   */\n      iszero\n      tag_561\n      jumpi\n        /* \"#utility.yul\":13097:13101   */\n      dup1\n        /* \"#utility.yul\":13090:13095   */\n      dup3\n        /* \"#utility.yul\":13086:13102   */\n      mul\n        /* \"#utility.yul\":13077:13102   */\n      swap2\n      pop\n        /* \"#utility.yul\":12665:13116   */\n    tag_561:\n        /* \"#utility.yul\":13147:13151   */\n      dup1\n        /* \"#utility.yul\":13141:13145   */\n      dup2\n        /* \"#utility.yul\":13137:13152   */\n      mul\n        /* \"#utility.yul\":13129:13152   */\n      swap1\n      pop\n        /* \"#utility.yul\":13177:13209   */\n      tag_562\n        /* \"#utility.yul\":13200:13208   */\n      dup6\n        /* \"#utility.yul\":13177:13209   */\n      tag_413\n      jump\t// in\n    tag_562:\n        /* \"#utility.yul\":13165:13209   */\n      swap5\n      pop\n        /* \"#utility.yul\":12507:13219   */\n      jump(tag_556)\n    tag_558:\n        /* \"#utility.yul\":12377:13225   */\n      swap5\n      pop\n      swap5\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13231:14304   */\n    tag_415:\n        /* \"#utility.yul\":13285:13290   */\n      0x00\n        /* \"#utility.yul\":13476:13484   */\n      dup3\n        /* \"#utility.yul\":13466:13506   */\n      tag_564\n      jumpi\n        /* \"#utility.yul\":13497:13498   */\n      0x01\n        /* \"#utility.yul\":13488:13498   */\n      swap1\n      pop\n        /* \"#utility.yul\":13499:13504   */\n      jump(tag_563)\n        /* \"#utility.yul\":13466:13506   */\n    tag_564:\n        /* \"#utility.yul\":13525:13529   */\n      dup2\n        /* \"#utility.yul\":13515:13551   */\n      tag_565\n      jumpi\n        /* \"#utility.yul\":13542:13543   */\n      0x00\n        /* \"#utility.yul\":13533:13543   */\n      swap1\n      pop\n        /* \"#utility.yul\":13544:13549   */\n      jump(tag_563)\n        /* \"#utility.yul\":13515:13551   */\n    tag_565:\n        /* \"#utility.yul\":13611:13615   */\n      dup2\n        /* \"#utility.yul\":13659:13660   */\n      0x01\n        /* \"#utility.yul\":13654:13681   */\n      dup2\n      eq\n      tag_567\n      jumpi\n        /* \"#utility.yul\":13695:13696   */\n      0x02\n        /* \"#utility.yul\":13690:13881   */\n      dup2\n      eq\n      tag_568\n      jumpi\n        /* \"#utility.yul\":13604:13881   */\n      jump(tag_566)\n        /* \"#utility.yul\":13654:13681   */\n    tag_567:\n        /* \"#utility.yul\":13672:13673   */\n      0x01\n        /* \"#utility.yul\":13663:13673   */\n      swap2\n      pop\n        /* \"#utility.yul\":13674:13679   */\n      pop\n      jump(tag_563)\n        /* \"#utility.yul\":13690:13881   */\n    tag_568:\n        /* \"#utility.yul\":13735:13738   */\n      0xff\n        /* \"#utility.yul\":13725:13733   */\n      dup5\n        /* \"#utility.yul\":13722:13739   */\n      gt\n        /* \"#utility.yul\":13719:13762   */\n      iszero\n      tag_569\n      jumpi\n        /* \"#utility.yul\":13742:13760   */\n      tag_570\n      tag_408\n      jump\t// in\n    tag_570:\n        /* \"#utility.yul\":13719:13762   */\n    tag_569:\n        /* \"#utility.yul\":13791:13799   */\n      dup4\n        /* \"#utility.yul\":13788:13789   */\n      0x02\n        /* \"#utility.yul\":13784:13800   */\n      exp\n        /* \"#utility.yul\":13775:13800   */\n      swap2\n      pop\n        /* \"#utility.yul\":13826:13829   */\n      dup5\n        /* \"#utility.yul\":13819:13824   */\n      dup3\n        /* \"#utility.yul\":13816:13830   */\n      gt\n        /* \"#utility.yul\":13813:13853   */\n      iszero\n      tag_571\n      jumpi\n        /* \"#utility.yul\":13833:13851   */\n      tag_572\n      tag_408\n      jump\t// in\n    tag_572:\n        /* \"#utility.yul\":13813:13853   */\n    tag_571:\n        /* \"#utility.yul\":13866:13871   */\n      pop\n      jump(tag_563)\n        /* \"#utility.yul\":13604:13881   */\n    tag_566:\n      pop\n        /* \"#utility.yul\":13990:13992   */\n      0x20\n        /* \"#utility.yul\":13980:13988   */\n      dup4\n        /* \"#utility.yul\":13977:13993   */\n      lt\n        /* \"#utility.yul\":13971:13974   */\n      0x0133\n        /* \"#utility.yul\":13965:13969   */\n      dup4\n        /* \"#utility.yul\":13962:13975   */\n      lt\n        /* \"#utility.yul\":13958:13994   */\n      and\n        /* \"#utility.yul\":13940:13942   */\n      0x4e\n        /* \"#utility.yul\":13930:13938   */\n      dup5\n        /* \"#utility.yul\":13927:13943   */\n      lt\n        /* \"#utility.yul\":13922:13924   */\n      0x0b\n        /* \"#utility.yul\":13916:13920   */\n      dup5\n        /* \"#utility.yul\":13913:13925   */\n      lt\n        /* \"#utility.yul\":13909:13944   */\n      and\n        /* \"#utility.yul\":13893:14004   */\n      or\n        /* \"#utility.yul\":13890:14136   */\n      iszero\n      tag_573\n      jumpi\n        /* \"#utility.yul\":14046:14054   */\n      dup3\n        /* \"#utility.yul\":14040:14044   */\n      dup3\n        /* \"#utility.yul\":14036:14055   */\n      exp\n        /* \"#utility.yul\":14027:14055   */\n      swap1\n      pop\n        /* \"#utility.yul\":14081:14084   */\n      dup4\n        /* \"#utility.yul\":14074:14079   */\n      dup2\n        /* \"#utility.yul\":14071:14085   */\n      gt\n        /* \"#utility.yul\":14068:14108   */\n      iszero\n      tag_574\n      jumpi\n        /* \"#utility.yul\":14088:14106   */\n      tag_575\n      tag_408\n      jump\t// in\n    tag_575:\n        /* \"#utility.yul\":14068:14108   */\n    tag_574:\n        /* \"#utility.yul\":14121:14126   */\n      jump(tag_563)\n        /* \"#utility.yul\":13890:14136   */\n    tag_573:\n        /* \"#utility.yul\":14161:14203   */\n      tag_576\n        /* \"#utility.yul\":14199:14202   */\n      dup5\n        /* \"#utility.yul\":14189:14197   */\n      dup5\n        /* \"#utility.yul\":14183:14187   */\n      dup5\n        /* \"#utility.yul\":14180:14181   */\n      0x01\n        /* \"#utility.yul\":14161:14203   */\n      tag_414\n      jump\t// in\n    tag_576:\n        /* \"#utility.yul\":14146:14203   */\n      swap3\n      pop\n      swap1\n      pop\n        /* \"#utility.yul\":14235:14239   */\n      dup2\n        /* \"#utility.yul\":14230:14233   */\n      dup5\n        /* \"#utility.yul\":14226:14240   */\n      div\n        /* \"#utility.yul\":14219:14224   */\n      dup2\n        /* \"#utility.yul\":14216:14241   */\n      gt\n        /* \"#utility.yul\":14213:14264   */\n      iszero\n      tag_577\n      jumpi\n        /* \"#utility.yul\":14244:14262   */\n      tag_578\n      tag_408\n      jump\t// in\n    tag_578:\n        /* \"#utility.yul\":14213:14264   */\n    tag_577:\n        /* \"#utility.yul\":14293:14297   */\n      dup2\n        /* \"#utility.yul\":14286:14291   */\n      dup2\n        /* \"#utility.yul\":14282:14298   */\n      mul\n        /* \"#utility.yul\":14273:14298   */\n      swap1\n      pop\n        /* \"#utility.yul\":13231:14304   */\n    tag_563:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14310:14591   */\n    tag_248:\n        /* \"#utility.yul\":14368:14373   */\n      0x00\n        /* \"#utility.yul\":14392:14415   */\n      tag_580\n        /* \"#utility.yul\":14410:14414   */\n      dup3\n        /* \"#utility.yul\":14392:14415   */\n      tag_380\n      jump\t// in\n    tag_580:\n        /* \"#utility.yul\":14384:14415   */\n      swap2\n      pop\n        /* \"#utility.yul\":14436:14461   */\n      tag_581\n        /* \"#utility.yul\":14452:14460   */\n      dup4\n        /* \"#utility.yul\":14436:14461   */\n      tag_398\n      jump\t// in\n    tag_581:\n        /* \"#utility.yul\":14424:14461   */\n      swap3\n      pop\n        /* \"#utility.yul\":14480:14584   */\n      tag_582\n        /* \"#utility.yul\":14517:14583   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":14507:14515   */\n      dup5\n        /* \"#utility.yul\":14501:14505   */\n      dup5\n        /* \"#utility.yul\":14480:14584   */\n      tag_415\n      jump\t// in\n    tag_582:\n        /* \"#utility.yul\":14471:14584   */\n      swap1\n      pop\n        /* \"#utility.yul\":14310:14591   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14597:14791   */\n    tag_265:\n        /* \"#utility.yul\":14637:14641   */\n      0x00\n        /* \"#utility.yul\":14657:14677   */\n      tag_584\n        /* \"#utility.yul\":14675:14676   */\n      dup3\n        /* \"#utility.yul\":14657:14677   */\n      tag_380\n      jump\t// in\n    tag_584:\n        /* \"#utility.yul\":14652:14677   */\n      swap2\n      pop\n        /* \"#utility.yul\":14691:14711   */\n      tag_585\n        /* \"#utility.yul\":14709:14710   */\n      dup4\n        /* \"#utility.yul\":14691:14711   */\n      tag_380\n      jump\t// in\n    tag_585:\n        /* \"#utility.yul\":14686:14711   */\n      swap3\n      pop\n        /* \"#utility.yul\":14735:14736   */\n      dup3\n        /* \"#utility.yul\":14732:14733   */\n      dup3\n        /* \"#utility.yul\":14728:14737   */\n      sub\n        /* \"#utility.yul\":14720:14737   */\n      swap1\n      pop\n        /* \"#utility.yul\":14759:14760   */\n      dup2\n        /* \"#utility.yul\":14753:14757   */\n      dup2\n        /* \"#utility.yul\":14750:14761   */\n      gt\n        /* \"#utility.yul\":14747:14784   */\n      iszero\n      tag_586\n      jumpi\n        /* \"#utility.yul\":14764:14782   */\n      tag_587\n      tag_408\n      jump\t// in\n    tag_587:\n        /* \"#utility.yul\":14747:14784   */\n    tag_586:\n        /* \"#utility.yul\":14597:14791   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14797:15129   */\n    tag_304:\n        /* \"#utility.yul\":14918:14922   */\n      0x00\n        /* \"#utility.yul\":14956:14958   */\n      0x40\n        /* \"#utility.yul\":14945:14954   */\n      dup3\n        /* \"#utility.yul\":14941:14959   */\n      add\n        /* \"#utility.yul\":14933:14959   */\n      swap1\n      pop\n        /* \"#utility.yul\":14969:15040   */\n      tag_589\n        /* \"#utility.yul\":15037:15038   */\n      0x00\n        /* \"#utility.yul\":15026:15035   */\n      dup4\n        /* \"#utility.yul\":15022:15039   */\n      add\n        /* \"#utility.yul\":15013:15019   */\n      dup6\n        /* \"#utility.yul\":14969:15040   */\n      tag_381\n      jump\t// in\n    tag_589:\n        /* \"#utility.yul\":15050:15122   */\n      tag_590\n        /* \"#utility.yul\":15118:15120   */\n      0x20\n        /* \"#utility.yul\":15107:15116   */\n      dup4\n        /* \"#utility.yul\":15103:15121   */\n      add\n        /* \"#utility.yul\":15094:15100   */\n      dup5\n        /* \"#utility.yul\":15050:15122   */\n      tag_381\n      jump\t// in\n    tag_590:\n        /* \"#utility.yul\":14797:15129   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15135:15315   */\n    tag_313:\n        /* \"#utility.yul\":15183:15260   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":15180:15181   */\n      0x00\n        /* \"#utility.yul\":15173:15261   */\n      mstore\n        /* \"#utility.yul\":15280:15284   */\n      0x12\n        /* \"#utility.yul\":15277:15278   */\n      0x04\n        /* \"#utility.yul\":15270:15285   */\n      mstore\n        /* \"#utility.yul\":15304:15308   */\n      0x24\n        /* \"#utility.yul\":15301:15302   */\n      0x00\n        /* \"#utility.yul\":15294:15309   */\n      revert\n        /* \"#utility.yul\":15321:15653   */\n    tag_335:\n        /* \"#utility.yul\":15442:15446   */\n      0x00\n        /* \"#utility.yul\":15480:15482   */\n      0x40\n        /* \"#utility.yul\":15469:15478   */\n      dup3\n        /* \"#utility.yul\":15465:15483   */\n      add\n        /* \"#utility.yul\":15457:15483   */\n      swap1\n      pop\n        /* \"#utility.yul\":15493:15564   */\n      tag_593\n        /* \"#utility.yul\":15561:15562   */\n      0x00\n        /* \"#utility.yul\":15550:15559   */\n      dup4\n        /* \"#utility.yul\":15546:15563   */\n      add\n        /* \"#utility.yul\":15537:15543   */\n      dup6\n        /* \"#utility.yul\":15493:15564   */\n      tag_400\n      jump\t// in\n    tag_593:\n        /* \"#utility.yul\":15574:15646   */\n      tag_594\n        /* \"#utility.yul\":15642:15644   */\n      0x20\n        /* \"#utility.yul\":15631:15640   */\n      dup4\n        /* \"#utility.yul\":15627:15645   */\n      add\n        /* \"#utility.yul\":15618:15624   */\n      dup5\n        /* \"#utility.yul\":15574:15646   */\n      tag_381\n      jump\t// in\n    tag_594:\n        /* \"#utility.yul\":15321:15653   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15659:15839   */\n    tag_345:\n        /* \"#utility.yul\":15707:15784   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":15704:15705   */\n      0x00\n        /* \"#utility.yul\":15697:15785   */\n      mstore\n        /* \"#utility.yul\":15804:15808   */\n      0x21\n        /* \"#utility.yul\":15801:15802   */\n      0x04\n        /* \"#utility.yul\":15794:15809   */\n      mstore\n        /* \"#utility.yul\":15828:15832   */\n      0x24\n        /* \"#utility.yul\":15825:15826   */\n      0x00\n        /* \"#utility.yul\":15818:15833   */\n      revert\n        /* \"#utility.yul\":15845:16015   */\n    tag_347:\n        /* \"#utility.yul\":15875:15876   */\n      0x00\n        /* \"#utility.yul\":15892:15910   */\n      tag_597\n        /* \"#utility.yul\":15908:15909   */\n      dup3\n        /* \"#utility.yul\":15892:15910   */\n      tag_398\n      jump\t// in\n    tag_597:\n        /* \"#utility.yul\":15887:15910   */\n      swap2\n      pop\n        /* \"#utility.yul\":15924:15942   */\n      tag_598\n        /* \"#utility.yul\":15940:15941   */\n      dup4\n        /* \"#utility.yul\":15924:15942   */\n      tag_398\n      jump\t// in\n    tag_598:\n        /* \"#utility.yul\":15919:15942   */\n      swap3\n      pop\n        /* \"#utility.yul\":15961:15962   */\n      dup3\n        /* \"#utility.yul\":15951:15986   */\n      tag_599\n      jumpi\n        /* \"#utility.yul\":15966:15984   */\n      tag_600\n      tag_313\n      jump\t// in\n    tag_600:\n        /* \"#utility.yul\":15951:15986   */\n    tag_599:\n        /* \"#utility.yul\":16007:16008   */\n      dup3\n        /* \"#utility.yul\":16004:16005   */\n      dup3\n        /* \"#utility.yul\":16000:16009   */\n      mod\n        /* \"#utility.yul\":15995:16009   */\n      swap1\n      pop\n        /* \"#utility.yul\":15845:16015   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16021:16137   */\n    tag_416:\n        /* \"#utility.yul\":16091:16112   */\n      tag_602\n        /* \"#utility.yul\":16106:16111   */\n      dup2\n        /* \"#utility.yul\":16091:16112   */\n      tag_396\n      jump\t// in\n    tag_602:\n        /* \"#utility.yul\":16084:16089   */\n      dup2\n        /* \"#utility.yul\":16081:16113   */\n      eq\n        /* \"#utility.yul\":16071:16131   */\n      tag_603\n      jumpi\n        /* \"#utility.yul\":16127:16128   */\n      0x00\n        /* \"#utility.yul\":16124:16125   */\n      dup1\n        /* \"#utility.yul\":16117:16129   */\n      revert\n        /* \"#utility.yul\":16071:16131   */\n    tag_603:\n        /* \"#utility.yul\":16021:16137   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16143:16280   */\n    tag_417:\n        /* \"#utility.yul\":16197:16202   */\n      0x00\n        /* \"#utility.yul\":16228:16234   */\n      dup2\n        /* \"#utility.yul\":16222:16235   */\n      mload\n        /* \"#utility.yul\":16213:16235   */\n      swap1\n      pop\n        /* \"#utility.yul\":16244:16274   */\n      tag_605\n        /* \"#utility.yul\":16268:16273   */\n      dup2\n        /* \"#utility.yul\":16244:16274   */\n      tag_416\n      jump\t// in\n    tag_605:\n        /* \"#utility.yul\":16143:16280   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16286:16631   */\n    tag_353:\n        /* \"#utility.yul\":16353:16359   */\n      0x00\n        /* \"#utility.yul\":16402:16404   */\n      0x20\n        /* \"#utility.yul\":16390:16399   */\n      dup3\n        /* \"#utility.yul\":16381:16388   */\n      dup5\n        /* \"#utility.yul\":16377:16400   */\n      sub\n        /* \"#utility.yul\":16373:16405   */\n      slt\n        /* \"#utility.yul\":16370:16489   */\n      iszero\n      tag_607\n      jumpi\n        /* \"#utility.yul\":16408:16487   */\n      tag_608\n      tag_388\n      jump\t// in\n    tag_608:\n        /* \"#utility.yul\":16370:16489   */\n    tag_607:\n        /* \"#utility.yul\":16528:16529   */\n      0x00\n        /* \"#utility.yul\":16553:16614   */\n      tag_609\n        /* \"#utility.yul\":16606:16613   */\n      dup5\n        /* \"#utility.yul\":16597:16603   */\n      dup3\n        /* \"#utility.yul\":16586:16595   */\n      dup6\n        /* \"#utility.yul\":16582:16604   */\n      add\n        /* \"#utility.yul\":16553:16614   */\n      tag_417\n      jump\t// in\n    tag_609:\n        /* \"#utility.yul\":16543:16614   */\n      swap2\n      pop\n        /* \"#utility.yul\":16499:16624   */\n      pop\n        /* \"#utility.yul\":16286:16631   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16637:16735   */\n    tag_418:\n        /* \"#utility.yul\":16688:16694   */\n      0x00\n        /* \"#utility.yul\":16722:16727   */\n      dup2\n        /* \"#utility.yul\":16716:16728   */\n      mload\n        /* \"#utility.yul\":16706:16728   */\n      swap1\n      pop\n        /* \"#utility.yul\":16637:16735   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16741:16888   */\n    tag_419:\n        /* \"#utility.yul\":16842:16853   */\n      0x00\n        /* \"#utility.yul\":16879:16882   */\n      dup2\n        /* \"#utility.yul\":16864:16882   */\n      swap1\n      pop\n        /* \"#utility.yul\":16741:16888   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16894:17280   */\n    tag_420:\n        /* \"#utility.yul\":16998:17001   */\n      0x00\n        /* \"#utility.yul\":17026:17064   */\n      tag_613\n        /* \"#utility.yul\":17058:17063   */\n      dup3\n        /* \"#utility.yul\":17026:17064   */\n      tag_418\n      jump\t// in\n    tag_613:\n        /* \"#utility.yul\":17080:17168   */\n      tag_614\n        /* \"#utility.yul\":17161:17167   */\n      dup2\n        /* \"#utility.yul\":17156:17159   */\n      dup6\n        /* \"#utility.yul\":17080:17168   */\n      tag_419\n      jump\t// in\n    tag_614:\n        /* \"#utility.yul\":17073:17168   */\n      swap4\n      pop\n        /* \"#utility.yul\":17177:17242   */\n      tag_615\n        /* \"#utility.yul\":17235:17241   */\n      dup2\n        /* \"#utility.yul\":17230:17233   */\n      dup6\n        /* \"#utility.yul\":17223:17227   */\n      0x20\n        /* \"#utility.yul\":17216:17221   */\n      dup7\n        /* \"#utility.yul\":17212:17228   */\n      add\n        /* \"#utility.yul\":17177:17242   */\n      tag_384\n      jump\t// in\n    tag_615:\n        /* \"#utility.yul\":17267:17273   */\n      dup1\n        /* \"#utility.yul\":17262:17265   */\n      dup5\n        /* \"#utility.yul\":17258:17274   */\n      add\n        /* \"#utility.yul\":17251:17274   */\n      swap2\n      pop\n        /* \"#utility.yul\":17002:17280   */\n      pop\n        /* \"#utility.yul\":16894:17280   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17286:17557   */\n    tag_363:\n        /* \"#utility.yul\":17416:17419   */\n      0x00\n        /* \"#utility.yul\":17438:17531   */\n      tag_617\n        /* \"#utility.yul\":17527:17530   */\n      dup3\n        /* \"#utility.yul\":17518:17524   */\n      dup5\n        /* \"#utility.yul\":17438:17531   */\n      tag_420\n      jump\t// in\n    tag_617:\n        /* \"#utility.yul\":17431:17531   */\n      swap2\n      pop\n        /* \"#utility.yul\":17548:17551   */\n      dup2\n        /* \"#utility.yul\":17541:17551   */\n      swap1\n      pop\n        /* \"#utility.yul\":17286:17557   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa264697066735822122003634230a2ae1b2e8a1dc9432523ae5c48734f5090ac093502859b70f72cf95564736f6c63430008190033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1135": {
									"entryPoint": null,
									"id": 1135,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_3472": {
									"entryPoint": null,
									"id": 3472,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_506": {
									"entryPoint": null,
									"id": 506,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_tryGetAssetDecimals_1202": {
									"entryPoint": 391,
									"id": 1202,
									"parameterSlots": 1,
									"returnSlots": 2
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 730,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256_fromMemory": {
									"entryPoint": 1696,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 750,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 1716,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 1604,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 1652,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_dataslot_t_string_storage": {
									"entryPoint": 941,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 1570,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 793,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 1580,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_t_string_storage": {
									"entryPoint": 1226,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"cleanup_t_address": {
									"entryPoint": 691,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 660,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 1067,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"clear_storage_range_t_bytes1": {
									"entryPoint": 1192,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"convert_t_uint256_to_t_uint256": {
									"entryPoint": 1085,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 1363,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 1590,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"divide_by_32_ceil": {
									"entryPoint": 959,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 893,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": 1336,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"identity": {
									"entryPoint": 1076,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mask_bytes_dynamic": {
									"entryPoint": 1308,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x22": {
									"entryPoint": 848,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 803,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"prepare_store_t_uint256": {
									"entryPoint": 1118,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 656,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"shift_left_dynamic": {
									"entryPoint": 974,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"shift_right_unsigned_dynamic": {
									"entryPoint": 1296,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"storage_set_to_zero_t_uint256": {
									"entryPoint": 1168,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"update_byte_slice_dynamic32": {
									"entryPoint": 986,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"update_storage_value_t_uint256_to_t_uint256": {
									"entryPoint": 1127,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 708,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 1674,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"zero_value_for_split_t_uint256": {
									"entryPoint": 1164,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:8131:13",
										"nodeType": "YulBlock",
										"src": "0:8131:13",
										"statements": [
											{
												"body": {
													"nativeSrc": "47:35:13",
													"nodeType": "YulBlock",
													"src": "47:35:13",
													"statements": [
														{
															"nativeSrc": "57:19:13",
															"nodeType": "YulAssignment",
															"src": "57:19:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "73:2:13",
																		"nodeType": "YulLiteral",
																		"src": "73:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "67:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:13"
																},
																"nativeSrc": "67:9:13",
																"nodeType": "YulFunctionCall",
																"src": "67:9:13"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "57:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:13"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "7:75:13",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "40:6:13",
														"nodeType": "YulTypedName",
														"src": "40:6:13",
														"type": ""
													}
												],
												"src": "7:75:13"
											},
											{
												"body": {
													"nativeSrc": "177:28:13",
													"nodeType": "YulBlock",
													"src": "177:28:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "194:1:13",
																		"nodeType": "YulLiteral",
																		"src": "194:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "197:1:13",
																		"nodeType": "YulLiteral",
																		"src": "197:1:13",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "187:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:13"
																},
																"nativeSrc": "187:12:13",
																"nodeType": "YulFunctionCall",
																"src": "187:12:13"
															},
															"nativeSrc": "187:12:13",
															"nodeType": "YulExpressionStatement",
															"src": "187:12:13"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "88:117:13",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:13"
											},
											{
												"body": {
													"nativeSrc": "300:28:13",
													"nodeType": "YulBlock",
													"src": "300:28:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "317:1:13",
																		"nodeType": "YulLiteral",
																		"src": "317:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "320:1:13",
																		"nodeType": "YulLiteral",
																		"src": "320:1:13",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "310:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:13"
																},
																"nativeSrc": "310:12:13",
																"nodeType": "YulFunctionCall",
																"src": "310:12:13"
															},
															"nativeSrc": "310:12:13",
															"nodeType": "YulExpressionStatement",
															"src": "310:12:13"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "211:117:13",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:13"
											},
											{
												"body": {
													"nativeSrc": "379:81:13",
													"nodeType": "YulBlock",
													"src": "379:81:13",
													"statements": [
														{
															"nativeSrc": "389:65:13",
															"nodeType": "YulAssignment",
															"src": "389:65:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "404:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "411:42:13",
																		"nodeType": "YulLiteral",
																		"src": "411:42:13",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "400:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:13"
																},
																"nativeSrc": "400:54:13",
																"nodeType": "YulFunctionCall",
																"src": "400:54:13"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "389:7:13",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:13"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nativeSrc": "334:126:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "361:5:13",
														"nodeType": "YulTypedName",
														"src": "361:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "371:7:13",
														"nodeType": "YulTypedName",
														"src": "371:7:13",
														"type": ""
													}
												],
												"src": "334:126:13"
											},
											{
												"body": {
													"nativeSrc": "511:51:13",
													"nodeType": "YulBlock",
													"src": "511:51:13",
													"statements": [
														{
															"nativeSrc": "521:35:13",
															"nodeType": "YulAssignment",
															"src": "521:35:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "550:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "532:17:13",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:13"
																},
																"nativeSrc": "532:24:13",
																"nodeType": "YulFunctionCall",
																"src": "532:24:13"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "521:7:13",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:13"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nativeSrc": "466:96:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "493:5:13",
														"nodeType": "YulTypedName",
														"src": "493:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "503:7:13",
														"nodeType": "YulTypedName",
														"src": "503:7:13",
														"type": ""
													}
												],
												"src": "466:96:13"
											},
											{
												"body": {
													"nativeSrc": "611:79:13",
													"nodeType": "YulBlock",
													"src": "611:79:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "668:16:13",
																"nodeType": "YulBlock",
																"src": "668:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "677:1:13",
																					"nodeType": "YulLiteral",
																					"src": "677:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "680:1:13",
																					"nodeType": "YulLiteral",
																					"src": "680:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "670:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:13"
																			},
																			"nativeSrc": "670:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:13"
																		},
																		"nativeSrc": "670:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "634:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "659:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:13"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nativeSrc": "641:17:13",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:13"
																				},
																				"nativeSrc": "641:24:13",
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "631:2:13",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:13"
																		},
																		"nativeSrc": "631:35:13",
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "624:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:13"
																},
																"nativeSrc": "624:43:13",
																"nodeType": "YulFunctionCall",
																"src": "624:43:13"
															},
															"nativeSrc": "621:63:13",
															"nodeType": "YulIf",
															"src": "621:63:13"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nativeSrc": "568:122:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "604:5:13",
														"nodeType": "YulTypedName",
														"src": "604:5:13",
														"type": ""
													}
												],
												"src": "568:122:13"
											},
											{
												"body": {
													"nativeSrc": "759:80:13",
													"nodeType": "YulBlock",
													"src": "759:80:13",
													"statements": [
														{
															"nativeSrc": "769:22:13",
															"nodeType": "YulAssignment",
															"src": "769:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "784:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "784:6:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "778:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "778:5:13"
																},
																"nativeSrc": "778:13:13",
																"nodeType": "YulFunctionCall",
																"src": "778:13:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "769:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "769:5:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "827:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "827:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nativeSrc": "800:26:13",
																	"nodeType": "YulIdentifier",
																	"src": "800:26:13"
																},
																"nativeSrc": "800:33:13",
																"nodeType": "YulFunctionCall",
																"src": "800:33:13"
															},
															"nativeSrc": "800:33:13",
															"nodeType": "YulExpressionStatement",
															"src": "800:33:13"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nativeSrc": "696:143:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "737:6:13",
														"nodeType": "YulTypedName",
														"src": "737:6:13",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "745:3:13",
														"nodeType": "YulTypedName",
														"src": "745:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "753:5:13",
														"nodeType": "YulTypedName",
														"src": "753:5:13",
														"type": ""
													}
												],
												"src": "696:143:13"
											},
											{
												"body": {
													"nativeSrc": "922:274:13",
													"nodeType": "YulBlock",
													"src": "922:274:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "968:83:13",
																"nodeType": "YulBlock",
																"src": "968:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "970:77:13",
																				"nodeType": "YulIdentifier",
																				"src": "970:77:13"
																			},
																			"nativeSrc": "970:79:13",
																			"nodeType": "YulFunctionCall",
																			"src": "970:79:13"
																		},
																		"nativeSrc": "970:79:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "970:79:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "943:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "943:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "952:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "952:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "939:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "939:3:13"
																		},
																		"nativeSrc": "939:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "939:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "964:2:13",
																		"nodeType": "YulLiteral",
																		"src": "964:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "935:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "935:3:13"
																},
																"nativeSrc": "935:32:13",
																"nodeType": "YulFunctionCall",
																"src": "935:32:13"
															},
															"nativeSrc": "932:119:13",
															"nodeType": "YulIf",
															"src": "932:119:13"
														},
														{
															"nativeSrc": "1061:128:13",
															"nodeType": "YulBlock",
															"src": "1061:128:13",
															"statements": [
																{
																	"nativeSrc": "1076:15:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "1076:15:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "1090:1:13",
																		"nodeType": "YulLiteral",
																		"src": "1090:1:13",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "1080:6:13",
																			"nodeType": "YulTypedName",
																			"src": "1080:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "1105:74:13",
																	"nodeType": "YulAssignment",
																	"src": "1105:74:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "1151:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "1151:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "1162:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "1162:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "1147:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "1147:3:13"
																				},
																				"nativeSrc": "1147:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "1147:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1171:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "1171:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nativeSrc": "1115:31:13",
																			"nodeType": "YulIdentifier",
																			"src": "1115:31:13"
																		},
																		"nativeSrc": "1115:64:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1115:64:13"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "1105:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "1105:6:13"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nativeSrc": "845:351:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "892:9:13",
														"nodeType": "YulTypedName",
														"src": "892:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "903:7:13",
														"nodeType": "YulTypedName",
														"src": "903:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "915:6:13",
														"nodeType": "YulTypedName",
														"src": "915:6:13",
														"type": ""
													}
												],
												"src": "845:351:13"
											},
											{
												"body": {
													"nativeSrc": "1261:40:13",
													"nodeType": "YulBlock",
													"src": "1261:40:13",
													"statements": [
														{
															"nativeSrc": "1272:22:13",
															"nodeType": "YulAssignment",
															"src": "1272:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1288:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "1288:5:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1282:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "1282:5:13"
																},
																"nativeSrc": "1282:12:13",
																"nodeType": "YulFunctionCall",
																"src": "1282:12:13"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "1272:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1272:6:13"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "1202:99:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1244:5:13",
														"nodeType": "YulTypedName",
														"src": "1244:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "1254:6:13",
														"nodeType": "YulTypedName",
														"src": "1254:6:13",
														"type": ""
													}
												],
												"src": "1202:99:13"
											},
											{
												"body": {
													"nativeSrc": "1335:152:13",
													"nodeType": "YulBlock",
													"src": "1335:152:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1352:1:13",
																		"nodeType": "YulLiteral",
																		"src": "1352:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1355:77:13",
																		"nodeType": "YulLiteral",
																		"src": "1355:77:13",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1345:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1345:6:13"
																},
																"nativeSrc": "1345:88:13",
																"nodeType": "YulFunctionCall",
																"src": "1345:88:13"
															},
															"nativeSrc": "1345:88:13",
															"nodeType": "YulExpressionStatement",
															"src": "1345:88:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1449:1:13",
																		"nodeType": "YulLiteral",
																		"src": "1449:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1452:4:13",
																		"nodeType": "YulLiteral",
																		"src": "1452:4:13",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1442:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1442:6:13"
																},
																"nativeSrc": "1442:15:13",
																"nodeType": "YulFunctionCall",
																"src": "1442:15:13"
															},
															"nativeSrc": "1442:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "1442:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1473:1:13",
																		"nodeType": "YulLiteral",
																		"src": "1473:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1476:4:13",
																		"nodeType": "YulLiteral",
																		"src": "1476:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1466:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1466:6:13"
																},
																"nativeSrc": "1466:15:13",
																"nodeType": "YulFunctionCall",
																"src": "1466:15:13"
															},
															"nativeSrc": "1466:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "1466:15:13"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "1307:180:13",
												"nodeType": "YulFunctionDefinition",
												"src": "1307:180:13"
											},
											{
												"body": {
													"nativeSrc": "1521:152:13",
													"nodeType": "YulBlock",
													"src": "1521:152:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1538:1:13",
																		"nodeType": "YulLiteral",
																		"src": "1538:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1541:77:13",
																		"nodeType": "YulLiteral",
																		"src": "1541:77:13",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1531:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1531:6:13"
																},
																"nativeSrc": "1531:88:13",
																"nodeType": "YulFunctionCall",
																"src": "1531:88:13"
															},
															"nativeSrc": "1531:88:13",
															"nodeType": "YulExpressionStatement",
															"src": "1531:88:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1635:1:13",
																		"nodeType": "YulLiteral",
																		"src": "1635:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1638:4:13",
																		"nodeType": "YulLiteral",
																		"src": "1638:4:13",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1628:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1628:6:13"
																},
																"nativeSrc": "1628:15:13",
																"nodeType": "YulFunctionCall",
																"src": "1628:15:13"
															},
															"nativeSrc": "1628:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "1628:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1659:1:13",
																		"nodeType": "YulLiteral",
																		"src": "1659:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1662:4:13",
																		"nodeType": "YulLiteral",
																		"src": "1662:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1652:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1652:6:13"
																},
																"nativeSrc": "1652:15:13",
																"nodeType": "YulFunctionCall",
																"src": "1652:15:13"
															},
															"nativeSrc": "1652:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "1652:15:13"
														}
													]
												},
												"name": "panic_error_0x22",
												"nativeSrc": "1493:180:13",
												"nodeType": "YulFunctionDefinition",
												"src": "1493:180:13"
											},
											{
												"body": {
													"nativeSrc": "1730:269:13",
													"nodeType": "YulBlock",
													"src": "1730:269:13",
													"statements": [
														{
															"nativeSrc": "1740:22:13",
															"nodeType": "YulAssignment",
															"src": "1740:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "1754:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "1754:4:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1760:1:13",
																		"nodeType": "YulLiteral",
																		"src": "1760:1:13",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "1750:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "1750:3:13"
																},
																"nativeSrc": "1750:12:13",
																"nodeType": "YulFunctionCall",
																"src": "1750:12:13"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "1740:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1740:6:13"
																}
															]
														},
														{
															"nativeSrc": "1771:38:13",
															"nodeType": "YulVariableDeclaration",
															"src": "1771:38:13",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "1801:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "1801:4:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1807:1:13",
																		"nodeType": "YulLiteral",
																		"src": "1807:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "1797:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "1797:3:13"
																},
																"nativeSrc": "1797:12:13",
																"nodeType": "YulFunctionCall",
																"src": "1797:12:13"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "1775:18:13",
																	"nodeType": "YulTypedName",
																	"src": "1775:18:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1848:51:13",
																"nodeType": "YulBlock",
																"src": "1848:51:13",
																"statements": [
																	{
																		"nativeSrc": "1862:27:13",
																		"nodeType": "YulAssignment",
																		"src": "1862:27:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "1876:6:13",
																					"nodeType": "YulIdentifier",
																					"src": "1876:6:13"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1884:4:13",
																					"nodeType": "YulLiteral",
																					"src": "1884:4:13",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "1872:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "1872:3:13"
																			},
																			"nativeSrc": "1872:17:13",
																			"nodeType": "YulFunctionCall",
																			"src": "1872:17:13"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "1862:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "1862:6:13"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "1828:18:13",
																		"nodeType": "YulIdentifier",
																		"src": "1828:18:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "1821:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1821:6:13"
																},
																"nativeSrc": "1821:26:13",
																"nodeType": "YulFunctionCall",
																"src": "1821:26:13"
															},
															"nativeSrc": "1818:81:13",
															"nodeType": "YulIf",
															"src": "1818:81:13"
														},
														{
															"body": {
																"nativeSrc": "1951:42:13",
																"nodeType": "YulBlock",
																"src": "1951:42:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nativeSrc": "1965:16:13",
																				"nodeType": "YulIdentifier",
																				"src": "1965:16:13"
																			},
																			"nativeSrc": "1965:18:13",
																			"nodeType": "YulFunctionCall",
																			"src": "1965:18:13"
																		},
																		"nativeSrc": "1965:18:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "1965:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "1915:18:13",
																		"nodeType": "YulIdentifier",
																		"src": "1915:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "1938:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "1938:6:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1946:2:13",
																				"nodeType": "YulLiteral",
																				"src": "1946:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "1935:2:13",
																			"nodeType": "YulIdentifier",
																			"src": "1935:2:13"
																		},
																		"nativeSrc": "1935:14:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1935:14:13"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "1912:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "1912:2:13"
																},
																"nativeSrc": "1912:38:13",
																"nodeType": "YulFunctionCall",
																"src": "1912:38:13"
															},
															"nativeSrc": "1909:84:13",
															"nodeType": "YulIf",
															"src": "1909:84:13"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "1679:320:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "1714:4:13",
														"nodeType": "YulTypedName",
														"src": "1714:4:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "1723:6:13",
														"nodeType": "YulTypedName",
														"src": "1723:6:13",
														"type": ""
													}
												],
												"src": "1679:320:13"
											},
											{
												"body": {
													"nativeSrc": "2059:87:13",
													"nodeType": "YulBlock",
													"src": "2059:87:13",
													"statements": [
														{
															"nativeSrc": "2069:11:13",
															"nodeType": "YulAssignment",
															"src": "2069:11:13",
															"value": {
																"name": "ptr",
																"nativeSrc": "2077:3:13",
																"nodeType": "YulIdentifier",
																"src": "2077:3:13"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "2069:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "2069:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2097:1:13",
																		"nodeType": "YulLiteral",
																		"src": "2097:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nativeSrc": "2100:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "2100:3:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2090:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2090:6:13"
																},
																"nativeSrc": "2090:14:13",
																"nodeType": "YulFunctionCall",
																"src": "2090:14:13"
															},
															"nativeSrc": "2090:14:13",
															"nodeType": "YulExpressionStatement",
															"src": "2090:14:13"
														},
														{
															"nativeSrc": "2113:26:13",
															"nodeType": "YulAssignment",
															"src": "2113:26:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2131:1:13",
																		"nodeType": "YulLiteral",
																		"src": "2131:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2134:4:13",
																		"nodeType": "YulLiteral",
																		"src": "2134:4:13",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "2121:9:13",
																	"nodeType": "YulIdentifier",
																	"src": "2121:9:13"
																},
																"nativeSrc": "2121:18:13",
																"nodeType": "YulFunctionCall",
																"src": "2121:18:13"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "2113:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "2113:4:13"
																}
															]
														}
													]
												},
												"name": "array_dataslot_t_string_storage",
												"nativeSrc": "2005:141:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "2046:3:13",
														"nodeType": "YulTypedName",
														"src": "2046:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nativeSrc": "2054:4:13",
														"nodeType": "YulTypedName",
														"src": "2054:4:13",
														"type": ""
													}
												],
												"src": "2005:141:13"
											},
											{
												"body": {
													"nativeSrc": "2196:49:13",
													"nodeType": "YulBlock",
													"src": "2196:49:13",
													"statements": [
														{
															"nativeSrc": "2206:33:13",
															"nodeType": "YulAssignment",
															"src": "2206:33:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2224:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "2224:5:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2231:2:13",
																				"nodeType": "YulLiteral",
																				"src": "2231:2:13",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2220:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "2220:3:13"
																		},
																		"nativeSrc": "2220:14:13",
																		"nodeType": "YulFunctionCall",
																		"src": "2220:14:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2236:2:13",
																		"nodeType": "YulLiteral",
																		"src": "2236:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "2216:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "2216:3:13"
																},
																"nativeSrc": "2216:23:13",
																"nodeType": "YulFunctionCall",
																"src": "2216:23:13"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "2206:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2206:6:13"
																}
															]
														}
													]
												},
												"name": "divide_by_32_ceil",
												"nativeSrc": "2152:93:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2179:5:13",
														"nodeType": "YulTypedName",
														"src": "2179:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "2189:6:13",
														"nodeType": "YulTypedName",
														"src": "2189:6:13",
														"type": ""
													}
												],
												"src": "2152:93:13"
											},
											{
												"body": {
													"nativeSrc": "2304:54:13",
													"nodeType": "YulBlock",
													"src": "2304:54:13",
													"statements": [
														{
															"nativeSrc": "2314:37:13",
															"nodeType": "YulAssignment",
															"src": "2314:37:13",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nativeSrc": "2339:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "2339:4:13"
																	},
																	{
																		"name": "value",
																		"nativeSrc": "2345:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "2345:5:13"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "2335:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "2335:3:13"
																},
																"nativeSrc": "2335:16:13",
																"nodeType": "YulFunctionCall",
																"src": "2335:16:13"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nativeSrc": "2314:8:13",
																	"nodeType": "YulIdentifier",
																	"src": "2314:8:13"
																}
															]
														}
													]
												},
												"name": "shift_left_dynamic",
												"nativeSrc": "2251:107:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nativeSrc": "2279:4:13",
														"nodeType": "YulTypedName",
														"src": "2279:4:13",
														"type": ""
													},
													{
														"name": "value",
														"nativeSrc": "2285:5:13",
														"nodeType": "YulTypedName",
														"src": "2285:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nativeSrc": "2295:8:13",
														"nodeType": "YulTypedName",
														"src": "2295:8:13",
														"type": ""
													}
												],
												"src": "2251:107:13"
											},
											{
												"body": {
													"nativeSrc": "2440:317:13",
													"nodeType": "YulBlock",
													"src": "2440:317:13",
													"statements": [
														{
															"nativeSrc": "2450:35:13",
															"nodeType": "YulVariableDeclaration",
															"src": "2450:35:13",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBytes",
																		"nativeSrc": "2471:10:13",
																		"nodeType": "YulIdentifier",
																		"src": "2471:10:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2483:1:13",
																		"nodeType": "YulLiteral",
																		"src": "2483:1:13",
																		"type": "",
																		"value": "8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "2467:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "2467:3:13"
																},
																"nativeSrc": "2467:18:13",
																"nodeType": "YulFunctionCall",
																"src": "2467:18:13"
															},
															"variables": [
																{
																	"name": "shiftBits",
																	"nativeSrc": "2454:9:13",
																	"nodeType": "YulTypedName",
																	"src": "2454:9:13",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "2494:109:13",
															"nodeType": "YulVariableDeclaration",
															"src": "2494:109:13",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nativeSrc": "2525:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "2525:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2536:66:13",
																		"nodeType": "YulLiteral",
																		"src": "2536:66:13",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nativeSrc": "2506:18:13",
																	"nodeType": "YulIdentifier",
																	"src": "2506:18:13"
																},
																"nativeSrc": "2506:97:13",
																"nodeType": "YulFunctionCall",
																"src": "2506:97:13"
															},
															"variables": [
																{
																	"name": "mask",
																	"nativeSrc": "2498:4:13",
																	"nodeType": "YulTypedName",
																	"src": "2498:4:13",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "2612:51:13",
															"nodeType": "YulAssignment",
															"src": "2612:51:13",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nativeSrc": "2643:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "2643:9:13"
																	},
																	{
																		"name": "toInsert",
																		"nativeSrc": "2654:8:13",
																		"nodeType": "YulIdentifier",
																		"src": "2654:8:13"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nativeSrc": "2624:18:13",
																	"nodeType": "YulIdentifier",
																	"src": "2624:18:13"
																},
																"nativeSrc": "2624:39:13",
																"nodeType": "YulFunctionCall",
																"src": "2624:39:13"
															},
															"variableNames": [
																{
																	"name": "toInsert",
																	"nativeSrc": "2612:8:13",
																	"nodeType": "YulIdentifier",
																	"src": "2612:8:13"
																}
															]
														},
														{
															"nativeSrc": "2672:30:13",
															"nodeType": "YulAssignment",
															"src": "2672:30:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2685:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "2685:5:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "mask",
																				"nativeSrc": "2696:4:13",
																				"nodeType": "YulIdentifier",
																				"src": "2696:4:13"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "2692:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "2692:3:13"
																		},
																		"nativeSrc": "2692:9:13",
																		"nodeType": "YulFunctionCall",
																		"src": "2692:9:13"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "2681:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "2681:3:13"
																},
																"nativeSrc": "2681:21:13",
																"nodeType": "YulFunctionCall",
																"src": "2681:21:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "2672:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "2672:5:13"
																}
															]
														},
														{
															"nativeSrc": "2711:40:13",
															"nodeType": "YulAssignment",
															"src": "2711:40:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2724:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "2724:5:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "toInsert",
																				"nativeSrc": "2735:8:13",
																				"nodeType": "YulIdentifier",
																				"src": "2735:8:13"
																			},
																			{
																				"name": "mask",
																				"nativeSrc": "2745:4:13",
																				"nodeType": "YulIdentifier",
																				"src": "2745:4:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "2731:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "2731:3:13"
																		},
																		"nativeSrc": "2731:19:13",
																		"nodeType": "YulFunctionCall",
																		"src": "2731:19:13"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "2721:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "2721:2:13"
																},
																"nativeSrc": "2721:30:13",
																"nodeType": "YulFunctionCall",
																"src": "2721:30:13"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "2711:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2711:6:13"
																}
															]
														}
													]
												},
												"name": "update_byte_slice_dynamic32",
												"nativeSrc": "2364:393:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2401:5:13",
														"nodeType": "YulTypedName",
														"src": "2401:5:13",
														"type": ""
													},
													{
														"name": "shiftBytes",
														"nativeSrc": "2408:10:13",
														"nodeType": "YulTypedName",
														"src": "2408:10:13",
														"type": ""
													},
													{
														"name": "toInsert",
														"nativeSrc": "2420:8:13",
														"nodeType": "YulTypedName",
														"src": "2420:8:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "2433:6:13",
														"nodeType": "YulTypedName",
														"src": "2433:6:13",
														"type": ""
													}
												],
												"src": "2364:393:13"
											},
											{
												"body": {
													"nativeSrc": "2808:32:13",
													"nodeType": "YulBlock",
													"src": "2808:32:13",
													"statements": [
														{
															"nativeSrc": "2818:16:13",
															"nodeType": "YulAssignment",
															"src": "2818:16:13",
															"value": {
																"name": "value",
																"nativeSrc": "2829:5:13",
																"nodeType": "YulIdentifier",
																"src": "2829:5:13"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "2818:7:13",
																	"nodeType": "YulIdentifier",
																	"src": "2818:7:13"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nativeSrc": "2763:77:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2790:5:13",
														"nodeType": "YulTypedName",
														"src": "2790:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "2800:7:13",
														"nodeType": "YulTypedName",
														"src": "2800:7:13",
														"type": ""
													}
												],
												"src": "2763:77:13"
											},
											{
												"body": {
													"nativeSrc": "2878:28:13",
													"nodeType": "YulBlock",
													"src": "2878:28:13",
													"statements": [
														{
															"nativeSrc": "2888:12:13",
															"nodeType": "YulAssignment",
															"src": "2888:12:13",
															"value": {
																"name": "value",
																"nativeSrc": "2895:5:13",
																"nodeType": "YulIdentifier",
																"src": "2895:5:13"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "2888:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "2888:3:13"
																}
															]
														}
													]
												},
												"name": "identity",
												"nativeSrc": "2846:60:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2864:5:13",
														"nodeType": "YulTypedName",
														"src": "2864:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "2874:3:13",
														"nodeType": "YulTypedName",
														"src": "2874:3:13",
														"type": ""
													}
												],
												"src": "2846:60:13"
											},
											{
												"body": {
													"nativeSrc": "2972:82:13",
													"nodeType": "YulBlock",
													"src": "2972:82:13",
													"statements": [
														{
															"nativeSrc": "2982:66:13",
															"nodeType": "YulAssignment",
															"src": "2982:66:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "3040:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "3040:5:13"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "3022:17:13",
																					"nodeType": "YulIdentifier",
																					"src": "3022:17:13"
																				},
																				"nativeSrc": "3022:24:13",
																				"nodeType": "YulFunctionCall",
																				"src": "3022:24:13"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nativeSrc": "3013:8:13",
																			"nodeType": "YulIdentifier",
																			"src": "3013:8:13"
																		},
																		"nativeSrc": "3013:34:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3013:34:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "2995:17:13",
																	"nodeType": "YulIdentifier",
																	"src": "2995:17:13"
																},
																"nativeSrc": "2995:53:13",
																"nodeType": "YulFunctionCall",
																"src": "2995:53:13"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "2982:9:13",
																	"nodeType": "YulIdentifier",
																	"src": "2982:9:13"
																}
															]
														}
													]
												},
												"name": "convert_t_uint256_to_t_uint256",
												"nativeSrc": "2912:142:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2952:5:13",
														"nodeType": "YulTypedName",
														"src": "2952:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "2962:9:13",
														"nodeType": "YulTypedName",
														"src": "2962:9:13",
														"type": ""
													}
												],
												"src": "2912:142:13"
											},
											{
												"body": {
													"nativeSrc": "3107:28:13",
													"nodeType": "YulBlock",
													"src": "3107:28:13",
													"statements": [
														{
															"nativeSrc": "3117:12:13",
															"nodeType": "YulAssignment",
															"src": "3117:12:13",
															"value": {
																"name": "value",
																"nativeSrc": "3124:5:13",
																"nodeType": "YulIdentifier",
																"src": "3124:5:13"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "3117:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "3117:3:13"
																}
															]
														}
													]
												},
												"name": "prepare_store_t_uint256",
												"nativeSrc": "3060:75:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3093:5:13",
														"nodeType": "YulTypedName",
														"src": "3093:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "3103:3:13",
														"nodeType": "YulTypedName",
														"src": "3103:3:13",
														"type": ""
													}
												],
												"src": "3060:75:13"
											},
											{
												"body": {
													"nativeSrc": "3217:193:13",
													"nodeType": "YulBlock",
													"src": "3217:193:13",
													"statements": [
														{
															"nativeSrc": "3227:63:13",
															"nodeType": "YulVariableDeclaration",
															"src": "3227:63:13",
															"value": {
																"arguments": [
																	{
																		"name": "value_0",
																		"nativeSrc": "3282:7:13",
																		"nodeType": "YulIdentifier",
																		"src": "3282:7:13"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint256_to_t_uint256",
																	"nativeSrc": "3251:30:13",
																	"nodeType": "YulIdentifier",
																	"src": "3251:30:13"
																},
																"nativeSrc": "3251:39:13",
																"nodeType": "YulFunctionCall",
																"src": "3251:39:13"
															},
															"variables": [
																{
																	"name": "convertedValue_0",
																	"nativeSrc": "3231:16:13",
																	"nodeType": "YulTypedName",
																	"src": "3231:16:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "3306:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "3306:4:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nativeSrc": "3346:4:13",
																						"nodeType": "YulIdentifier",
																						"src": "3346:4:13"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nativeSrc": "3340:5:13",
																					"nodeType": "YulIdentifier",
																					"src": "3340:5:13"
																				},
																				"nativeSrc": "3340:11:13",
																				"nodeType": "YulFunctionCall",
																				"src": "3340:11:13"
																			},
																			{
																				"name": "offset",
																				"nativeSrc": "3353:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "3353:6:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "convertedValue_0",
																						"nativeSrc": "3385:16:13",
																						"nodeType": "YulIdentifier",
																						"src": "3385:16:13"
																					}
																				],
																				"functionName": {
																					"name": "prepare_store_t_uint256",
																					"nativeSrc": "3361:23:13",
																					"nodeType": "YulIdentifier",
																					"src": "3361:23:13"
																				},
																				"nativeSrc": "3361:41:13",
																				"nodeType": "YulFunctionCall",
																				"src": "3361:41:13"
																			}
																		],
																		"functionName": {
																			"name": "update_byte_slice_dynamic32",
																			"nativeSrc": "3312:27:13",
																			"nodeType": "YulIdentifier",
																			"src": "3312:27:13"
																		},
																		"nativeSrc": "3312:91:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3312:91:13"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "3299:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "3299:6:13"
																},
																"nativeSrc": "3299:105:13",
																"nodeType": "YulFunctionCall",
																"src": "3299:105:13"
															},
															"nativeSrc": "3299:105:13",
															"nodeType": "YulExpressionStatement",
															"src": "3299:105:13"
														}
													]
												},
												"name": "update_storage_value_t_uint256_to_t_uint256",
												"nativeSrc": "3141:269:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "3194:4:13",
														"nodeType": "YulTypedName",
														"src": "3194:4:13",
														"type": ""
													},
													{
														"name": "offset",
														"nativeSrc": "3200:6:13",
														"nodeType": "YulTypedName",
														"src": "3200:6:13",
														"type": ""
													},
													{
														"name": "value_0",
														"nativeSrc": "3208:7:13",
														"nodeType": "YulTypedName",
														"src": "3208:7:13",
														"type": ""
													}
												],
												"src": "3141:269:13"
											},
											{
												"body": {
													"nativeSrc": "3465:24:13",
													"nodeType": "YulBlock",
													"src": "3465:24:13",
													"statements": [
														{
															"nativeSrc": "3475:8:13",
															"nodeType": "YulAssignment",
															"src": "3475:8:13",
															"value": {
																"kind": "number",
																"nativeSrc": "3482:1:13",
																"nodeType": "YulLiteral",
																"src": "3482:1:13",
																"type": "",
																"value": "0"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "3475:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "3475:3:13"
																}
															]
														}
													]
												},
												"name": "zero_value_for_split_t_uint256",
												"nativeSrc": "3416:73:13",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "3461:3:13",
														"nodeType": "YulTypedName",
														"src": "3461:3:13",
														"type": ""
													}
												],
												"src": "3416:73:13"
											},
											{
												"body": {
													"nativeSrc": "3548:136:13",
													"nodeType": "YulBlock",
													"src": "3548:136:13",
													"statements": [
														{
															"nativeSrc": "3558:46:13",
															"nodeType": "YulVariableDeclaration",
															"src": "3558:46:13",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "zero_value_for_split_t_uint256",
																	"nativeSrc": "3572:30:13",
																	"nodeType": "YulIdentifier",
																	"src": "3572:30:13"
																},
																"nativeSrc": "3572:32:13",
																"nodeType": "YulFunctionCall",
																"src": "3572:32:13"
															},
															"variables": [
																{
																	"name": "zero_0",
																	"nativeSrc": "3562:6:13",
																	"nodeType": "YulTypedName",
																	"src": "3562:6:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "3657:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "3657:4:13"
																	},
																	{
																		"name": "offset",
																		"nativeSrc": "3663:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "3663:6:13"
																	},
																	{
																		"name": "zero_0",
																		"nativeSrc": "3671:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "3671:6:13"
																	}
																],
																"functionName": {
																	"name": "update_storage_value_t_uint256_to_t_uint256",
																	"nativeSrc": "3613:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "3613:43:13"
																},
																"nativeSrc": "3613:65:13",
																"nodeType": "YulFunctionCall",
																"src": "3613:65:13"
															},
															"nativeSrc": "3613:65:13",
															"nodeType": "YulExpressionStatement",
															"src": "3613:65:13"
														}
													]
												},
												"name": "storage_set_to_zero_t_uint256",
												"nativeSrc": "3495:189:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "3534:4:13",
														"nodeType": "YulTypedName",
														"src": "3534:4:13",
														"type": ""
													},
													{
														"name": "offset",
														"nativeSrc": "3540:6:13",
														"nodeType": "YulTypedName",
														"src": "3540:6:13",
														"type": ""
													}
												],
												"src": "3495:189:13"
											},
											{
												"body": {
													"nativeSrc": "3740:136:13",
													"nodeType": "YulBlock",
													"src": "3740:136:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "3807:63:13",
																"nodeType": "YulBlock",
																"src": "3807:63:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "3851:5:13",
																					"nodeType": "YulIdentifier",
																					"src": "3851:5:13"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3858:1:13",
																					"nodeType": "YulLiteral",
																					"src": "3858:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "storage_set_to_zero_t_uint256",
																				"nativeSrc": "3821:29:13",
																				"nodeType": "YulIdentifier",
																				"src": "3821:29:13"
																			},
																			"nativeSrc": "3821:39:13",
																			"nodeType": "YulFunctionCall",
																			"src": "3821:39:13"
																		},
																		"nativeSrc": "3821:39:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "3821:39:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "start",
																		"nativeSrc": "3760:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "3760:5:13"
																	},
																	{
																		"name": "end",
																		"nativeSrc": "3767:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "3767:3:13"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "3757:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "3757:2:13"
																},
																"nativeSrc": "3757:14:13",
																"nodeType": "YulFunctionCall",
																"src": "3757:14:13"
															},
															"nativeSrc": "3750:120:13",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "3772:26:13",
																"nodeType": "YulBlock",
																"src": "3772:26:13",
																"statements": [
																	{
																		"nativeSrc": "3774:22:13",
																		"nodeType": "YulAssignment",
																		"src": "3774:22:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "3787:5:13",
																					"nodeType": "YulIdentifier",
																					"src": "3787:5:13"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3794:1:13",
																					"nodeType": "YulLiteral",
																					"src": "3794:1:13",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "3783:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "3783:3:13"
																			},
																			"nativeSrc": "3783:13:13",
																			"nodeType": "YulFunctionCall",
																			"src": "3783:13:13"
																		},
																		"variableNames": [
																			{
																				"name": "start",
																				"nativeSrc": "3774:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "3774:5:13"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "3754:2:13",
																"nodeType": "YulBlock",
																"src": "3754:2:13",
																"statements": []
															},
															"src": "3750:120:13"
														}
													]
												},
												"name": "clear_storage_range_t_bytes1",
												"nativeSrc": "3690:186:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "start",
														"nativeSrc": "3728:5:13",
														"nodeType": "YulTypedName",
														"src": "3728:5:13",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "3735:3:13",
														"nodeType": "YulTypedName",
														"src": "3735:3:13",
														"type": ""
													}
												],
												"src": "3690:186:13"
											},
											{
												"body": {
													"nativeSrc": "3961:464:13",
													"nodeType": "YulBlock",
													"src": "3961:464:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "3987:431:13",
																"nodeType": "YulBlock",
																"src": "3987:431:13",
																"statements": [
																	{
																		"nativeSrc": "4001:54:13",
																		"nodeType": "YulVariableDeclaration",
																		"src": "4001:54:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "array",
																					"nativeSrc": "4049:5:13",
																					"nodeType": "YulIdentifier",
																					"src": "4049:5:13"
																				}
																			],
																			"functionName": {
																				"name": "array_dataslot_t_string_storage",
																				"nativeSrc": "4017:31:13",
																				"nodeType": "YulIdentifier",
																				"src": "4017:31:13"
																			},
																			"nativeSrc": "4017:38:13",
																			"nodeType": "YulFunctionCall",
																			"src": "4017:38:13"
																		},
																		"variables": [
																			{
																				"name": "dataArea",
																				"nativeSrc": "4005:8:13",
																				"nodeType": "YulTypedName",
																				"src": "4005:8:13",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "4068:63:13",
																		"nodeType": "YulVariableDeclaration",
																		"src": "4068:63:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "dataArea",
																					"nativeSrc": "4091:8:13",
																					"nodeType": "YulIdentifier",
																					"src": "4091:8:13"
																				},
																				{
																					"arguments": [
																						{
																							"name": "startIndex",
																							"nativeSrc": "4119:10:13",
																							"nodeType": "YulIdentifier",
																							"src": "4119:10:13"
																						}
																					],
																					"functionName": {
																						"name": "divide_by_32_ceil",
																						"nativeSrc": "4101:17:13",
																						"nodeType": "YulIdentifier",
																						"src": "4101:17:13"
																					},
																					"nativeSrc": "4101:29:13",
																					"nodeType": "YulFunctionCall",
																					"src": "4101:29:13"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "4087:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "4087:3:13"
																			},
																			"nativeSrc": "4087:44:13",
																			"nodeType": "YulFunctionCall",
																			"src": "4087:44:13"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nativeSrc": "4072:11:13",
																				"nodeType": "YulTypedName",
																				"src": "4072:11:13",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "4288:27:13",
																			"nodeType": "YulBlock",
																			"src": "4288:27:13",
																			"statements": [
																				{
																					"nativeSrc": "4290:23:13",
																					"nodeType": "YulAssignment",
																					"src": "4290:23:13",
																					"value": {
																						"name": "dataArea",
																						"nativeSrc": "4305:8:13",
																						"nodeType": "YulIdentifier",
																						"src": "4305:8:13"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nativeSrc": "4290:11:13",
																							"nodeType": "YulIdentifier",
																							"src": "4290:11:13"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nativeSrc": "4272:10:13",
																					"nodeType": "YulIdentifier",
																					"src": "4272:10:13"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4284:2:13",
																					"nodeType": "YulLiteral",
																					"src": "4284:2:13",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "4269:2:13",
																				"nodeType": "YulIdentifier",
																				"src": "4269:2:13"
																			},
																			"nativeSrc": "4269:18:13",
																			"nodeType": "YulFunctionCall",
																			"src": "4269:18:13"
																		},
																		"nativeSrc": "4266:49:13",
																		"nodeType": "YulIf",
																		"src": "4266:49:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "deleteStart",
																					"nativeSrc": "4357:11:13",
																					"nodeType": "YulIdentifier",
																					"src": "4357:11:13"
																				},
																				{
																					"arguments": [
																						{
																							"name": "dataArea",
																							"nativeSrc": "4374:8:13",
																							"nodeType": "YulIdentifier",
																							"src": "4374:8:13"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nativeSrc": "4402:3:13",
																									"nodeType": "YulIdentifier",
																									"src": "4402:3:13"
																								}
																							],
																							"functionName": {
																								"name": "divide_by_32_ceil",
																								"nativeSrc": "4384:17:13",
																								"nodeType": "YulIdentifier",
																								"src": "4384:17:13"
																							},
																							"nativeSrc": "4384:22:13",
																							"nodeType": "YulFunctionCall",
																							"src": "4384:22:13"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "4370:3:13",
																						"nodeType": "YulIdentifier",
																						"src": "4370:3:13"
																					},
																					"nativeSrc": "4370:37:13",
																					"nodeType": "YulFunctionCall",
																					"src": "4370:37:13"
																				}
																			],
																			"functionName": {
																				"name": "clear_storage_range_t_bytes1",
																				"nativeSrc": "4328:28:13",
																				"nodeType": "YulIdentifier",
																				"src": "4328:28:13"
																			},
																			"nativeSrc": "4328:80:13",
																			"nodeType": "YulFunctionCall",
																			"src": "4328:80:13"
																		},
																		"nativeSrc": "4328:80:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "4328:80:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nativeSrc": "3978:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "3978:3:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3983:2:13",
																		"nodeType": "YulLiteral",
																		"src": "3983:2:13",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "3975:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "3975:2:13"
																},
																"nativeSrc": "3975:11:13",
																"nodeType": "YulFunctionCall",
																"src": "3975:11:13"
															},
															"nativeSrc": "3972:446:13",
															"nodeType": "YulIf",
															"src": "3972:446:13"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_t_string_storage",
												"nativeSrc": "3882:543:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "3937:5:13",
														"nodeType": "YulTypedName",
														"src": "3937:5:13",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "3944:3:13",
														"nodeType": "YulTypedName",
														"src": "3944:3:13",
														"type": ""
													},
													{
														"name": "startIndex",
														"nativeSrc": "3949:10:13",
														"nodeType": "YulTypedName",
														"src": "3949:10:13",
														"type": ""
													}
												],
												"src": "3882:543:13"
											},
											{
												"body": {
													"nativeSrc": "4494:54:13",
													"nodeType": "YulBlock",
													"src": "4494:54:13",
													"statements": [
														{
															"nativeSrc": "4504:37:13",
															"nodeType": "YulAssignment",
															"src": "4504:37:13",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nativeSrc": "4529:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "4529:4:13"
																	},
																	{
																		"name": "value",
																		"nativeSrc": "4535:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "4535:5:13"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "4525:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "4525:3:13"
																},
																"nativeSrc": "4525:16:13",
																"nodeType": "YulFunctionCall",
																"src": "4525:16:13"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nativeSrc": "4504:8:13",
																	"nodeType": "YulIdentifier",
																	"src": "4504:8:13"
																}
															]
														}
													]
												},
												"name": "shift_right_unsigned_dynamic",
												"nativeSrc": "4431:117:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nativeSrc": "4469:4:13",
														"nodeType": "YulTypedName",
														"src": "4469:4:13",
														"type": ""
													},
													{
														"name": "value",
														"nativeSrc": "4475:5:13",
														"nodeType": "YulTypedName",
														"src": "4475:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nativeSrc": "4485:8:13",
														"nodeType": "YulTypedName",
														"src": "4485:8:13",
														"type": ""
													}
												],
												"src": "4431:117:13"
											},
											{
												"body": {
													"nativeSrc": "4605:118:13",
													"nodeType": "YulBlock",
													"src": "4605:118:13",
													"statements": [
														{
															"nativeSrc": "4615:68:13",
															"nodeType": "YulVariableDeclaration",
															"src": "4615:68:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4664:1:13",
																						"nodeType": "YulLiteral",
																						"src": "4664:1:13",
																						"type": "",
																						"value": "8"
																					},
																					{
																						"name": "bytes",
																						"nativeSrc": "4667:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "4667:5:13"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nativeSrc": "4660:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "4660:3:13"
																				},
																				"nativeSrc": "4660:13:13",
																				"nodeType": "YulFunctionCall",
																				"src": "4660:13:13"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4679:1:13",
																						"nodeType": "YulLiteral",
																						"src": "4679:1:13",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "4675:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "4675:3:13"
																				},
																				"nativeSrc": "4675:6:13",
																				"nodeType": "YulFunctionCall",
																				"src": "4675:6:13"
																			}
																		],
																		"functionName": {
																			"name": "shift_right_unsigned_dynamic",
																			"nativeSrc": "4631:28:13",
																			"nodeType": "YulIdentifier",
																			"src": "4631:28:13"
																		},
																		"nativeSrc": "4631:51:13",
																		"nodeType": "YulFunctionCall",
																		"src": "4631:51:13"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nativeSrc": "4627:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "4627:3:13"
																},
																"nativeSrc": "4627:56:13",
																"nodeType": "YulFunctionCall",
																"src": "4627:56:13"
															},
															"variables": [
																{
																	"name": "mask",
																	"nativeSrc": "4619:4:13",
																	"nodeType": "YulTypedName",
																	"src": "4619:4:13",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4692:25:13",
															"nodeType": "YulAssignment",
															"src": "4692:25:13",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "4706:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "4706:4:13"
																	},
																	{
																		"name": "mask",
																		"nativeSrc": "4712:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "4712:4:13"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "4702:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "4702:3:13"
																},
																"nativeSrc": "4702:15:13",
																"nodeType": "YulFunctionCall",
																"src": "4702:15:13"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "4692:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "4692:6:13"
																}
															]
														}
													]
												},
												"name": "mask_bytes_dynamic",
												"nativeSrc": "4554:169:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "4582:4:13",
														"nodeType": "YulTypedName",
														"src": "4582:4:13",
														"type": ""
													},
													{
														"name": "bytes",
														"nativeSrc": "4588:5:13",
														"nodeType": "YulTypedName",
														"src": "4588:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "4598:6:13",
														"nodeType": "YulTypedName",
														"src": "4598:6:13",
														"type": ""
													}
												],
												"src": "4554:169:13"
											},
											{
												"body": {
													"nativeSrc": "4809:214:13",
													"nodeType": "YulBlock",
													"src": "4809:214:13",
													"statements": [
														{
															"nativeSrc": "4942:37:13",
															"nodeType": "YulAssignment",
															"src": "4942:37:13",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "4969:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "4969:4:13"
																	},
																	{
																		"name": "len",
																		"nativeSrc": "4975:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "4975:3:13"
																	}
																],
																"functionName": {
																	"name": "mask_bytes_dynamic",
																	"nativeSrc": "4950:18:13",
																	"nodeType": "YulIdentifier",
																	"src": "4950:18:13"
																},
																"nativeSrc": "4950:29:13",
																"nodeType": "YulFunctionCall",
																"src": "4950:29:13"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "4942:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "4942:4:13"
																}
															]
														},
														{
															"nativeSrc": "4988:29:13",
															"nodeType": "YulAssignment",
															"src": "4988:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "4999:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "4999:4:13"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "5009:1:13",
																				"nodeType": "YulLiteral",
																				"src": "5009:1:13",
																				"type": "",
																				"value": "2"
																			},
																			{
																				"name": "len",
																				"nativeSrc": "5012:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "5012:3:13"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nativeSrc": "5005:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "5005:3:13"
																		},
																		"nativeSrc": "5005:11:13",
																		"nodeType": "YulFunctionCall",
																		"src": "5005:11:13"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "4996:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "4996:2:13"
																},
																"nativeSrc": "4996:21:13",
																"nodeType": "YulFunctionCall",
																"src": "4996:21:13"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nativeSrc": "4988:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "4988:4:13"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nativeSrc": "4728:295:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "4790:4:13",
														"nodeType": "YulTypedName",
														"src": "4790:4:13",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "4796:3:13",
														"nodeType": "YulTypedName",
														"src": "4796:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nativeSrc": "4804:4:13",
														"nodeType": "YulTypedName",
														"src": "4804:4:13",
														"type": ""
													}
												],
												"src": "4728:295:13"
											},
											{
												"body": {
													"nativeSrc": "5120:1303:13",
													"nodeType": "YulBlock",
													"src": "5120:1303:13",
													"statements": [
														{
															"nativeSrc": "5131:51:13",
															"nodeType": "YulVariableDeclaration",
															"src": "5131:51:13",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nativeSrc": "5178:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "5178:3:13"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nativeSrc": "5145:32:13",
																	"nodeType": "YulIdentifier",
																	"src": "5145:32:13"
																},
																"nativeSrc": "5145:37:13",
																"nodeType": "YulFunctionCall",
																"src": "5145:37:13"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nativeSrc": "5135:6:13",
																	"nodeType": "YulTypedName",
																	"src": "5135:6:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "5267:22:13",
																"nodeType": "YulBlock",
																"src": "5267:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "5269:16:13",
																				"nodeType": "YulIdentifier",
																				"src": "5269:16:13"
																			},
																			"nativeSrc": "5269:18:13",
																			"nodeType": "YulFunctionCall",
																			"src": "5269:18:13"
																		},
																		"nativeSrc": "5269:18:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "5269:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "5239:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "5239:6:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5247:18:13",
																		"nodeType": "YulLiteral",
																		"src": "5247:18:13",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "5236:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "5236:2:13"
																},
																"nativeSrc": "5236:30:13",
																"nodeType": "YulFunctionCall",
																"src": "5236:30:13"
															},
															"nativeSrc": "5233:56:13",
															"nodeType": "YulIf",
															"src": "5233:56:13"
														},
														{
															"nativeSrc": "5299:52:13",
															"nodeType": "YulVariableDeclaration",
															"src": "5299:52:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "slot",
																				"nativeSrc": "5345:4:13",
																				"nodeType": "YulIdentifier",
																				"src": "5345:4:13"
																			}
																		],
																		"functionName": {
																			"name": "sload",
																			"nativeSrc": "5339:5:13",
																			"nodeType": "YulIdentifier",
																			"src": "5339:5:13"
																		},
																		"nativeSrc": "5339:11:13",
																		"nodeType": "YulFunctionCall",
																		"src": "5339:11:13"
																	}
																],
																"functionName": {
																	"name": "extract_byte_array_length",
																	"nativeSrc": "5313:25:13",
																	"nodeType": "YulIdentifier",
																	"src": "5313:25:13"
																},
																"nativeSrc": "5313:38:13",
																"nodeType": "YulFunctionCall",
																"src": "5313:38:13"
															},
															"variables": [
																{
																	"name": "oldLen",
																	"nativeSrc": "5303:6:13",
																	"nodeType": "YulTypedName",
																	"src": "5303:6:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "5444:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "5444:4:13"
																	},
																	{
																		"name": "oldLen",
																		"nativeSrc": "5450:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "5450:6:13"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "5458:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "5458:6:13"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_t_string_storage",
																	"nativeSrc": "5398:45:13",
																	"nodeType": "YulIdentifier",
																	"src": "5398:45:13"
																},
																"nativeSrc": "5398:67:13",
																"nodeType": "YulFunctionCall",
																"src": "5398:67:13"
															},
															"nativeSrc": "5398:67:13",
															"nodeType": "YulExpressionStatement",
															"src": "5398:67:13"
														},
														{
															"nativeSrc": "5475:18:13",
															"nodeType": "YulVariableDeclaration",
															"src": "5475:18:13",
															"value": {
																"kind": "number",
																"nativeSrc": "5492:1:13",
																"nodeType": "YulLiteral",
																"src": "5492:1:13",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "5479:9:13",
																	"nodeType": "YulTypedName",
																	"src": "5479:9:13",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "5503:17:13",
															"nodeType": "YulAssignment",
															"src": "5503:17:13",
															"value": {
																"kind": "number",
																"nativeSrc": "5516:4:13",
																"nodeType": "YulLiteral",
																"src": "5516:4:13",
																"type": "",
																"value": "0x20"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "5503:9:13",
																	"nodeType": "YulIdentifier",
																	"src": "5503:9:13"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "5567:611:13",
																		"nodeType": "YulBlock",
																		"src": "5567:611:13",
																		"statements": [
																			{
																				"nativeSrc": "5581:37:13",
																				"nodeType": "YulVariableDeclaration",
																				"src": "5581:37:13",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nativeSrc": "5600:6:13",
																							"nodeType": "YulIdentifier",
																							"src": "5600:6:13"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "5612:4:13",
																									"nodeType": "YulLiteral",
																									"src": "5612:4:13",
																									"type": "",
																									"value": "0x1f"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "5608:3:13",
																								"nodeType": "YulIdentifier",
																								"src": "5608:3:13"
																							},
																							"nativeSrc": "5608:9:13",
																							"nodeType": "YulFunctionCall",
																							"src": "5608:9:13"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nativeSrc": "5596:3:13",
																						"nodeType": "YulIdentifier",
																						"src": "5596:3:13"
																					},
																					"nativeSrc": "5596:22:13",
																					"nodeType": "YulFunctionCall",
																					"src": "5596:22:13"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nativeSrc": "5585:7:13",
																						"nodeType": "YulTypedName",
																						"src": "5585:7:13",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "5632:51:13",
																				"nodeType": "YulVariableDeclaration",
																				"src": "5632:51:13",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "5678:4:13",
																							"nodeType": "YulIdentifier",
																							"src": "5678:4:13"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_t_string_storage",
																						"nativeSrc": "5646:31:13",
																						"nodeType": "YulIdentifier",
																						"src": "5646:31:13"
																					},
																					"nativeSrc": "5646:37:13",
																					"nodeType": "YulFunctionCall",
																					"src": "5646:37:13"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nativeSrc": "5636:6:13",
																						"nodeType": "YulTypedName",
																						"src": "5636:6:13",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "5696:10:13",
																				"nodeType": "YulVariableDeclaration",
																				"src": "5696:10:13",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "5705:1:13",
																					"nodeType": "YulLiteral",
																					"src": "5705:1:13",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nativeSrc": "5700:1:13",
																						"nodeType": "YulTypedName",
																						"src": "5700:1:13",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "5764:163:13",
																					"nodeType": "YulBlock",
																					"src": "5764:163:13",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "5789:6:13",
																										"nodeType": "YulIdentifier",
																										"src": "5789:6:13"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nativeSrc": "5807:3:13",
																														"nodeType": "YulIdentifier",
																														"src": "5807:3:13"
																													},
																													{
																														"name": "srcOffset",
																														"nativeSrc": "5812:9:13",
																														"nodeType": "YulIdentifier",
																														"src": "5812:9:13"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nativeSrc": "5803:3:13",
																													"nodeType": "YulIdentifier",
																													"src": "5803:3:13"
																												},
																												"nativeSrc": "5803:19:13",
																												"nodeType": "YulFunctionCall",
																												"src": "5803:19:13"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nativeSrc": "5797:5:13",
																											"nodeType": "YulIdentifier",
																											"src": "5797:5:13"
																										},
																										"nativeSrc": "5797:26:13",
																										"nodeType": "YulFunctionCall",
																										"src": "5797:26:13"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "5782:6:13",
																									"nodeType": "YulIdentifier",
																									"src": "5782:6:13"
																								},
																								"nativeSrc": "5782:42:13",
																								"nodeType": "YulFunctionCall",
																								"src": "5782:42:13"
																							},
																							"nativeSrc": "5782:42:13",
																							"nodeType": "YulExpressionStatement",
																							"src": "5782:42:13"
																						},
																						{
																							"nativeSrc": "5841:24:13",
																							"nodeType": "YulAssignment",
																							"src": "5841:24:13",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "5855:6:13",
																										"nodeType": "YulIdentifier",
																										"src": "5855:6:13"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "5863:1:13",
																										"nodeType": "YulLiteral",
																										"src": "5863:1:13",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "5851:3:13",
																									"nodeType": "YulIdentifier",
																									"src": "5851:3:13"
																								},
																								"nativeSrc": "5851:14:13",
																								"nodeType": "YulFunctionCall",
																								"src": "5851:14:13"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nativeSrc": "5841:6:13",
																									"nodeType": "YulIdentifier",
																									"src": "5841:6:13"
																								}
																							]
																						},
																						{
																							"nativeSrc": "5882:31:13",
																							"nodeType": "YulAssignment",
																							"src": "5882:31:13",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nativeSrc": "5899:9:13",
																										"nodeType": "YulIdentifier",
																										"src": "5899:9:13"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "5910:2:13",
																										"nodeType": "YulLiteral",
																										"src": "5910:2:13",
																										"type": "",
																										"value": "32"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "5895:3:13",
																									"nodeType": "YulIdentifier",
																									"src": "5895:3:13"
																								},
																								"nativeSrc": "5895:18:13",
																								"nodeType": "YulFunctionCall",
																								"src": "5895:18:13"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nativeSrc": "5882:9:13",
																									"nodeType": "YulIdentifier",
																									"src": "5882:9:13"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nativeSrc": "5730:1:13",
																							"nodeType": "YulIdentifier",
																							"src": "5730:1:13"
																						},
																						{
																							"name": "loopEnd",
																							"nativeSrc": "5733:7:13",
																							"nodeType": "YulIdentifier",
																							"src": "5733:7:13"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "5727:2:13",
																						"nodeType": "YulIdentifier",
																						"src": "5727:2:13"
																					},
																					"nativeSrc": "5727:14:13",
																					"nodeType": "YulFunctionCall",
																					"src": "5727:14:13"
																				},
																				"nativeSrc": "5719:208:13",
																				"nodeType": "YulForLoop",
																				"post": {
																					"nativeSrc": "5742:21:13",
																					"nodeType": "YulBlock",
																					"src": "5742:21:13",
																					"statements": [
																						{
																							"nativeSrc": "5744:17:13",
																							"nodeType": "YulAssignment",
																							"src": "5744:17:13",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nativeSrc": "5753:1:13",
																										"nodeType": "YulIdentifier",
																										"src": "5753:1:13"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "5756:4:13",
																										"nodeType": "YulLiteral",
																										"src": "5756:4:13",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "5749:3:13",
																									"nodeType": "YulIdentifier",
																									"src": "5749:3:13"
																								},
																								"nativeSrc": "5749:12:13",
																								"nodeType": "YulFunctionCall",
																								"src": "5749:12:13"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nativeSrc": "5744:1:13",
																									"nodeType": "YulIdentifier",
																									"src": "5744:1:13"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nativeSrc": "5723:3:13",
																					"nodeType": "YulBlock",
																					"src": "5723:3:13",
																					"statements": []
																				},
																				"src": "5719:208:13"
																			},
																			{
																				"body": {
																					"nativeSrc": "5963:156:13",
																					"nodeType": "YulBlock",
																					"src": "5963:156:13",
																					"statements": [
																						{
																							"nativeSrc": "5981:43:13",
																							"nodeType": "YulVariableDeclaration",
																							"src": "5981:43:13",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "6008:3:13",
																												"nodeType": "YulIdentifier",
																												"src": "6008:3:13"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "6013:9:13",
																												"nodeType": "YulIdentifier",
																												"src": "6013:9:13"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "6004:3:13",
																											"nodeType": "YulIdentifier",
																											"src": "6004:3:13"
																										},
																										"nativeSrc": "6004:19:13",
																										"nodeType": "YulFunctionCall",
																										"src": "6004:19:13"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "5998:5:13",
																									"nodeType": "YulIdentifier",
																									"src": "5998:5:13"
																								},
																								"nativeSrc": "5998:26:13",
																								"nodeType": "YulFunctionCall",
																								"src": "5998:26:13"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nativeSrc": "5985:9:13",
																									"nodeType": "YulTypedName",
																									"src": "5985:9:13",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "6048:6:13",
																										"nodeType": "YulIdentifier",
																										"src": "6048:6:13"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nativeSrc": "6075:9:13",
																												"nodeType": "YulIdentifier",
																												"src": "6075:9:13"
																											},
																											{
																												"arguments": [
																													{
																														"name": "newLen",
																														"nativeSrc": "6090:6:13",
																														"nodeType": "YulIdentifier",
																														"src": "6090:6:13"
																													},
																													{
																														"kind": "number",
																														"nativeSrc": "6098:4:13",
																														"nodeType": "YulLiteral",
																														"src": "6098:4:13",
																														"type": "",
																														"value": "0x1f"
																													}
																												],
																												"functionName": {
																													"name": "and",
																													"nativeSrc": "6086:3:13",
																													"nodeType": "YulIdentifier",
																													"src": "6086:3:13"
																												},
																												"nativeSrc": "6086:17:13",
																												"nodeType": "YulFunctionCall",
																												"src": "6086:17:13"
																											}
																										],
																										"functionName": {
																											"name": "mask_bytes_dynamic",
																											"nativeSrc": "6056:18:13",
																											"nodeType": "YulIdentifier",
																											"src": "6056:18:13"
																										},
																										"nativeSrc": "6056:48:13",
																										"nodeType": "YulFunctionCall",
																										"src": "6056:48:13"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "6041:6:13",
																									"nodeType": "YulIdentifier",
																									"src": "6041:6:13"
																								},
																								"nativeSrc": "6041:64:13",
																								"nodeType": "YulFunctionCall",
																								"src": "6041:64:13"
																							},
																							"nativeSrc": "6041:64:13",
																							"nodeType": "YulExpressionStatement",
																							"src": "6041:64:13"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nativeSrc": "5946:7:13",
																							"nodeType": "YulIdentifier",
																							"src": "5946:7:13"
																						},
																						{
																							"name": "newLen",
																							"nativeSrc": "5955:6:13",
																							"nodeType": "YulIdentifier",
																							"src": "5955:6:13"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "5943:2:13",
																						"nodeType": "YulIdentifier",
																						"src": "5943:2:13"
																					},
																					"nativeSrc": "5943:19:13",
																					"nodeType": "YulFunctionCall",
																					"src": "5943:19:13"
																				},
																				"nativeSrc": "5940:179:13",
																				"nodeType": "YulIf",
																				"src": "5940:179:13"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "6139:4:13",
																							"nodeType": "YulIdentifier",
																							"src": "6139:4:13"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "newLen",
																											"nativeSrc": "6153:6:13",
																											"nodeType": "YulIdentifier",
																											"src": "6153:6:13"
																										},
																										{
																											"kind": "number",
																											"nativeSrc": "6161:1:13",
																											"nodeType": "YulLiteral",
																											"src": "6161:1:13",
																											"type": "",
																											"value": "2"
																										}
																									],
																									"functionName": {
																										"name": "mul",
																										"nativeSrc": "6149:3:13",
																										"nodeType": "YulIdentifier",
																										"src": "6149:3:13"
																									},
																									"nativeSrc": "6149:14:13",
																									"nodeType": "YulFunctionCall",
																									"src": "6149:14:13"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "6165:1:13",
																									"nodeType": "YulLiteral",
																									"src": "6165:1:13",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "6145:3:13",
																								"nodeType": "YulIdentifier",
																								"src": "6145:3:13"
																							},
																							"nativeSrc": "6145:22:13",
																							"nodeType": "YulFunctionCall",
																							"src": "6145:22:13"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "6132:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "6132:6:13"
																					},
																					"nativeSrc": "6132:36:13",
																					"nodeType": "YulFunctionCall",
																					"src": "6132:36:13"
																				},
																				"nativeSrc": "6132:36:13",
																				"nodeType": "YulExpressionStatement",
																				"src": "6132:36:13"
																			}
																		]
																	},
																	"nativeSrc": "5560:618:13",
																	"nodeType": "YulCase",
																	"src": "5560:618:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5565:1:13",
																		"nodeType": "YulLiteral",
																		"src": "5565:1:13",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "6195:222:13",
																		"nodeType": "YulBlock",
																		"src": "6195:222:13",
																		"statements": [
																			{
																				"nativeSrc": "6209:14:13",
																				"nodeType": "YulVariableDeclaration",
																				"src": "6209:14:13",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "6222:1:13",
																					"nodeType": "YulLiteral",
																					"src": "6222:1:13",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nativeSrc": "6213:5:13",
																						"nodeType": "YulTypedName",
																						"src": "6213:5:13",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "6246:67:13",
																					"nodeType": "YulBlock",
																					"src": "6246:67:13",
																					"statements": [
																						{
																							"nativeSrc": "6264:35:13",
																							"nodeType": "YulAssignment",
																							"src": "6264:35:13",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "6283:3:13",
																												"nodeType": "YulIdentifier",
																												"src": "6283:3:13"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "6288:9:13",
																												"nodeType": "YulIdentifier",
																												"src": "6288:9:13"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "6279:3:13",
																											"nodeType": "YulIdentifier",
																											"src": "6279:3:13"
																										},
																										"nativeSrc": "6279:19:13",
																										"nodeType": "YulFunctionCall",
																										"src": "6279:19:13"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "6273:5:13",
																									"nodeType": "YulIdentifier",
																									"src": "6273:5:13"
																								},
																								"nativeSrc": "6273:26:13",
																								"nodeType": "YulFunctionCall",
																								"src": "6273:26:13"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nativeSrc": "6264:5:13",
																									"nodeType": "YulIdentifier",
																									"src": "6264:5:13"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nativeSrc": "6239:6:13",
																					"nodeType": "YulIdentifier",
																					"src": "6239:6:13"
																				},
																				"nativeSrc": "6236:77:13",
																				"nodeType": "YulIf",
																				"src": "6236:77:13"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "6333:4:13",
																							"nodeType": "YulIdentifier",
																							"src": "6333:4:13"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nativeSrc": "6392:5:13",
																									"nodeType": "YulIdentifier",
																									"src": "6392:5:13"
																								},
																								{
																									"name": "newLen",
																									"nativeSrc": "6399:6:13",
																									"nodeType": "YulIdentifier",
																									"src": "6399:6:13"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nativeSrc": "6339:52:13",
																								"nodeType": "YulIdentifier",
																								"src": "6339:52:13"
																							},
																							"nativeSrc": "6339:67:13",
																							"nodeType": "YulFunctionCall",
																							"src": "6339:67:13"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "6326:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "6326:6:13"
																					},
																					"nativeSrc": "6326:81:13",
																					"nodeType": "YulFunctionCall",
																					"src": "6326:81:13"
																				},
																				"nativeSrc": "6326:81:13",
																				"nodeType": "YulExpressionStatement",
																				"src": "6326:81:13"
																			}
																		]
																	},
																	"nativeSrc": "6187:230:13",
																	"nodeType": "YulCase",
																	"src": "6187:230:13",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "5540:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "5540:6:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5548:2:13",
																		"nodeType": "YulLiteral",
																		"src": "5548:2:13",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "5537:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "5537:2:13"
																},
																"nativeSrc": "5537:14:13",
																"nodeType": "YulFunctionCall",
																"src": "5537:14:13"
															},
															"nativeSrc": "5530:887:13",
															"nodeType": "YulSwitch",
															"src": "5530:887:13"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nativeSrc": "5028:1395:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "5109:4:13",
														"nodeType": "YulTypedName",
														"src": "5109:4:13",
														"type": ""
													},
													{
														"name": "src",
														"nativeSrc": "5115:3:13",
														"nodeType": "YulTypedName",
														"src": "5115:3:13",
														"type": ""
													}
												],
												"src": "5028:1395:13"
											},
											{
												"body": {
													"nativeSrc": "6487:40:13",
													"nodeType": "YulBlock",
													"src": "6487:40:13",
													"statements": [
														{
															"nativeSrc": "6498:22:13",
															"nodeType": "YulAssignment",
															"src": "6498:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "6514:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "6514:5:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "6508:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "6508:5:13"
																},
																"nativeSrc": "6508:12:13",
																"nodeType": "YulFunctionCall",
																"src": "6508:12:13"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "6498:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "6498:6:13"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nativeSrc": "6429:98:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6470:5:13",
														"nodeType": "YulTypedName",
														"src": "6470:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "6480:6:13",
														"nodeType": "YulTypedName",
														"src": "6480:6:13",
														"type": ""
													}
												],
												"src": "6429:98:13"
											},
											{
												"body": {
													"nativeSrc": "6646:34:13",
													"nodeType": "YulBlock",
													"src": "6646:34:13",
													"statements": [
														{
															"nativeSrc": "6656:18:13",
															"nodeType": "YulAssignment",
															"src": "6656:18:13",
															"value": {
																"name": "pos",
																"nativeSrc": "6671:3:13",
																"nodeType": "YulIdentifier",
																"src": "6671:3:13"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "6656:11:13",
																	"nodeType": "YulIdentifier",
																	"src": "6656:11:13"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nativeSrc": "6533:147:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "6618:3:13",
														"nodeType": "YulTypedName",
														"src": "6618:3:13",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "6623:6:13",
														"nodeType": "YulTypedName",
														"src": "6623:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "6634:11:13",
														"nodeType": "YulTypedName",
														"src": "6634:11:13",
														"type": ""
													}
												],
												"src": "6533:147:13"
											},
											{
												"body": {
													"nativeSrc": "6748:77:13",
													"nodeType": "YulBlock",
													"src": "6748:77:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nativeSrc": "6765:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "6765:3:13"
																	},
																	{
																		"name": "src",
																		"nativeSrc": "6770:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "6770:3:13"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "6775:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "6775:6:13"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "6759:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "6759:5:13"
																},
																"nativeSrc": "6759:23:13",
																"nodeType": "YulFunctionCall",
																"src": "6759:23:13"
															},
															"nativeSrc": "6759:23:13",
															"nodeType": "YulExpressionStatement",
															"src": "6759:23:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nativeSrc": "6802:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "6802:3:13"
																			},
																			{
																				"name": "length",
																				"nativeSrc": "6807:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "6807:6:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6798:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "6798:3:13"
																		},
																		"nativeSrc": "6798:16:13",
																		"nodeType": "YulFunctionCall",
																		"src": "6798:16:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6816:1:13",
																		"nodeType": "YulLiteral",
																		"src": "6816:1:13",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6791:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "6791:6:13"
																},
																"nativeSrc": "6791:27:13",
																"nodeType": "YulFunctionCall",
																"src": "6791:27:13"
															},
															"nativeSrc": "6791:27:13",
															"nodeType": "YulExpressionStatement",
															"src": "6791:27:13"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "6686:139:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nativeSrc": "6730:3:13",
														"nodeType": "YulTypedName",
														"src": "6730:3:13",
														"type": ""
													},
													{
														"name": "dst",
														"nativeSrc": "6735:3:13",
														"nodeType": "YulTypedName",
														"src": "6735:3:13",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "6740:6:13",
														"nodeType": "YulTypedName",
														"src": "6740:6:13",
														"type": ""
													}
												],
												"src": "6686:139:13"
											},
											{
												"body": {
													"nativeSrc": "6939:278:13",
													"nodeType": "YulBlock",
													"src": "6939:278:13",
													"statements": [
														{
															"nativeSrc": "6949:52:13",
															"nodeType": "YulVariableDeclaration",
															"src": "6949:52:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "6995:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "6995:5:13"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nativeSrc": "6963:31:13",
																	"nodeType": "YulIdentifier",
																	"src": "6963:31:13"
																},
																"nativeSrc": "6963:38:13",
																"nodeType": "YulFunctionCall",
																"src": "6963:38:13"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "6953:6:13",
																	"nodeType": "YulTypedName",
																	"src": "6953:6:13",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "7010:95:13",
															"nodeType": "YulAssignment",
															"src": "7010:95:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7093:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "7093:3:13"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "7098:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "7098:6:13"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nativeSrc": "7017:75:13",
																	"nodeType": "YulIdentifier",
																	"src": "7017:75:13"
																},
																"nativeSrc": "7017:88:13",
																"nodeType": "YulFunctionCall",
																"src": "7017:88:13"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "7010:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "7010:3:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "7153:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "7153:5:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7160:4:13",
																				"nodeType": "YulLiteral",
																				"src": "7160:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7149:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "7149:3:13"
																		},
																		"nativeSrc": "7149:16:13",
																		"nodeType": "YulFunctionCall",
																		"src": "7149:16:13"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "7167:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "7167:3:13"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "7172:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "7172:6:13"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nativeSrc": "7114:34:13",
																	"nodeType": "YulIdentifier",
																	"src": "7114:34:13"
																},
																"nativeSrc": "7114:65:13",
																"nodeType": "YulFunctionCall",
																"src": "7114:65:13"
															},
															"nativeSrc": "7114:65:13",
															"nodeType": "YulExpressionStatement",
															"src": "7114:65:13"
														},
														{
															"nativeSrc": "7188:23:13",
															"nodeType": "YulAssignment",
															"src": "7188:23:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7199:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "7199:3:13"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "7204:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "7204:6:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7195:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "7195:3:13"
																},
																"nativeSrc": "7195:16:13",
																"nodeType": "YulFunctionCall",
																"src": "7195:16:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "7188:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "7188:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nativeSrc": "6831:386:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6920:5:13",
														"nodeType": "YulTypedName",
														"src": "6920:5:13",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "6927:3:13",
														"nodeType": "YulTypedName",
														"src": "6927:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "6935:3:13",
														"nodeType": "YulTypedName",
														"src": "6935:3:13",
														"type": ""
													}
												],
												"src": "6831:386:13"
											},
											{
												"body": {
													"nativeSrc": "7357:137:13",
													"nodeType": "YulBlock",
													"src": "7357:137:13",
													"statements": [
														{
															"nativeSrc": "7368:100:13",
															"nodeType": "YulAssignment",
															"src": "7368:100:13",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "7455:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "7455:6:13"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "7464:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "7464:3:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nativeSrc": "7375:79:13",
																	"nodeType": "YulIdentifier",
																	"src": "7375:79:13"
																},
																"nativeSrc": "7375:93:13",
																"nodeType": "YulFunctionCall",
																"src": "7375:93:13"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "7368:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "7368:3:13"
																}
															]
														},
														{
															"nativeSrc": "7478:10:13",
															"nodeType": "YulAssignment",
															"src": "7478:10:13",
															"value": {
																"name": "pos",
																"nativeSrc": "7485:3:13",
																"nodeType": "YulIdentifier",
																"src": "7485:3:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "7478:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "7478:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nativeSrc": "7223:271:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "7336:3:13",
														"nodeType": "YulTypedName",
														"src": "7336:3:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "7342:6:13",
														"nodeType": "YulTypedName",
														"src": "7342:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "7353:3:13",
														"nodeType": "YulTypedName",
														"src": "7353:3:13",
														"type": ""
													}
												],
												"src": "7223:271:13"
											},
											{
												"body": {
													"nativeSrc": "7543:79:13",
													"nodeType": "YulBlock",
													"src": "7543:79:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "7600:16:13",
																"nodeType": "YulBlock",
																"src": "7600:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "7609:1:13",
																					"nodeType": "YulLiteral",
																					"src": "7609:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "7612:1:13",
																					"nodeType": "YulLiteral",
																					"src": "7612:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "7602:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "7602:6:13"
																			},
																			"nativeSrc": "7602:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "7602:12:13"
																		},
																		"nativeSrc": "7602:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "7602:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "7566:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "7566:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "7591:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "7591:5:13"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "7573:17:13",
																					"nodeType": "YulIdentifier",
																					"src": "7573:17:13"
																				},
																				"nativeSrc": "7573:24:13",
																				"nodeType": "YulFunctionCall",
																				"src": "7573:24:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "7563:2:13",
																			"nodeType": "YulIdentifier",
																			"src": "7563:2:13"
																		},
																		"nativeSrc": "7563:35:13",
																		"nodeType": "YulFunctionCall",
																		"src": "7563:35:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "7556:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "7556:6:13"
																},
																"nativeSrc": "7556:43:13",
																"nodeType": "YulFunctionCall",
																"src": "7556:43:13"
															},
															"nativeSrc": "7553:63:13",
															"nodeType": "YulIf",
															"src": "7553:63:13"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nativeSrc": "7500:122:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "7536:5:13",
														"nodeType": "YulTypedName",
														"src": "7536:5:13",
														"type": ""
													}
												],
												"src": "7500:122:13"
											},
											{
												"body": {
													"nativeSrc": "7691:80:13",
													"nodeType": "YulBlock",
													"src": "7691:80:13",
													"statements": [
														{
															"nativeSrc": "7701:22:13",
															"nodeType": "YulAssignment",
															"src": "7701:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "7716:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "7716:6:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "7710:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "7710:5:13"
																},
																"nativeSrc": "7710:13:13",
																"nodeType": "YulFunctionCall",
																"src": "7710:13:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "7701:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "7701:5:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "7759:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "7759:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nativeSrc": "7732:26:13",
																	"nodeType": "YulIdentifier",
																	"src": "7732:26:13"
																},
																"nativeSrc": "7732:33:13",
																"nodeType": "YulFunctionCall",
																"src": "7732:33:13"
															},
															"nativeSrc": "7732:33:13",
															"nodeType": "YulExpressionStatement",
															"src": "7732:33:13"
														}
													]
												},
												"name": "abi_decode_t_uint256_fromMemory",
												"nativeSrc": "7628:143:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "7669:6:13",
														"nodeType": "YulTypedName",
														"src": "7669:6:13",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "7677:3:13",
														"nodeType": "YulTypedName",
														"src": "7677:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "7685:5:13",
														"nodeType": "YulTypedName",
														"src": "7685:5:13",
														"type": ""
													}
												],
												"src": "7628:143:13"
											},
											{
												"body": {
													"nativeSrc": "7854:274:13",
													"nodeType": "YulBlock",
													"src": "7854:274:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "7900:83:13",
																"nodeType": "YulBlock",
																"src": "7900:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "7902:77:13",
																				"nodeType": "YulIdentifier",
																				"src": "7902:77:13"
																			},
																			"nativeSrc": "7902:79:13",
																			"nodeType": "YulFunctionCall",
																			"src": "7902:79:13"
																		},
																		"nativeSrc": "7902:79:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "7902:79:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "7875:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "7875:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "7884:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "7884:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "7871:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "7871:3:13"
																		},
																		"nativeSrc": "7871:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "7871:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7896:2:13",
																		"nodeType": "YulLiteral",
																		"src": "7896:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "7867:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "7867:3:13"
																},
																"nativeSrc": "7867:32:13",
																"nodeType": "YulFunctionCall",
																"src": "7867:32:13"
															},
															"nativeSrc": "7864:119:13",
															"nodeType": "YulIf",
															"src": "7864:119:13"
														},
														{
															"nativeSrc": "7993:128:13",
															"nodeType": "YulBlock",
															"src": "7993:128:13",
															"statements": [
																{
																	"nativeSrc": "8008:15:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "8008:15:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "8022:1:13",
																		"nodeType": "YulLiteral",
																		"src": "8022:1:13",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "8012:6:13",
																			"nodeType": "YulTypedName",
																			"src": "8012:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "8037:74:13",
																	"nodeType": "YulAssignment",
																	"src": "8037:74:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "8083:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "8083:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "8094:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "8094:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "8079:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "8079:3:13"
																				},
																				"nativeSrc": "8079:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "8079:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "8103:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "8103:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nativeSrc": "8047:31:13",
																			"nodeType": "YulIdentifier",
																			"src": "8047:31:13"
																		},
																		"nativeSrc": "8047:64:13",
																		"nodeType": "YulFunctionCall",
																		"src": "8047:64:13"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "8037:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "8037:6:13"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nativeSrc": "7777:351:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7824:9:13",
														"nodeType": "YulTypedName",
														"src": "7824:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "7835:7:13",
														"nodeType": "YulTypedName",
														"src": "7835:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "7847:6:13",
														"nodeType": "YulTypedName",
														"src": "7847:6:13",
														"type": ""
													}
												],
												"src": "7777:351:13"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        mcopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n",
									"id": 13,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60c06040525f600560146101000a81548160ff021916908315150217905550348015610029575f80fd5b50604051612b16380380612b16833981810160405281019061004b91906102ee565b806040518060400160405280600e81526020017f522d7368617265642061555344430000000000000000000000000000000000008152506040518060400160405280600781526020017f727361555344430000000000000000000000000000000000000000000000000081525081600390816100c79190610553565b5080600490816100d79190610553565b5050505f806100eb8361018760201b60201c565b91509150816100fb5760126100fd565b805b60ff1660a08160ff16815250508273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505050508060055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506106df565b5f805f808473ffffffffffffffffffffffffffffffffffffffff1660405160240160405160208183030381529060405263313ce56760e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516101fa9190610674565b5f60405180830381855afa9150503d805f8114610232576040519150601f19603f3d011682016040523d82523d5f602084013e610237565b606091505b509150915081801561024b57506020815110155b15610282575f8180602001905181019061026591906106b4565b905060ff80168111610280576001819450945050505061028b565b505b5f809350935050505b915091565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6102bd82610294565b9050919050565b6102cd816102b3565b81146102d7575f80fd5b50565b5f815190506102e8816102c4565b92915050565b5f6020828403121561030357610302610290565b5b5f610310848285016102da565b91505092915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061039457607f821691505b6020821081036103a7576103a6610350565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026104097fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826103ce565b61041386836103ce565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61045761045261044d8461042b565b610434565b61042b565b9050919050565b5f819050919050565b6104708361043d565b61048461047c8261045e565b8484546103da565b825550505050565b5f90565b61049861048c565b6104a3818484610467565b505050565b5b818110156104c6576104bb5f82610490565b6001810190506104a9565b5050565b601f82111561050b576104dc816103ad565b6104e5846103bf565b810160208510156104f4578190505b610508610500856103bf565b8301826104a8565b50505b505050565b5f82821c905092915050565b5f61052b5f1984600802610510565b1980831691505092915050565b5f610543838361051c565b9150826002028217905092915050565b61055c82610319565b67ffffffffffffffff81111561057557610574610323565b5b61057f825461037d565b61058a8282856104ca565b5f60209050601f8311600181146105bb575f84156105a9578287015190505b6105b38582610538565b86555061061a565b601f1984166105c9866103ad565b5f5b828110156105f0578489015182556001820191506020850194506020810190506105cb565b8683101561060d5784890151610609601f89168261051c565b8355505b6001600288020188555050505b505050505050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f61064e82610622565b610658818561062c565b9350610668818560208601610636565b80840191505092915050565b5f61067f8284610644565b915081905092915050565b6106938161042b565b811461069d575f80fd5b50565b5f815190506106ae8161068a565b92915050565b5f602082840312156106c9576106c8610290565b5b5f6106d6848285016106a0565b91505092915050565b60805160a05161240861070e5f395f6107a901525f81816105f5015281816107da015261119701526124085ff3fe608060405234801561000f575f80fd5b506004361061018c575f3560e01c8063866c99e2116100dc578063ba08765211610095578063ce96cb771161006f578063ce96cb7714610532578063d905777e14610562578063dd62ed3e14610592578063ef8b30f7146105c25761018c565b8063ba087652146104a2578063c63d75b6146104d2578063c6e6f592146105025761018c565b8063866c99e2146103a657806394bf804d146103c457806395d89b41146103f4578063a9059cbb14610412578063b3d7f6b914610442578063b460af94146104725761018c565b806323b872dd11610149578063402d267d11610123578063402d267d146102e65780634cdad506146103165780636e553f651461034657806370a08231146103765761018c565b806323b872dd1461027a578063313ce567146102aa57806338d52e0f146102c85761018c565b806301e1d1141461019057806306fdde03146101ae57806307a2d13a146101cc578063095ea7b3146101fc5780630a28a4771461022c57806318160ddd1461025c575b5f80fd5b6101986105f2565b6040516101a59190611a86565b60405180910390f35b6101b6610690565b6040516101c39190611b0f565b60405180910390f35b6101e660048036038101906101e19190611b5d565b610720565b6040516101f39190611a86565b60405180910390f35b61021660048036038101906102119190611be2565b610732565b6040516102239190611c3a565b60405180910390f35b61024660048036038101906102419190611b5d565b610754565b6040516102539190611a86565b60405180910390f35b610264610767565b6040516102719190611a86565b60405180910390f35b610294600480360381019061028f9190611c53565b610770565b6040516102a19190611c3a565b60405180910390f35b6102b261079e565b6040516102bf9190611cbe565b60405180910390f35b6102d06107d7565b6040516102dd9190611ce6565b60405180910390f35b61030060048036038101906102fb9190611cff565b6107fe565b60405161030d9190611a86565b60405180910390f35b610330600480360381019061032b9190611b5d565b610827565b60405161033d9190611a86565b60405180910390f35b610360600480360381019061035b9190611d2a565b610839565b60405161036d9190611a86565b60405180910390f35b610390600480360381019061038b9190611cff565b6109b6565b60405161039d9190611a86565b60405180910390f35b6103ae6109fb565b6040516103bb9190611dc3565b60405180910390f35b6103de60048036038101906103d99190611d2a565b610a20565b6040516103eb9190611a86565b60405180910390f35b6103fc610a53565b6040516104099190611b0f565b60405180910390f35b61042c60048036038101906104279190611be2565b610ae3565b6040516104399190611c3a565b60405180910390f35b61045c60048036038101906104579190611b5d565b610b05565b6040516104699190611a86565b60405180910390f35b61048c60048036038101906104879190611ddc565b610b18565b6040516104999190611a86565b60405180910390f35b6104bc60048036038101906104b79190611ddc565b610c1f565b6040516104c99190611a86565b60405180910390f35b6104ec60048036038101906104e79190611cff565b610ca1565b6040516104f99190611a86565b60405180910390f35b61051c60048036038101906105179190611b5d565b610cca565b6040516105299190611a86565b60405180910390f35b61054c60048036038101906105479190611cff565b610cdc565b6040516105599190611a86565b60405180910390f35b61057c60048036038101906105779190611cff565b610cf6565b6040516105899190611a86565b60405180910390f35b6105ac60048036038101906105a79190611e2c565b610d07565b6040516105b99190611a86565b60405180910390f35b6105dc60048036038101906105d79190611b5d565b610d89565b6040516105e99190611a86565b60405180910390f35b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161064c9190611ce6565b602060405180830381865afa158015610667573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061068b9190611e7e565b905090565b60606003805461069f90611ed6565b80601f01602080910402602001604051908101604052809291908181526020018280546106cb90611ed6565b80156107165780601f106106ed57610100808354040283529160200191610716565b820191905f5260205f20905b8154815290600101906020018083116106f957829003601f168201915b5050505050905090565b5f61072b825f610d9b565b9050919050565b5f8061073c610df3565b9050610749818585610dfa565b600191505092915050565b5f610760826001610e0c565b9050919050565b5f600254905090565b5f8061077a610df3565b9050610787858285610ec5565b610792858585610f57565b60019150509392505050565b5f6107a7611047565b7f00000000000000000000000000000000000000000000000000000000000000006107d29190611f33565b905090565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050919050565b5f610832825f610d9b565b9050919050565b5f3373ffffffffffffffffffffffffffffffffffffffff1660055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c090611fb1565b60405180910390fd5b6001600560146101000a81548160ff0219169083151502179055505f8311610926576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091d90612019565b60405180910390fd5b5f610930836107fe565b90508084111561097b578284826040517f79012fb200000000000000000000000000000000000000000000000000000000815260040161097293929190612037565b60405180910390fd5b5f61098585610d89565b9050610991848261104b565b5f600560146101000a81548160ff021916908315150217905550809250505092915050565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f6040517fa9a2322b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606060048054610a6290611ed6565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8e90611ed6565b8015610ad95780601f10610ab057610100808354040283529160200191610ad9565b820191905f5260205f20905b815481529060010190602001808311610abc57829003601f168201915b5050505050905090565b5f80610aed610df3565b9050610afa818585610f57565b600191505092915050565b5f610b11826001610d9b565b9050919050565b5f3373ffffffffffffffffffffffffffffffffffffffff1660055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ba8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9f90611fb1565b60405180910390fd5b5f610bb283610cdc565b905080851115610bfd578285826040517ffe9cceec000000000000000000000000000000000000000000000000000000008152600401610bf493929190612037565b60405180910390fd5b5f610c0786610754565b9050610c1384826110ca565b81925050509392505050565b5f80610c2a83610cf6565b905080851115610c75578285826040517fb94abeec000000000000000000000000000000000000000000000000000000008152600401610c6c93929190612037565b60405180910390fd5b5f610c7f86610827565b9050610c95610c8c610df3565b8686848a611149565b80925050509392505050565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050919050565b5f610cd5825f610e0c565b9050919050565b5f610cef610ce9836109b6565b5f610d9b565b9050919050565b5f610d00826109b6565b9050919050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f610d94825f610e0c565b9050919050565b5f610deb6001610da96105f2565b610db3919061206c565b610dbb611047565b600a610dc791906121ce565b610dcf610767565b610dd9919061206c565b8486611242909392919063ffffffff16565b905092915050565b5f33905090565b610e078383836001611297565b505050565b5f600560149054906101000a900460ff1615610e7857610e7183610e2e611047565b600a610e3a91906121ce565b610e42610767565b610e4c919061206c565b600186610e576105f2565b610e619190612218565b610e6b919061206c565b85611242565b9050610ebf565b610ebc83610e84611047565b600a610e9091906121ce565b610e98610767565b610ea2919061206c565b6001610eac6105f2565b610eb6919061206c565b85611242565b90505b92915050565b5f610ed08484610d07565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610f515781811015610f42578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610f3993929190612037565b60405180910390fd5b610f5084848484035f611297565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610fc7575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610fbe9190611ce6565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611037575f6040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161102e9190611ce6565b60405180910390fd5b611042838383611466565b505050565b5f90565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110bb575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016110b29190611ce6565b60405180910390fd5b6110c65f8383611466565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361113a575f6040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016111319190611ce6565b60405180910390fd5b611145825f83611466565b5050565b8273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461118857611187838683610ec5565b5b61119283826110ca565b6111bd7f0000000000000000000000000000000000000000000000000000000000000000858461167f565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db858560405161123392919061224b565b60405180910390a45050505050565b5f8061124f8686866116fe565b905061125a836117fd565b801561127657505f848061127157611270612272565b5b868809115b1561128b57600181611288919061206c565b90505b80915050949350505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611307575f6040517fe602df050000000000000000000000000000000000000000000000000000000081526004016112fe9190611ce6565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611377575f6040517f94280d6200000000000000000000000000000000000000000000000000000000815260040161136e9190611ce6565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015611460578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516114579190611a86565b60405180910390a35b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036114b6578060025f8282546114aa919061206c565b92505081905550611584565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490508181101561153f578381836040517fe450d38c00000000000000000000000000000000000000000000000000000000815260040161153693929190612037565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115cb578060025f8282540392505081905550611615565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516116729190611a86565b60405180910390a3505050565b6116f9838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016116b292919061229f565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061182a565b505050565b5f8083850290505f8019858709828110838203039150505f81036117365783828161172c5761172b612272565b5b04925050506117f6565b80841161176f576040517f227bc15300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8486880990508281118203915080830392505f855f038616905080860495508084049350600181825f0304019050808302841793505f600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b5f60016002836003811115611815576118146122c6565b5b61181f91906122f3565b60ff16149050919050565b5f611854828473ffffffffffffffffffffffffffffffffffffffff166118bf90919063ffffffff16565b90505f815114158015611878575080806020019051810190611876919061234d565b155b156118ba57826040517f5274afe70000000000000000000000000000000000000000000000000000000081526004016118b19190611ce6565b60405180910390fd5b505050565b60606118cc83835f6118d4565b905092915050565b60608147101561191b57306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016119129190611ce6565b60405180910390fd5b5f808573ffffffffffffffffffffffffffffffffffffffff16848660405161194391906123bc565b5f6040518083038185875af1925050503d805f811461197d576040519150601f19603f3d011682016040523d82523d5f602084013e611982565b606091505b509150915061199286838361199d565b925050509392505050565b6060826119b2576119ad82611a2a565b611a22565b5f82511480156119d857505f8473ffffffffffffffffffffffffffffffffffffffff163b145b15611a1a57836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401611a119190611ce6565b60405180910390fd5b819050611a23565b5b9392505050565b5f81511115611a3c5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f819050919050565b611a8081611a6e565b82525050565b5f602082019050611a995f830184611a77565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f611ae182611a9f565b611aeb8185611aa9565b9350611afb818560208601611ab9565b611b0481611ac7565b840191505092915050565b5f6020820190508181035f830152611b278184611ad7565b905092915050565b5f80fd5b611b3c81611a6e565b8114611b46575f80fd5b50565b5f81359050611b5781611b33565b92915050565b5f60208284031215611b7257611b71611b2f565b5b5f611b7f84828501611b49565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611bb182611b88565b9050919050565b611bc181611ba7565b8114611bcb575f80fd5b50565b5f81359050611bdc81611bb8565b92915050565b5f8060408385031215611bf857611bf7611b2f565b5b5f611c0585828601611bce565b9250506020611c1685828601611b49565b9150509250929050565b5f8115159050919050565b611c3481611c20565b82525050565b5f602082019050611c4d5f830184611c2b565b92915050565b5f805f60608486031215611c6a57611c69611b2f565b5b5f611c7786828701611bce565b9350506020611c8886828701611bce565b9250506040611c9986828701611b49565b9150509250925092565b5f60ff82169050919050565b611cb881611ca3565b82525050565b5f602082019050611cd15f830184611caf565b92915050565b611ce081611ba7565b82525050565b5f602082019050611cf95f830184611cd7565b92915050565b5f60208284031215611d1457611d13611b2f565b5b5f611d2184828501611bce565b91505092915050565b5f8060408385031215611d4057611d3f611b2f565b5b5f611d4d85828601611b49565b9250506020611d5e85828601611bce565b9150509250929050565b5f819050919050565b5f611d8b611d86611d8184611b88565b611d68565b611b88565b9050919050565b5f611d9c82611d71565b9050919050565b5f611dad82611d92565b9050919050565b611dbd81611da3565b82525050565b5f602082019050611dd65f830184611db4565b92915050565b5f805f60608486031215611df357611df2611b2f565b5b5f611e0086828701611b49565b9350506020611e1186828701611bce565b9250506040611e2286828701611bce565b9150509250925092565b5f8060408385031215611e4257611e41611b2f565b5b5f611e4f85828601611bce565b9250506020611e6085828601611bce565b9150509250929050565b5f81519050611e7881611b33565b92915050565b5f60208284031215611e9357611e92611b2f565b5b5f611ea084828501611e6a565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680611eed57607f821691505b602082108103611f0057611eff611ea9565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611f3d82611ca3565b9150611f4883611ca3565b9250828201905060ff811115611f6157611f60611f06565b5b92915050565b7f53656e646572206973204e6f74205661756c74730000000000000000000000005f82015250565b5f611f9b601483611aa9565b9150611fa682611f67565b602082019050919050565b5f6020820190508181035f830152611fc881611f8f565b9050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e20300000005f82015250565b5f612003601d83611aa9565b915061200e82611fcf565b602082019050919050565b5f6020820190508181035f83015261203081611ff7565b9050919050565b5f60608201905061204a5f830186611cd7565b6120576020830185611a77565b6120646040830184611a77565b949350505050565b5f61207682611a6e565b915061208183611a6e565b925082820190508082111561209957612098611f06565b5b92915050565b5f8160011c9050919050565b5f808291508390505b60018511156120f4578086048111156120d0576120cf611f06565b5b60018516156120df5780820291505b80810290506120ed8561209f565b94506120b4565b94509492505050565b5f8261210c57600190506121c7565b81612119575f90506121c7565b816001811461212f576002811461213957612168565b60019150506121c7565b60ff84111561214b5761214a611f06565b5b8360020a91508482111561216257612161611f06565b5b506121c7565b5060208310610133831016604e8410600b841016171561219d5782820a90508381111561219857612197611f06565b5b6121c7565b6121aa84848460016120ab565b925090508184048111156121c1576121c0611f06565b5b81810290505b9392505050565b5f6121d882611a6e565b91506121e383611ca3565b92506122107fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846120fd565b905092915050565b5f61222282611a6e565b915061222d83611a6e565b925082820390508181111561224557612244611f06565b5b92915050565b5f60408201905061225e5f830185611a77565b61226b6020830184611a77565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6040820190506122b25f830185611cd7565b6122bf6020830184611a77565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b5f6122fd82611ca3565b915061230883611ca3565b92508261231857612317612272565b5b828206905092915050565b61232c81611c20565b8114612336575f80fd5b50565b5f8151905061234781612323565b92915050565b5f6020828403121561236257612361611b2f565b5b5f61236f84828501612339565b91505092915050565b5f81519050919050565b5f81905092915050565b5f61239682612378565b6123a08185612382565b93506123b0818560208601611ab9565b80840191505092915050565b5f6123c7828461238c565b91508190509291505056fea264697066735822122003634230a2ae1b2e8a1dc9432523ae5c48734f5090ac093502859b70f72cf95564736f6c63430008190033",
							"opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE PUSH0 PUSH1 0x5 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH2 0x29 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x2B16 CODESIZE SUB DUP1 PUSH2 0x2B16 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x4B SWAP2 SWAP1 PUSH2 0x2EE JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x522D736861726564206155534443000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x7273615553444300000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH2 0xC7 SWAP2 SWAP1 PUSH2 0x553 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP2 PUSH2 0xD7 SWAP2 SWAP1 PUSH2 0x553 JUMP JUMPDEST POP POP POP PUSH0 DUP1 PUSH2 0xEB DUP4 PUSH2 0x187 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0xFB JUMPI PUSH1 0x12 PUSH2 0xFD JUMP JUMPDEST DUP1 JUMPDEST PUSH1 0xFF AND PUSH1 0xA0 DUP2 PUSH1 0xFF AND DUP2 MSTORE POP POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP POP POP DUP1 PUSH1 0x5 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH2 0x6DF JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH4 0x313CE567 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD PUSH2 0x1FA SWAP2 SWAP1 PUSH2 0x674 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x232 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x237 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x24B JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x282 JUMPI PUSH0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x265 SWAP2 SWAP1 PUSH2 0x6B4 JUMP JUMPDEST SWAP1 POP PUSH1 0xFF DUP1 AND DUP2 GT PUSH2 0x280 JUMPI PUSH1 0x1 DUP2 SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x28B JUMP JUMPDEST POP JUMPDEST PUSH0 DUP1 SWAP4 POP SWAP4 POP POP POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x2BD DUP3 PUSH2 0x294 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2CD DUP2 PUSH2 0x2B3 JUMP JUMPDEST DUP2 EQ PUSH2 0x2D7 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x2E8 DUP2 PUSH2 0x2C4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x303 JUMPI PUSH2 0x302 PUSH2 0x290 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x310 DUP5 DUP3 DUP6 ADD PUSH2 0x2DA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x394 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x3A7 JUMPI PUSH2 0x3A6 PUSH2 0x350 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP DUP2 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 DUP4 MUL PUSH2 0x409 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x3CE JUMP JUMPDEST PUSH2 0x413 DUP7 DUP4 PUSH2 0x3CE JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x457 PUSH2 0x452 PUSH2 0x44D DUP5 PUSH2 0x42B JUMP JUMPDEST PUSH2 0x434 JUMP JUMPDEST PUSH2 0x42B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x470 DUP4 PUSH2 0x43D JUMP JUMPDEST PUSH2 0x484 PUSH2 0x47C DUP3 PUSH2 0x45E JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x3DA JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH2 0x498 PUSH2 0x48C JUMP JUMPDEST PUSH2 0x4A3 DUP2 DUP5 DUP5 PUSH2 0x467 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4C6 JUMPI PUSH2 0x4BB PUSH0 DUP3 PUSH2 0x490 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x4A9 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x50B JUMPI PUSH2 0x4DC DUP2 PUSH2 0x3AD JUMP JUMPDEST PUSH2 0x4E5 DUP5 PUSH2 0x3BF JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x4F4 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x508 PUSH2 0x500 DUP6 PUSH2 0x3BF JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x4A8 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x52B PUSH0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x510 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x543 DUP4 DUP4 PUSH2 0x51C JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x55C DUP3 PUSH2 0x319 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x575 JUMPI PUSH2 0x574 PUSH2 0x323 JUMP JUMPDEST JUMPDEST PUSH2 0x57F DUP3 SLOAD PUSH2 0x37D JUMP JUMPDEST PUSH2 0x58A DUP3 DUP3 DUP6 PUSH2 0x4CA JUMP JUMPDEST PUSH0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x5BB JUMPI PUSH0 DUP5 ISZERO PUSH2 0x5A9 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x5B3 DUP6 DUP3 PUSH2 0x538 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x61A JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x5C9 DUP7 PUSH2 0x3AD JUMP JUMPDEST PUSH0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x5F0 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x5CB JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x60D JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x609 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x51C JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x64E DUP3 PUSH2 0x622 JUMP JUMPDEST PUSH2 0x658 DUP2 DUP6 PUSH2 0x62C JUMP JUMPDEST SWAP4 POP PUSH2 0x668 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x636 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x67F DUP3 DUP5 PUSH2 0x644 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x693 DUP2 PUSH2 0x42B JUMP JUMPDEST DUP2 EQ PUSH2 0x69D JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x6AE DUP2 PUSH2 0x68A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6C9 JUMPI PUSH2 0x6C8 PUSH2 0x290 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x6D6 DUP5 DUP3 DUP6 ADD PUSH2 0x6A0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x2408 PUSH2 0x70E PUSH0 CODECOPY PUSH0 PUSH2 0x7A9 ADD MSTORE PUSH0 DUP2 DUP2 PUSH2 0x5F5 ADD MSTORE DUP2 DUP2 PUSH2 0x7DA ADD MSTORE PUSH2 0x1197 ADD MSTORE PUSH2 0x2408 PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x18C JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x866C99E2 GT PUSH2 0xDC JUMPI DUP1 PUSH4 0xBA087652 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xCE96CB77 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xCE96CB77 EQ PUSH2 0x532 JUMPI DUP1 PUSH4 0xD905777E EQ PUSH2 0x562 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x592 JUMPI DUP1 PUSH4 0xEF8B30F7 EQ PUSH2 0x5C2 JUMPI PUSH2 0x18C JUMP JUMPDEST DUP1 PUSH4 0xBA087652 EQ PUSH2 0x4A2 JUMPI DUP1 PUSH4 0xC63D75B6 EQ PUSH2 0x4D2 JUMPI DUP1 PUSH4 0xC6E6F592 EQ PUSH2 0x502 JUMPI PUSH2 0x18C JUMP JUMPDEST DUP1 PUSH4 0x866C99E2 EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0x94BF804D EQ PUSH2 0x3C4 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3F4 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x412 JUMPI DUP1 PUSH4 0xB3D7F6B9 EQ PUSH2 0x442 JUMPI DUP1 PUSH4 0xB460AF94 EQ PUSH2 0x472 JUMPI PUSH2 0x18C JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x402D267D GT PUSH2 0x123 JUMPI DUP1 PUSH4 0x402D267D EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x4CDAD506 EQ PUSH2 0x316 JUMPI DUP1 PUSH4 0x6E553F65 EQ PUSH2 0x346 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x376 JUMPI PUSH2 0x18C JUMP JUMPDEST DUP1 PUSH4 0x23B872DD EQ PUSH2 0x27A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2AA JUMPI DUP1 PUSH4 0x38D52E0F EQ PUSH2 0x2C8 JUMPI PUSH2 0x18C JUMP JUMPDEST DUP1 PUSH4 0x1E1D114 EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0x7A2D13A EQ PUSH2 0x1CC JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0xA28A477 EQ PUSH2 0x22C JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x25C JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x198 PUSH2 0x5F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A5 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B6 PUSH2 0x690 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C3 SWAP2 SWAP1 PUSH2 0x1B0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E1 SWAP2 SWAP1 PUSH2 0x1B5D JUMP JUMPDEST PUSH2 0x720 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x216 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x211 SWAP2 SWAP1 PUSH2 0x1BE2 JUMP JUMPDEST PUSH2 0x732 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x223 SWAP2 SWAP1 PUSH2 0x1C3A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x246 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x241 SWAP2 SWAP1 PUSH2 0x1B5D JUMP JUMPDEST PUSH2 0x754 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x253 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x264 PUSH2 0x767 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x294 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x28F SWAP2 SWAP1 PUSH2 0x1C53 JUMP JUMPDEST PUSH2 0x770 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x1C3A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B2 PUSH2 0x79E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BF SWAP2 SWAP1 PUSH2 0x1CBE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2D0 PUSH2 0x7D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2DD SWAP2 SWAP1 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x300 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2FB SWAP2 SWAP1 PUSH2 0x1CFF JUMP JUMPDEST PUSH2 0x7FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30D SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x330 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x32B SWAP2 SWAP1 PUSH2 0x1B5D JUMP JUMPDEST PUSH2 0x827 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x33D SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x360 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x35B SWAP2 SWAP1 PUSH2 0x1D2A JUMP JUMPDEST PUSH2 0x839 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x36D SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x38B SWAP2 SWAP1 PUSH2 0x1CFF JUMP JUMPDEST PUSH2 0x9B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x39D SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3AE PUSH2 0x9FB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3BB SWAP2 SWAP1 PUSH2 0x1DC3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3DE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3D9 SWAP2 SWAP1 PUSH2 0x1D2A JUMP JUMPDEST PUSH2 0xA20 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3EB SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3FC PUSH2 0xA53 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x409 SWAP2 SWAP1 PUSH2 0x1B0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x42C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x427 SWAP2 SWAP1 PUSH2 0x1BE2 JUMP JUMPDEST PUSH2 0xAE3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x439 SWAP2 SWAP1 PUSH2 0x1C3A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x45C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x457 SWAP2 SWAP1 PUSH2 0x1B5D JUMP JUMPDEST PUSH2 0xB05 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x469 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x48C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x487 SWAP2 SWAP1 PUSH2 0x1DDC JUMP JUMPDEST PUSH2 0xB18 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x499 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4BC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4B7 SWAP2 SWAP1 PUSH2 0x1DDC JUMP JUMPDEST PUSH2 0xC1F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4C9 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4EC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4E7 SWAP2 SWAP1 PUSH2 0x1CFF JUMP JUMPDEST PUSH2 0xCA1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4F9 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x51C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x517 SWAP2 SWAP1 PUSH2 0x1B5D JUMP JUMPDEST PUSH2 0xCCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x529 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x54C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x547 SWAP2 SWAP1 PUSH2 0x1CFF JUMP JUMPDEST PUSH2 0xCDC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x559 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x57C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x577 SWAP2 SWAP1 PUSH2 0x1CFF JUMP JUMPDEST PUSH2 0xCF6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x589 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5AC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5A7 SWAP2 SWAP1 PUSH2 0x1E2C JUMP JUMPDEST PUSH2 0xD07 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B9 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5DC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5D7 SWAP2 SWAP1 PUSH2 0x1B5D JUMP JUMPDEST PUSH2 0xD89 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5E9 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64C SWAP2 SWAP1 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x667 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x68B SWAP2 SWAP1 PUSH2 0x1E7E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x69F SWAP1 PUSH2 0x1ED6 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6CB SWAP1 PUSH2 0x1ED6 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x716 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6ED JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x716 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x6F9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x72B DUP3 PUSH0 PUSH2 0xD9B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x73C PUSH2 0xDF3 JUMP JUMPDEST SWAP1 POP PUSH2 0x749 DUP2 DUP6 DUP6 PUSH2 0xDFA JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x760 DUP3 PUSH1 0x1 PUSH2 0xE0C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x77A PUSH2 0xDF3 JUMP JUMPDEST SWAP1 POP PUSH2 0x787 DUP6 DUP3 DUP6 PUSH2 0xEC5 JUMP JUMPDEST PUSH2 0x792 DUP6 DUP6 DUP6 PUSH2 0xF57 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x7A7 PUSH2 0x1047 JUMP JUMPDEST PUSH32 0x0 PUSH2 0x7D2 SWAP2 SWAP1 PUSH2 0x1F33 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x832 DUP3 PUSH0 PUSH2 0xD9B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x8C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8C0 SWAP1 PUSH2 0x1FB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x5 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH0 DUP4 GT PUSH2 0x926 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x91D SWAP1 PUSH2 0x2019 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x930 DUP4 PUSH2 0x7FE JUMP JUMPDEST SWAP1 POP DUP1 DUP5 GT ISZERO PUSH2 0x97B JUMPI DUP3 DUP5 DUP3 PUSH1 0x40 MLOAD PUSH32 0x79012FB200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x972 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x985 DUP6 PUSH2 0xD89 JUMP JUMPDEST SWAP1 POP PUSH2 0x991 DUP5 DUP3 PUSH2 0x104B JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD PUSH32 0xA9A2322B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0xA62 SWAP1 PUSH2 0x1ED6 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA8E SWAP1 PUSH2 0x1ED6 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xAD9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xAB0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xAD9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xABC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xAED PUSH2 0xDF3 JUMP JUMPDEST SWAP1 POP PUSH2 0xAFA DUP2 DUP6 DUP6 PUSH2 0xF57 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xB11 DUP3 PUSH1 0x1 PUSH2 0xD9B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBA8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB9F SWAP1 PUSH2 0x1FB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0xBB2 DUP4 PUSH2 0xCDC JUMP JUMPDEST SWAP1 POP DUP1 DUP6 GT ISZERO PUSH2 0xBFD JUMPI DUP3 DUP6 DUP3 PUSH1 0x40 MLOAD PUSH32 0xFE9CCEEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBF4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0xC07 DUP7 PUSH2 0x754 JUMP JUMPDEST SWAP1 POP PUSH2 0xC13 DUP5 DUP3 PUSH2 0x10CA JUMP JUMPDEST DUP2 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xC2A DUP4 PUSH2 0xCF6 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 GT ISZERO PUSH2 0xC75 JUMPI DUP3 DUP6 DUP3 PUSH1 0x40 MLOAD PUSH32 0xB94ABEEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC6C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0xC7F DUP7 PUSH2 0x827 JUMP JUMPDEST SWAP1 POP PUSH2 0xC95 PUSH2 0xC8C PUSH2 0xDF3 JUMP JUMPDEST DUP7 DUP7 DUP5 DUP11 PUSH2 0x1149 JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xCD5 DUP3 PUSH0 PUSH2 0xE0C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xCEF PUSH2 0xCE9 DUP4 PUSH2 0x9B6 JUMP JUMPDEST PUSH0 PUSH2 0xD9B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xD00 DUP3 PUSH2 0x9B6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xD94 DUP3 PUSH0 PUSH2 0xE0C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xDEB PUSH1 0x1 PUSH2 0xDA9 PUSH2 0x5F2 JUMP JUMPDEST PUSH2 0xDB3 SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST PUSH2 0xDBB PUSH2 0x1047 JUMP JUMPDEST PUSH1 0xA PUSH2 0xDC7 SWAP2 SWAP1 PUSH2 0x21CE JUMP JUMPDEST PUSH2 0xDCF PUSH2 0x767 JUMP JUMPDEST PUSH2 0xDD9 SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST DUP5 DUP7 PUSH2 0x1242 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xE07 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1297 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xE78 JUMPI PUSH2 0xE71 DUP4 PUSH2 0xE2E PUSH2 0x1047 JUMP JUMPDEST PUSH1 0xA PUSH2 0xE3A SWAP2 SWAP1 PUSH2 0x21CE JUMP JUMPDEST PUSH2 0xE42 PUSH2 0x767 JUMP JUMPDEST PUSH2 0xE4C SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST PUSH1 0x1 DUP7 PUSH2 0xE57 PUSH2 0x5F2 JUMP JUMPDEST PUSH2 0xE61 SWAP2 SWAP1 PUSH2 0x2218 JUMP JUMPDEST PUSH2 0xE6B SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST DUP6 PUSH2 0x1242 JUMP JUMPDEST SWAP1 POP PUSH2 0xEBF JUMP JUMPDEST PUSH2 0xEBC DUP4 PUSH2 0xE84 PUSH2 0x1047 JUMP JUMPDEST PUSH1 0xA PUSH2 0xE90 SWAP2 SWAP1 PUSH2 0x21CE JUMP JUMPDEST PUSH2 0xE98 PUSH2 0x767 JUMP JUMPDEST PUSH2 0xEA2 SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST PUSH1 0x1 PUSH2 0xEAC PUSH2 0x5F2 JUMP JUMPDEST PUSH2 0xEB6 SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST DUP6 PUSH2 0x1242 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xED0 DUP5 DUP5 PUSH2 0xD07 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0xF51 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xF42 JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF39 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF50 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x1297 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xFC7 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFBE SWAP2 SWAP1 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1037 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x102E SWAP2 SWAP1 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1042 DUP4 DUP4 DUP4 PUSH2 0x1466 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x10BB JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10B2 SWAP2 SWAP1 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x10C6 PUSH0 DUP4 DUP4 PUSH2 0x1466 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x113A JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1131 SWAP2 SWAP1 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1145 DUP3 PUSH0 DUP4 PUSH2 0x1466 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1188 JUMPI PUSH2 0x1187 DUP4 DUP7 DUP4 PUSH2 0xEC5 JUMP JUMPDEST JUMPDEST PUSH2 0x1192 DUP4 DUP3 PUSH2 0x10CA JUMP JUMPDEST PUSH2 0x11BD PUSH32 0x0 DUP6 DUP5 PUSH2 0x167F JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFBDE797D201C681B91056529119E0B02407C7BB96A4A2C75C01FC9667232C8DB DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1233 SWAP3 SWAP2 SWAP1 PUSH2 0x224B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x124F DUP7 DUP7 DUP7 PUSH2 0x16FE JUMP JUMPDEST SWAP1 POP PUSH2 0x125A DUP4 PUSH2 0x17FD JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1276 JUMPI POP PUSH0 DUP5 DUP1 PUSH2 0x1271 JUMPI PUSH2 0x1270 PUSH2 0x2272 JUMP JUMPDEST JUMPDEST DUP7 DUP9 MULMOD GT JUMPDEST ISZERO PUSH2 0x128B JUMPI PUSH1 0x1 DUP2 PUSH2 0x1288 SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1307 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12FE SWAP2 SWAP1 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1377 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x136E SWAP2 SWAP1 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1460 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1457 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x14B6 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x14AA SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1584 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x153F JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1536 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x15CB JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1615 JUMP JUMPDEST DUP1 PUSH0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x1672 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x16F9 DUP4 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x16B2 SWAP3 SWAP2 SWAP1 PUSH2 0x229F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x182A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP1 DUP4 DUP6 MUL SWAP1 POP PUSH0 DUP1 NOT DUP6 DUP8 MULMOD DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP PUSH0 DUP2 SUB PUSH2 0x1736 JUMPI DUP4 DUP3 DUP2 PUSH2 0x172C JUMPI PUSH2 0x172B PUSH2 0x2272 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP POP POP PUSH2 0x17F6 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x176F JUMPI PUSH1 0x40 MLOAD PUSH32 0x227BC15300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP5 DUP7 DUP9 MULMOD SWAP1 POP DUP3 DUP2 GT DUP3 SUB SWAP2 POP DUP1 DUP4 SUB SWAP3 POP PUSH0 DUP6 PUSH0 SUB DUP7 AND SWAP1 POP DUP1 DUP7 DIV SWAP6 POP DUP1 DUP5 DIV SWAP4 POP PUSH1 0x1 DUP2 DUP3 PUSH0 SUB DIV ADD SWAP1 POP DUP1 DUP4 MUL DUP5 OR SWAP4 POP PUSH0 PUSH1 0x2 DUP8 PUSH1 0x3 MUL XOR SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP6 MUL SWAP6 POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x2 DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1815 JUMPI PUSH2 0x1814 PUSH2 0x22C6 JUMP JUMPDEST JUMPDEST PUSH2 0x181F SWAP2 SWAP1 PUSH2 0x22F3 JUMP JUMPDEST PUSH1 0xFF AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1854 DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x18BF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 MLOAD EQ ISZERO DUP1 ISZERO PUSH2 0x1878 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1876 SWAP2 SWAP1 PUSH2 0x234D JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x18BA JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18B1 SWAP2 SWAP1 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x18CC DUP4 DUP4 PUSH0 PUSH2 0x18D4 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 SELFBALANCE LT ISZERO PUSH2 0x191B JUMPI ADDRESS PUSH1 0x40 MLOAD PUSH32 0xCD78605900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1912 SWAP2 SWAP1 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP7 PUSH1 0x40 MLOAD PUSH2 0x1943 SWAP2 SWAP1 PUSH2 0x23BC JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x197D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1982 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1992 DUP7 DUP4 DUP4 PUSH2 0x199D JUMP JUMPDEST SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x19B2 JUMPI PUSH2 0x19AD DUP3 PUSH2 0x1A2A JUMP JUMPDEST PUSH2 0x1A22 JUMP JUMPDEST PUSH0 DUP3 MLOAD EQ DUP1 ISZERO PUSH2 0x19D8 JUMPI POP PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST ISZERO PUSH2 0x1A1A JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x9996B31500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A11 SWAP2 SWAP1 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP PUSH2 0x1A23 JUMP JUMPDEST JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD GT ISZERO PUSH2 0x1A3C JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1425EA4200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A80 DUP2 PUSH2 0x1A6E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1A99 PUSH0 DUP4 ADD DUP5 PUSH2 0x1A77 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1AE1 DUP3 PUSH2 0x1A9F JUMP JUMPDEST PUSH2 0x1AEB DUP2 DUP6 PUSH2 0x1AA9 JUMP JUMPDEST SWAP4 POP PUSH2 0x1AFB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1AB9 JUMP JUMPDEST PUSH2 0x1B04 DUP2 PUSH2 0x1AC7 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1B27 DUP2 DUP5 PUSH2 0x1AD7 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1B3C DUP2 PUSH2 0x1A6E JUMP JUMPDEST DUP2 EQ PUSH2 0x1B46 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1B57 DUP2 PUSH2 0x1B33 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B72 JUMPI PUSH2 0x1B71 PUSH2 0x1B2F JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1B7F DUP5 DUP3 DUP6 ADD PUSH2 0x1B49 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1BB1 DUP3 PUSH2 0x1B88 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BC1 DUP2 PUSH2 0x1BA7 JUMP JUMPDEST DUP2 EQ PUSH2 0x1BCB JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1BDC DUP2 PUSH2 0x1BB8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BF8 JUMPI PUSH2 0x1BF7 PUSH2 0x1B2F JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1C05 DUP6 DUP3 DUP7 ADD PUSH2 0x1BCE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1C16 DUP6 DUP3 DUP7 ADD PUSH2 0x1B49 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C34 DUP2 PUSH2 0x1C20 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1C4D PUSH0 DUP4 ADD DUP5 PUSH2 0x1C2B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1C6A JUMPI PUSH2 0x1C69 PUSH2 0x1B2F JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1C77 DUP7 DUP3 DUP8 ADD PUSH2 0x1BCE JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1C88 DUP7 DUP3 DUP8 ADD PUSH2 0x1BCE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1C99 DUP7 DUP3 DUP8 ADD PUSH2 0x1B49 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1CB8 DUP2 PUSH2 0x1CA3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1CD1 PUSH0 DUP4 ADD DUP5 PUSH2 0x1CAF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1CE0 DUP2 PUSH2 0x1BA7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1CF9 PUSH0 DUP4 ADD DUP5 PUSH2 0x1CD7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D14 JUMPI PUSH2 0x1D13 PUSH2 0x1B2F JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1D21 DUP5 DUP3 DUP6 ADD PUSH2 0x1BCE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D40 JUMPI PUSH2 0x1D3F PUSH2 0x1B2F JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1D4D DUP6 DUP3 DUP7 ADD PUSH2 0x1B49 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1D5E DUP6 DUP3 DUP7 ADD PUSH2 0x1BCE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1D8B PUSH2 0x1D86 PUSH2 0x1D81 DUP5 PUSH2 0x1B88 JUMP JUMPDEST PUSH2 0x1D68 JUMP JUMPDEST PUSH2 0x1B88 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1D9C DUP3 PUSH2 0x1D71 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1DAD DUP3 PUSH2 0x1D92 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1DBD DUP2 PUSH2 0x1DA3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1DD6 PUSH0 DUP4 ADD DUP5 PUSH2 0x1DB4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1DF3 JUMPI PUSH2 0x1DF2 PUSH2 0x1B2F JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1E00 DUP7 DUP3 DUP8 ADD PUSH2 0x1B49 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1E11 DUP7 DUP3 DUP8 ADD PUSH2 0x1BCE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1E22 DUP7 DUP3 DUP8 ADD PUSH2 0x1BCE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E42 JUMPI PUSH2 0x1E41 PUSH2 0x1B2F JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1E4F DUP6 DUP3 DUP7 ADD PUSH2 0x1BCE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1E60 DUP6 DUP3 DUP7 ADD PUSH2 0x1BCE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x1E78 DUP2 PUSH2 0x1B33 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E93 JUMPI PUSH2 0x1E92 PUSH2 0x1B2F JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1EA0 DUP5 DUP3 DUP6 ADD PUSH2 0x1E6A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1EED JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1F00 JUMPI PUSH2 0x1EFF PUSH2 0x1EA9 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x1F3D DUP3 PUSH2 0x1CA3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F48 DUP4 PUSH2 0x1CA3 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH1 0xFF DUP2 GT ISZERO PUSH2 0x1F61 JUMPI PUSH2 0x1F60 PUSH2 0x1F06 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x53656E646572206973204E6F74205661756C7473000000000000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x1F9B PUSH1 0x14 DUP4 PUSH2 0x1AA9 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FA6 DUP3 PUSH2 0x1F67 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1FC8 DUP2 PUSH2 0x1F8F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416D6F756E74206D7573742062652067726561746572207468616E2030000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x2003 PUSH1 0x1D DUP4 PUSH2 0x1AA9 JUMP JUMPDEST SWAP2 POP PUSH2 0x200E DUP3 PUSH2 0x1FCF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x2030 DUP2 PUSH2 0x1FF7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x204A PUSH0 DUP4 ADD DUP7 PUSH2 0x1CD7 JUMP JUMPDEST PUSH2 0x2057 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1A77 JUMP JUMPDEST PUSH2 0x2064 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1A77 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2076 DUP3 PUSH2 0x1A6E JUMP JUMPDEST SWAP2 POP PUSH2 0x2081 DUP4 PUSH2 0x1A6E JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x2099 JUMPI PUSH2 0x2098 PUSH2 0x1F06 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH2 0x20F4 JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 0x20D0 JUMPI PUSH2 0x20CF PUSH2 0x1F06 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x20DF JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 0x20ED DUP6 PUSH2 0x209F JUMP JUMPDEST SWAP5 POP PUSH2 0x20B4 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x210C JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x21C7 JUMP JUMPDEST DUP2 PUSH2 0x2119 JUMPI PUSH0 SWAP1 POP PUSH2 0x21C7 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x212F JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x2139 JUMPI PUSH2 0x2168 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x21C7 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x214B JUMPI PUSH2 0x214A PUSH2 0x1F06 JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0x2162 JUMPI PUSH2 0x2161 PUSH2 0x1F06 JUMP JUMPDEST JUMPDEST POP PUSH2 0x21C7 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x219D JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x2198 JUMPI PUSH2 0x2197 PUSH2 0x1F06 JUMP JUMPDEST JUMPDEST PUSH2 0x21C7 JUMP JUMPDEST PUSH2 0x21AA DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x20AB JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 0x21C1 JUMPI PUSH2 0x21C0 PUSH2 0x1F06 JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x21D8 DUP3 PUSH2 0x1A6E JUMP JUMPDEST SWAP2 POP PUSH2 0x21E3 DUP4 PUSH2 0x1CA3 JUMP JUMPDEST SWAP3 POP PUSH2 0x2210 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH2 0x20FD JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2222 DUP3 PUSH2 0x1A6E JUMP JUMPDEST SWAP2 POP PUSH2 0x222D DUP4 PUSH2 0x1A6E JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2245 JUMPI PUSH2 0x2244 PUSH2 0x1F06 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x225E PUSH0 DUP4 ADD DUP6 PUSH2 0x1A77 JUMP JUMPDEST PUSH2 0x226B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1A77 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x22B2 PUSH0 DUP4 ADD DUP6 PUSH2 0x1CD7 JUMP JUMPDEST PUSH2 0x22BF PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1A77 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x22FD DUP3 PUSH2 0x1CA3 JUMP JUMPDEST SWAP2 POP PUSH2 0x2308 DUP4 PUSH2 0x1CA3 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2318 JUMPI PUSH2 0x2317 PUSH2 0x2272 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x232C DUP2 PUSH2 0x1C20 JUMP JUMPDEST DUP2 EQ PUSH2 0x2336 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x2347 DUP2 PUSH2 0x2323 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2362 JUMPI PUSH2 0x2361 PUSH2 0x1B2F JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x236F DUP5 DUP3 DUP6 ADD PUSH2 0x2339 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2396 DUP3 PUSH2 0x2378 JUMP JUMPDEST PUSH2 0x23A0 DUP2 DUP6 PUSH2 0x2382 JUMP JUMPDEST SWAP4 POP PUSH2 0x23B0 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1AB9 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x23C7 DUP3 DUP5 PUSH2 0x238C JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SUB PUSH4 0x4230A2AE SHL 0x2E DUP11 SAR 0xC9 NUMBER 0x25 0x23 0xAE TLOAD BASEFEE PUSH20 0x4F5090AC093502859B70F72CF95564736F6C6343 STOP ADDMOD NOT STOP CALLER ",
							"sourceMap": "254:1970:12:-:0;;;337:5;312:30;;;;;;;;;;;;;;;;;;;;496:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;541:8;1896:113:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1970:5;1962;:13;;;;;;:::i;:::-;;1995:7;1985;:17;;;;;;:::i;:::-;;1896:113;;4203:12:5;4217:19;4240:28;4261:6;4240:20;;;:28;;:::i;:::-;4202:66;;;;4300:7;:28;;4326:2;4300:28;;;4310:13;4300:28;4278:50;;;;;;;;;;4347:6;4338:15;;;;;;;;;;4192:168;;4165:195;613:8:12::2;596:7;;:26;;;;;;;;;;;;;;;;;;496:133:::0;254:1970;;4503:533:5;4570:4;4576:5;4594:12;4608:28;4648:6;4640:26;;4680:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4640:93;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4593:140;;;;4747:7;:39;;;;;4784:2;4758:15;:22;:28;;4747:39;4743:260;;;4802:24;4840:15;4829:38;;;;;;;;;;;;:::i;:::-;4802:65;;4905:15;4885:35;;:16;:35;4881:112;;4948:4;4960:16;4940:38;;;;;;;;;4881:112;4788:215;4743:260;5020:5;5027:1;5012:17;;;;;;4503:533;;;;:::o;88:117:13:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;1202:99::-;1254:6;1288:5;1282:12;1272:22;;1202:99;;;:::o;1307:180::-;1355:77;1352:1;1345:88;1452:4;1449:1;1442:15;1476:4;1473:1;1466:15;1493:180;1541:77;1538:1;1531:88;1638:4;1635:1;1628:15;1662:4;1659:1;1652:15;1679:320;1723:6;1760:1;1754:4;1750:12;1740:22;;1807:1;1801:4;1797:12;1828:18;1818:81;;1884:4;1876:6;1872:17;1862:27;;1818:81;1946:2;1938:6;1935:14;1915:18;1912:38;1909:84;;1965:18;;:::i;:::-;1909:84;1730:269;1679:320;;;:::o;2005:141::-;2054:4;2077:3;2069:11;;2100:3;2097:1;2090:14;2134:4;2131:1;2121:18;2113:26;;2005:141;;;:::o;2152:93::-;2189:6;2236:2;2231;2224:5;2220:14;2216:23;2206:33;;2152:93;;;:::o;2251:107::-;2295:8;2345:5;2339:4;2335:16;2314:37;;2251:107;;;;:::o;2364:393::-;2433:6;2483:1;2471:10;2467:18;2506:97;2536:66;2525:9;2506:97;:::i;:::-;2624:39;2654:8;2643:9;2624:39;:::i;:::-;2612:51;;2696:4;2692:9;2685:5;2681:21;2672:30;;2745:4;2735:8;2731:19;2724:5;2721:30;2711:40;;2440:317;;2364:393;;;;;:::o;2763:77::-;2800:7;2829:5;2818:16;;2763:77;;;:::o;2846:60::-;2874:3;2895:5;2888:12;;2846:60;;;:::o;2912:142::-;2962:9;2995:53;3013:34;3022:24;3040:5;3022:24;:::i;:::-;3013:34;:::i;:::-;2995:53;:::i;:::-;2982:66;;2912:142;;;:::o;3060:75::-;3103:3;3124:5;3117:12;;3060:75;;;:::o;3141:269::-;3251:39;3282:7;3251:39;:::i;:::-;3312:91;3361:41;3385:16;3361:41;:::i;:::-;3353:6;3346:4;3340:11;3312:91;:::i;:::-;3306:4;3299:105;3217:193;3141:269;;;:::o;3416:73::-;3461:3;3416:73;:::o;3495:189::-;3572:32;;:::i;:::-;3613:65;3671:6;3663;3657:4;3613:65;:::i;:::-;3548:136;3495:189;;:::o;3690:186::-;3750:120;3767:3;3760:5;3757:14;3750:120;;;3821:39;3858:1;3851:5;3821:39;:::i;:::-;3794:1;3787:5;3783:13;3774:22;;3750:120;;;3690:186;;:::o;3882:543::-;3983:2;3978:3;3975:11;3972:446;;;4017:38;4049:5;4017:38;:::i;:::-;4101:29;4119:10;4101:29;:::i;:::-;4091:8;4087:44;4284:2;4272:10;4269:18;4266:49;;;4305:8;4290:23;;4266:49;4328:80;4384:22;4402:3;4384:22;:::i;:::-;4374:8;4370:37;4357:11;4328:80;:::i;:::-;3987:431;;3972:446;3882:543;;;:::o;4431:117::-;4485:8;4535:5;4529:4;4525:16;4504:37;;4431:117;;;;:::o;4554:169::-;4598:6;4631:51;4679:1;4675:6;4667:5;4664:1;4660:13;4631:51;:::i;:::-;4627:56;4712:4;4706;4702:15;4692:25;;4605:118;4554:169;;;;:::o;4728:295::-;4804:4;4950:29;4975:3;4969:4;4950:29;:::i;:::-;4942:37;;5012:3;5009:1;5005:11;4999:4;4996:21;4988:29;;4728:295;;;;:::o;5028:1395::-;5145:37;5178:3;5145:37;:::i;:::-;5247:18;5239:6;5236:30;5233:56;;;5269:18;;:::i;:::-;5233:56;5313:38;5345:4;5339:11;5313:38;:::i;:::-;5398:67;5458:6;5450;5444:4;5398:67;:::i;:::-;5492:1;5516:4;5503:17;;5548:2;5540:6;5537:14;5565:1;5560:618;;;;6222:1;6239:6;6236:77;;;6288:9;6283:3;6279:19;6273:26;6264:35;;6236:77;6339:67;6399:6;6392:5;6339:67;:::i;:::-;6333:4;6326:81;6195:222;5530:887;;5560:618;5612:4;5608:9;5600:6;5596:22;5646:37;5678:4;5646:37;:::i;:::-;5705:1;5719:208;5733:7;5730:1;5727:14;5719:208;;;5812:9;5807:3;5803:19;5797:26;5789:6;5782:42;5863:1;5855:6;5851:14;5841:24;;5910:2;5899:9;5895:18;5882:31;;5756:4;5753:1;5749:12;5744:17;;5719:208;;;5955:6;5946:7;5943:19;5940:179;;;6013:9;6008:3;6004:19;5998:26;6056:48;6098:4;6090:6;6086:17;6075:9;6056:48;:::i;:::-;6048:6;6041:64;5963:156;5940:179;6165:1;6161;6153:6;6149:14;6145:22;6139:4;6132:36;5567:611;;;5530:887;;5120:1303;;;5028:1395;;:::o;6429:98::-;6480:6;6514:5;6508:12;6498:22;;6429:98;;;:::o;6533:147::-;6634:11;6671:3;6656:18;;6533:147;;;;:::o;6686:139::-;6775:6;6770:3;6765;6759:23;6816:1;6807:6;6802:3;6798:16;6791:27;6686:139;;;:::o;6831:386::-;6935:3;6963:38;6995:5;6963:38;:::i;:::-;7017:88;7098:6;7093:3;7017:88;:::i;:::-;7010:95;;7114:65;7172:6;7167:3;7160:4;7153:5;7149:16;7114:65;:::i;:::-;7204:6;7199:3;7195:16;7188:23;;6939:278;6831:386;;;;:::o;7223:271::-;7353:3;7375:93;7464:3;7455:6;7375:93;:::i;:::-;7368:100;;7485:3;7478:10;;7223:271;;;;:::o;7500:122::-;7573:24;7591:5;7573:24;:::i;:::-;7566:5;7563:35;7553:63;;7612:1;7609;7602:12;7553:63;7500:122;:::o;7628:143::-;7685:5;7716:6;7710:13;7701:22;;7732:33;7759:5;7732:33;:::i;:::-;7628:143;;;;:::o;7777:351::-;7847:6;7896:2;7884:9;7875:7;7871:23;7867:32;7864:119;;;7902:79;;:::i;:::-;7864:119;8022:1;8047:64;8103:7;8094:6;8083:9;8079:22;8047:64;:::i;:::-;8037:74;;7993:128;7777:351;;;;:::o;254:1970:12:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_approve_860": {
									"entryPoint": 3578,
									"id": 860,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_920": {
									"entryPoint": 4759,
									"id": 920,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_burn_842": {
									"entryPoint": 4298,
									"id": 842,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_callOptionalReturn_2034": {
									"entryPoint": 6186,
									"id": 2034,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_convertToAssets_1639": {
									"entryPoint": 3483,
									"id": 1639,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_convertToShares_3643": {
									"entryPoint": 3596,
									"id": 3643,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_decimalsOffset_1731": {
									"entryPoint": 4167,
									"id": 1731,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_mint_809": {
									"entryPoint": 4171,
									"id": 809,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_2349": {
									"entryPoint": 3571,
									"id": 2349,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_revert_2336": {
									"entryPoint": 6698,
									"id": 2336,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_spendAllowance_968": {
									"entryPoint": 3781,
									"id": 968,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_699": {
									"entryPoint": 3927,
									"id": 699,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_776": {
									"entryPoint": 5222,
									"id": 776,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_withdraw_1723": {
									"entryPoint": 4425,
									"id": 1723,
									"parameterSlots": 5,
									"returnSlots": 0
								},
								"@allowance_596": {
									"entryPoint": 3335,
									"id": 596,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_620": {
									"entryPoint": 1842,
									"id": 620,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@asset_1229": {
									"entryPoint": 2007,
									"id": 1229,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@balanceOf_555": {
									"entryPoint": 2486,
									"id": 555,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@convertToAssets_1276": {
									"entryPoint": 1824,
									"id": 1276,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@convertToShares_1260": {
									"entryPoint": 3274,
									"id": 1260,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_1217": {
									"entryPoint": 1950,
									"id": 1217,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@deposit_3530": {
									"entryPoint": 2105,
									"id": 3530,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@functionCallWithValue_2204": {
									"entryPoint": 6356,
									"id": 2204,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@functionCall_2158": {
									"entryPoint": 6335,
									"id": 2158,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@maxDeposit_1291": {
									"entryPoint": 2046,
									"id": 1291,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@maxMint_1306": {
									"entryPoint": 3233,
									"id": 1306,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@maxRedeem_1337": {
									"entryPoint": 3318,
									"id": 1337,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@maxWithdraw_1324": {
									"entryPoint": 3292,
									"id": 1324,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@mint_3590": {
									"entryPoint": 2592,
									"id": 3590,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@mulDiv_2755": {
									"entryPoint": 5886,
									"id": 2755,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@mulDiv_2798": {
									"entryPoint": 4674,
									"id": 2798,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@name_515": {
									"entryPoint": 1680,
									"id": 515,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@previewDeposit_1353": {
									"entryPoint": 3465,
									"id": 1353,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@previewMint_1369": {
									"entryPoint": 2821,
									"id": 1369,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@previewRedeem_1401": {
									"entryPoint": 2087,
									"id": 1401,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@previewWithdraw_1385": {
									"entryPoint": 1876,
									"id": 1385,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@redeem_1583": {
									"entryPoint": 3103,
									"id": 1583,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@safeTransfer_1844": {
									"entryPoint": 5759,
									"id": 1844,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@satoken_3431": {
									"entryPoint": 2555,
									"id": 3431,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@symbol_524": {
									"entryPoint": 2643,
									"id": 524,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalAssets_1244": {
									"entryPoint": 1522,
									"id": 1244,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_542": {
									"entryPoint": 1895,
									"id": 542,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_652": {
									"entryPoint": 1904,
									"id": 652,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_579": {
									"entryPoint": 2787,
									"id": 579,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@unsignedRoundsUp_3420": {
									"entryPoint": 6141,
									"id": 3420,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@verifyCallResultFromTarget_2296": {
									"entryPoint": 6557,
									"id": 2296,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@withdraw_3576": {
									"entryPoint": 2840,
									"id": 3576,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 7118,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool_fromMemory": {
									"entryPoint": 9017,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 6985,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256_fromMemory": {
									"entryPoint": 7786,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 7423,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 7724,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 7251,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 7138,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 9037,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 7005,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 7806,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_address": {
									"entryPoint": 7466,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256t_addresst_address": {
									"entryPoint": 7644,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 7383,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 7211,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 9100,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_contract$_IERC20_$1047_to_t_address_fromStack": {
									"entryPoint": 7604,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 6871,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_3e76f273c719bb7d23db533a2dc9a822ae7d899fcd42eb8910272e24764e8296_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 8183,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_8bb8eaf1580515f96cb5013e54fb02bd0d2d1120f2636292a4ac84c518b1b5a3_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 8079,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 6775,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint8_to_t_uint8_fromStack": {
									"entryPoint": 7343,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 9148,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 7398,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 8863,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 8247,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 7226,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_IERC20_$1047__to_t_address__fromStack_reversed": {
									"entryPoint": 7619,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6927,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3e76f273c719bb7d23db533a2dc9a822ae7d899fcd42eb8910272e24764e8296__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 8217,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_8bb8eaf1580515f96cb5013e54fb02bd0d2d1120f2636292a4ac84c518b1b5a3__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 8113,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 6790,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 8779,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": 7358,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 9080,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 6815,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 9090,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 6825,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 8300,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint8": {
									"entryPoint": 7987,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_helper": {
									"entryPoint": 8363,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 2
								},
								"checked_exp_t_uint256_t_uint8": {
									"entryPoint": 8654,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_unsigned": {
									"entryPoint": 8445,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 8728,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 7079,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 7200,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 7048,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 6766,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint8": {
									"entryPoint": 7331,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_contract$_IERC20_$1047_to_t_address": {
									"entryPoint": 7587,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_address": {
									"entryPoint": 7570,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_uint160": {
									"entryPoint": 7537,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 6841,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 7894,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"identity": {
									"entryPoint": 7528,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mod_t_uint8": {
									"entryPoint": 8947,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 7942,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 8818,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x21": {
									"entryPoint": 8902,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 7849,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 6959,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 6855,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"shift_right_1_unsigned": {
									"entryPoint": 8351,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"store_literal_in_memory_3e76f273c719bb7d23db533a2dc9a822ae7d899fcd42eb8910272e24764e8296": {
									"entryPoint": 8143,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_8bb8eaf1580515f96cb5013e54fb02bd0d2d1120f2636292a4ac84c518b1b5a3": {
									"entryPoint": 8039,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 7096,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 8995,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 6963,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:17560:13",
										"nodeType": "YulBlock",
										"src": "0:17560:13",
										"statements": [
											{
												"body": {
													"nativeSrc": "52:32:13",
													"nodeType": "YulBlock",
													"src": "52:32:13",
													"statements": [
														{
															"nativeSrc": "62:16:13",
															"nodeType": "YulAssignment",
															"src": "62:16:13",
															"value": {
																"name": "value",
																"nativeSrc": "73:5:13",
																"nodeType": "YulIdentifier",
																"src": "73:5:13"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "62:7:13",
																	"nodeType": "YulIdentifier",
																	"src": "62:7:13"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nativeSrc": "7:77:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "34:5:13",
														"nodeType": "YulTypedName",
														"src": "34:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "44:7:13",
														"nodeType": "YulTypedName",
														"src": "44:7:13",
														"type": ""
													}
												],
												"src": "7:77:13"
											},
											{
												"body": {
													"nativeSrc": "155:53:13",
													"nodeType": "YulBlock",
													"src": "155:53:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "172:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "172:3:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "195:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "195:5:13"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nativeSrc": "177:17:13",
																			"nodeType": "YulIdentifier",
																			"src": "177:17:13"
																		},
																		"nativeSrc": "177:24:13",
																		"nodeType": "YulFunctionCall",
																		"src": "177:24:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "165:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "165:6:13"
																},
																"nativeSrc": "165:37:13",
																"nodeType": "YulFunctionCall",
																"src": "165:37:13"
															},
															"nativeSrc": "165:37:13",
															"nodeType": "YulExpressionStatement",
															"src": "165:37:13"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "90:118:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "143:5:13",
														"nodeType": "YulTypedName",
														"src": "143:5:13",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "150:3:13",
														"nodeType": "YulTypedName",
														"src": "150:3:13",
														"type": ""
													}
												],
												"src": "90:118:13"
											},
											{
												"body": {
													"nativeSrc": "312:124:13",
													"nodeType": "YulBlock",
													"src": "312:124:13",
													"statements": [
														{
															"nativeSrc": "322:26:13",
															"nodeType": "YulAssignment",
															"src": "322:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "334:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "334:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "345:2:13",
																		"nodeType": "YulLiteral",
																		"src": "345:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "330:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "330:3:13"
																},
																"nativeSrc": "330:18:13",
																"nodeType": "YulFunctionCall",
																"src": "330:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "322:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "322:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "402:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "402:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "415:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "415:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "426:1:13",
																				"nodeType": "YulLiteral",
																				"src": "426:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "411:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "411:3:13"
																		},
																		"nativeSrc": "411:17:13",
																		"nodeType": "YulFunctionCall",
																		"src": "411:17:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "358:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "358:43:13"
																},
																"nativeSrc": "358:71:13",
																"nodeType": "YulFunctionCall",
																"src": "358:71:13"
															},
															"nativeSrc": "358:71:13",
															"nodeType": "YulExpressionStatement",
															"src": "358:71:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "214:222:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "284:9:13",
														"nodeType": "YulTypedName",
														"src": "284:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "296:6:13",
														"nodeType": "YulTypedName",
														"src": "296:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "307:4:13",
														"nodeType": "YulTypedName",
														"src": "307:4:13",
														"type": ""
													}
												],
												"src": "214:222:13"
											},
											{
												"body": {
													"nativeSrc": "501:40:13",
													"nodeType": "YulBlock",
													"src": "501:40:13",
													"statements": [
														{
															"nativeSrc": "512:22:13",
															"nodeType": "YulAssignment",
															"src": "512:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "528:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "528:5:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "522:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "522:5:13"
																},
																"nativeSrc": "522:12:13",
																"nodeType": "YulFunctionCall",
																"src": "522:12:13"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "512:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "512:6:13"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "442:99:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "484:5:13",
														"nodeType": "YulTypedName",
														"src": "484:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "494:6:13",
														"nodeType": "YulTypedName",
														"src": "494:6:13",
														"type": ""
													}
												],
												"src": "442:99:13"
											},
											{
												"body": {
													"nativeSrc": "643:73:13",
													"nodeType": "YulBlock",
													"src": "643:73:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "660:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "660:3:13"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "665:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "665:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "653:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "653:6:13"
																},
																"nativeSrc": "653:19:13",
																"nodeType": "YulFunctionCall",
																"src": "653:19:13"
															},
															"nativeSrc": "653:19:13",
															"nodeType": "YulExpressionStatement",
															"src": "653:19:13"
														},
														{
															"nativeSrc": "681:29:13",
															"nodeType": "YulAssignment",
															"src": "681:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "700:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "700:3:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "705:4:13",
																		"nodeType": "YulLiteral",
																		"src": "705:4:13",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "696:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "696:3:13"
																},
																"nativeSrc": "696:14:13",
																"nodeType": "YulFunctionCall",
																"src": "696:14:13"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "681:11:13",
																	"nodeType": "YulIdentifier",
																	"src": "681:11:13"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "547:169:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "615:3:13",
														"nodeType": "YulTypedName",
														"src": "615:3:13",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "620:6:13",
														"nodeType": "YulTypedName",
														"src": "620:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "631:11:13",
														"nodeType": "YulTypedName",
														"src": "631:11:13",
														"type": ""
													}
												],
												"src": "547:169:13"
											},
											{
												"body": {
													"nativeSrc": "784:77:13",
													"nodeType": "YulBlock",
													"src": "784:77:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nativeSrc": "801:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "801:3:13"
																	},
																	{
																		"name": "src",
																		"nativeSrc": "806:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "806:3:13"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "811:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "811:6:13"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "795:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "795:5:13"
																},
																"nativeSrc": "795:23:13",
																"nodeType": "YulFunctionCall",
																"src": "795:23:13"
															},
															"nativeSrc": "795:23:13",
															"nodeType": "YulExpressionStatement",
															"src": "795:23:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nativeSrc": "838:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "838:3:13"
																			},
																			{
																				"name": "length",
																				"nativeSrc": "843:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "843:6:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "834:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "834:3:13"
																		},
																		"nativeSrc": "834:16:13",
																		"nodeType": "YulFunctionCall",
																		"src": "834:16:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "852:1:13",
																		"nodeType": "YulLiteral",
																		"src": "852:1:13",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "827:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "827:6:13"
																},
																"nativeSrc": "827:27:13",
																"nodeType": "YulFunctionCall",
																"src": "827:27:13"
															},
															"nativeSrc": "827:27:13",
															"nodeType": "YulExpressionStatement",
															"src": "827:27:13"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "722:139:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nativeSrc": "766:3:13",
														"nodeType": "YulTypedName",
														"src": "766:3:13",
														"type": ""
													},
													{
														"name": "dst",
														"nativeSrc": "771:3:13",
														"nodeType": "YulTypedName",
														"src": "771:3:13",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "776:6:13",
														"nodeType": "YulTypedName",
														"src": "776:6:13",
														"type": ""
													}
												],
												"src": "722:139:13"
											},
											{
												"body": {
													"nativeSrc": "915:54:13",
													"nodeType": "YulBlock",
													"src": "915:54:13",
													"statements": [
														{
															"nativeSrc": "925:38:13",
															"nodeType": "YulAssignment",
															"src": "925:38:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "943:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "943:5:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "950:2:13",
																				"nodeType": "YulLiteral",
																				"src": "950:2:13",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "939:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "939:3:13"
																		},
																		"nativeSrc": "939:14:13",
																		"nodeType": "YulFunctionCall",
																		"src": "939:14:13"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "959:2:13",
																				"nodeType": "YulLiteral",
																				"src": "959:2:13",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "955:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "955:3:13"
																		},
																		"nativeSrc": "955:7:13",
																		"nodeType": "YulFunctionCall",
																		"src": "955:7:13"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "935:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "935:3:13"
																},
																"nativeSrc": "935:28:13",
																"nodeType": "YulFunctionCall",
																"src": "935:28:13"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "925:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "925:6:13"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nativeSrc": "867:102:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "898:5:13",
														"nodeType": "YulTypedName",
														"src": "898:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "908:6:13",
														"nodeType": "YulTypedName",
														"src": "908:6:13",
														"type": ""
													}
												],
												"src": "867:102:13"
											},
											{
												"body": {
													"nativeSrc": "1067:285:13",
													"nodeType": "YulBlock",
													"src": "1067:285:13",
													"statements": [
														{
															"nativeSrc": "1077:53:13",
															"nodeType": "YulVariableDeclaration",
															"src": "1077:53:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1124:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "1124:5:13"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nativeSrc": "1091:32:13",
																	"nodeType": "YulIdentifier",
																	"src": "1091:32:13"
																},
																"nativeSrc": "1091:39:13",
																"nodeType": "YulFunctionCall",
																"src": "1091:39:13"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "1081:6:13",
																	"nodeType": "YulTypedName",
																	"src": "1081:6:13",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1139:78:13",
															"nodeType": "YulAssignment",
															"src": "1139:78:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "1205:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "1205:3:13"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "1210:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "1210:6:13"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "1146:58:13",
																	"nodeType": "YulIdentifier",
																	"src": "1146:58:13"
																},
																"nativeSrc": "1146:71:13",
																"nodeType": "YulFunctionCall",
																"src": "1146:71:13"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "1139:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "1139:3:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "1265:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "1265:5:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1272:4:13",
																				"nodeType": "YulLiteral",
																				"src": "1272:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1261:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "1261:3:13"
																		},
																		"nativeSrc": "1261:16:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1261:16:13"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "1279:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "1279:3:13"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "1284:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "1284:6:13"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nativeSrc": "1226:34:13",
																	"nodeType": "YulIdentifier",
																	"src": "1226:34:13"
																},
																"nativeSrc": "1226:65:13",
																"nodeType": "YulFunctionCall",
																"src": "1226:65:13"
															},
															"nativeSrc": "1226:65:13",
															"nodeType": "YulExpressionStatement",
															"src": "1226:65:13"
														},
														{
															"nativeSrc": "1300:46:13",
															"nodeType": "YulAssignment",
															"src": "1300:46:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "1311:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "1311:3:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "1338:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "1338:6:13"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nativeSrc": "1316:21:13",
																			"nodeType": "YulIdentifier",
																			"src": "1316:21:13"
																		},
																		"nativeSrc": "1316:29:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1316:29:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1307:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "1307:3:13"
																},
																"nativeSrc": "1307:39:13",
																"nodeType": "YulFunctionCall",
																"src": "1307:39:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "1300:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "1300:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "975:377:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1048:5:13",
														"nodeType": "YulTypedName",
														"src": "1048:5:13",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "1055:3:13",
														"nodeType": "YulTypedName",
														"src": "1055:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "1063:3:13",
														"nodeType": "YulTypedName",
														"src": "1063:3:13",
														"type": ""
													}
												],
												"src": "975:377:13"
											},
											{
												"body": {
													"nativeSrc": "1476:195:13",
													"nodeType": "YulBlock",
													"src": "1476:195:13",
													"statements": [
														{
															"nativeSrc": "1486:26:13",
															"nodeType": "YulAssignment",
															"src": "1486:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1498:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "1498:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1509:2:13",
																		"nodeType": "YulLiteral",
																		"src": "1509:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1494:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "1494:3:13"
																},
																"nativeSrc": "1494:18:13",
																"nodeType": "YulFunctionCall",
																"src": "1494:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1486:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "1486:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1533:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "1533:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1544:1:13",
																				"nodeType": "YulLiteral",
																				"src": "1544:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1529:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "1529:3:13"
																		},
																		"nativeSrc": "1529:17:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1529:17:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "1552:4:13",
																				"nodeType": "YulIdentifier",
																				"src": "1552:4:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1558:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "1558:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1548:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "1548:3:13"
																		},
																		"nativeSrc": "1548:20:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1548:20:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1522:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1522:6:13"
																},
																"nativeSrc": "1522:47:13",
																"nodeType": "YulFunctionCall",
																"src": "1522:47:13"
															},
															"nativeSrc": "1522:47:13",
															"nodeType": "YulExpressionStatement",
															"src": "1522:47:13"
														},
														{
															"nativeSrc": "1578:86:13",
															"nodeType": "YulAssignment",
															"src": "1578:86:13",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "1650:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "1650:6:13"
																	},
																	{
																		"name": "tail",
																		"nativeSrc": "1659:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "1659:4:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "1586:63:13",
																	"nodeType": "YulIdentifier",
																	"src": "1586:63:13"
																},
																"nativeSrc": "1586:78:13",
																"nodeType": "YulFunctionCall",
																"src": "1586:78:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1578:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "1578:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "1358:313:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1448:9:13",
														"nodeType": "YulTypedName",
														"src": "1448:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1460:6:13",
														"nodeType": "YulTypedName",
														"src": "1460:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1471:4:13",
														"nodeType": "YulTypedName",
														"src": "1471:4:13",
														"type": ""
													}
												],
												"src": "1358:313:13"
											},
											{
												"body": {
													"nativeSrc": "1717:35:13",
													"nodeType": "YulBlock",
													"src": "1717:35:13",
													"statements": [
														{
															"nativeSrc": "1727:19:13",
															"nodeType": "YulAssignment",
															"src": "1727:19:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1743:2:13",
																		"nodeType": "YulLiteral",
																		"src": "1743:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1737:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "1737:5:13"
																},
																"nativeSrc": "1737:9:13",
																"nodeType": "YulFunctionCall",
																"src": "1737:9:13"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "1727:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1727:6:13"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "1677:75:13",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "1710:6:13",
														"nodeType": "YulTypedName",
														"src": "1710:6:13",
														"type": ""
													}
												],
												"src": "1677:75:13"
											},
											{
												"body": {
													"nativeSrc": "1847:28:13",
													"nodeType": "YulBlock",
													"src": "1847:28:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1864:1:13",
																		"nodeType": "YulLiteral",
																		"src": "1864:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1867:1:13",
																		"nodeType": "YulLiteral",
																		"src": "1867:1:13",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1857:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1857:6:13"
																},
																"nativeSrc": "1857:12:13",
																"nodeType": "YulFunctionCall",
																"src": "1857:12:13"
															},
															"nativeSrc": "1857:12:13",
															"nodeType": "YulExpressionStatement",
															"src": "1857:12:13"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "1758:117:13",
												"nodeType": "YulFunctionDefinition",
												"src": "1758:117:13"
											},
											{
												"body": {
													"nativeSrc": "1970:28:13",
													"nodeType": "YulBlock",
													"src": "1970:28:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1987:1:13",
																		"nodeType": "YulLiteral",
																		"src": "1987:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1990:1:13",
																		"nodeType": "YulLiteral",
																		"src": "1990:1:13",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1980:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1980:6:13"
																},
																"nativeSrc": "1980:12:13",
																"nodeType": "YulFunctionCall",
																"src": "1980:12:13"
															},
															"nativeSrc": "1980:12:13",
															"nodeType": "YulExpressionStatement",
															"src": "1980:12:13"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "1881:117:13",
												"nodeType": "YulFunctionDefinition",
												"src": "1881:117:13"
											},
											{
												"body": {
													"nativeSrc": "2047:79:13",
													"nodeType": "YulBlock",
													"src": "2047:79:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "2104:16:13",
																"nodeType": "YulBlock",
																"src": "2104:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2113:1:13",
																					"nodeType": "YulLiteral",
																					"src": "2113:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2116:1:13",
																					"nodeType": "YulLiteral",
																					"src": "2116:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2106:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "2106:6:13"
																			},
																			"nativeSrc": "2106:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "2106:12:13"
																		},
																		"nativeSrc": "2106:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "2106:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2070:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "2070:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "2095:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "2095:5:13"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "2077:17:13",
																					"nodeType": "YulIdentifier",
																					"src": "2077:17:13"
																				},
																				"nativeSrc": "2077:24:13",
																				"nodeType": "YulFunctionCall",
																				"src": "2077:24:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "2067:2:13",
																			"nodeType": "YulIdentifier",
																			"src": "2067:2:13"
																		},
																		"nativeSrc": "2067:35:13",
																		"nodeType": "YulFunctionCall",
																		"src": "2067:35:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2060:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2060:6:13"
																},
																"nativeSrc": "2060:43:13",
																"nodeType": "YulFunctionCall",
																"src": "2060:43:13"
															},
															"nativeSrc": "2057:63:13",
															"nodeType": "YulIf",
															"src": "2057:63:13"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nativeSrc": "2004:122:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2040:5:13",
														"nodeType": "YulTypedName",
														"src": "2040:5:13",
														"type": ""
													}
												],
												"src": "2004:122:13"
											},
											{
												"body": {
													"nativeSrc": "2184:87:13",
													"nodeType": "YulBlock",
													"src": "2184:87:13",
													"statements": [
														{
															"nativeSrc": "2194:29:13",
															"nodeType": "YulAssignment",
															"src": "2194:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "2216:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "2216:6:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2203:12:13",
																	"nodeType": "YulIdentifier",
																	"src": "2203:12:13"
																},
																"nativeSrc": "2203:20:13",
																"nodeType": "YulFunctionCall",
																"src": "2203:20:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "2194:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "2194:5:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2259:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "2259:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nativeSrc": "2232:26:13",
																	"nodeType": "YulIdentifier",
																	"src": "2232:26:13"
																},
																"nativeSrc": "2232:33:13",
																"nodeType": "YulFunctionCall",
																"src": "2232:33:13"
															},
															"nativeSrc": "2232:33:13",
															"nodeType": "YulExpressionStatement",
															"src": "2232:33:13"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nativeSrc": "2132:139:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "2162:6:13",
														"nodeType": "YulTypedName",
														"src": "2162:6:13",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "2170:3:13",
														"nodeType": "YulTypedName",
														"src": "2170:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "2178:5:13",
														"nodeType": "YulTypedName",
														"src": "2178:5:13",
														"type": ""
													}
												],
												"src": "2132:139:13"
											},
											{
												"body": {
													"nativeSrc": "2343:263:13",
													"nodeType": "YulBlock",
													"src": "2343:263:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "2389:83:13",
																"nodeType": "YulBlock",
																"src": "2389:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "2391:77:13",
																				"nodeType": "YulIdentifier",
																				"src": "2391:77:13"
																			},
																			"nativeSrc": "2391:79:13",
																			"nodeType": "YulFunctionCall",
																			"src": "2391:79:13"
																		},
																		"nativeSrc": "2391:79:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "2391:79:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2364:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "2364:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2373:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "2373:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2360:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "2360:3:13"
																		},
																		"nativeSrc": "2360:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "2360:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2385:2:13",
																		"nodeType": "YulLiteral",
																		"src": "2385:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2356:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "2356:3:13"
																},
																"nativeSrc": "2356:32:13",
																"nodeType": "YulFunctionCall",
																"src": "2356:32:13"
															},
															"nativeSrc": "2353:119:13",
															"nodeType": "YulIf",
															"src": "2353:119:13"
														},
														{
															"nativeSrc": "2482:117:13",
															"nodeType": "YulBlock",
															"src": "2482:117:13",
															"statements": [
																{
																	"nativeSrc": "2497:15:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "2497:15:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "2511:1:13",
																		"nodeType": "YulLiteral",
																		"src": "2511:1:13",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "2501:6:13",
																			"nodeType": "YulTypedName",
																			"src": "2501:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "2526:63:13",
																	"nodeType": "YulAssignment",
																	"src": "2526:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "2561:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "2561:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "2572:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "2572:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2557:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "2557:3:13"
																				},
																				"nativeSrc": "2557:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "2557:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2581:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "2581:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "2536:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "2536:20:13"
																		},
																		"nativeSrc": "2536:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "2536:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "2526:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "2526:6:13"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nativeSrc": "2277:329:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2313:9:13",
														"nodeType": "YulTypedName",
														"src": "2313:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2324:7:13",
														"nodeType": "YulTypedName",
														"src": "2324:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2336:6:13",
														"nodeType": "YulTypedName",
														"src": "2336:6:13",
														"type": ""
													}
												],
												"src": "2277:329:13"
											},
											{
												"body": {
													"nativeSrc": "2657:81:13",
													"nodeType": "YulBlock",
													"src": "2657:81:13",
													"statements": [
														{
															"nativeSrc": "2667:65:13",
															"nodeType": "YulAssignment",
															"src": "2667:65:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2682:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "2682:5:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2689:42:13",
																		"nodeType": "YulLiteral",
																		"src": "2689:42:13",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "2678:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "2678:3:13"
																},
																"nativeSrc": "2678:54:13",
																"nodeType": "YulFunctionCall",
																"src": "2678:54:13"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "2667:7:13",
																	"nodeType": "YulIdentifier",
																	"src": "2667:7:13"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nativeSrc": "2612:126:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2639:5:13",
														"nodeType": "YulTypedName",
														"src": "2639:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "2649:7:13",
														"nodeType": "YulTypedName",
														"src": "2649:7:13",
														"type": ""
													}
												],
												"src": "2612:126:13"
											},
											{
												"body": {
													"nativeSrc": "2789:51:13",
													"nodeType": "YulBlock",
													"src": "2789:51:13",
													"statements": [
														{
															"nativeSrc": "2799:35:13",
															"nodeType": "YulAssignment",
															"src": "2799:35:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2828:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "2828:5:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "2810:17:13",
																	"nodeType": "YulIdentifier",
																	"src": "2810:17:13"
																},
																"nativeSrc": "2810:24:13",
																"nodeType": "YulFunctionCall",
																"src": "2810:24:13"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "2799:7:13",
																	"nodeType": "YulIdentifier",
																	"src": "2799:7:13"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nativeSrc": "2744:96:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2771:5:13",
														"nodeType": "YulTypedName",
														"src": "2771:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "2781:7:13",
														"nodeType": "YulTypedName",
														"src": "2781:7:13",
														"type": ""
													}
												],
												"src": "2744:96:13"
											},
											{
												"body": {
													"nativeSrc": "2889:79:13",
													"nodeType": "YulBlock",
													"src": "2889:79:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "2946:16:13",
																"nodeType": "YulBlock",
																"src": "2946:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2955:1:13",
																					"nodeType": "YulLiteral",
																					"src": "2955:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2958:1:13",
																					"nodeType": "YulLiteral",
																					"src": "2958:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2948:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "2948:6:13"
																			},
																			"nativeSrc": "2948:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "2948:12:13"
																		},
																		"nativeSrc": "2948:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "2948:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2912:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "2912:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "2937:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "2937:5:13"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nativeSrc": "2919:17:13",
																					"nodeType": "YulIdentifier",
																					"src": "2919:17:13"
																				},
																				"nativeSrc": "2919:24:13",
																				"nodeType": "YulFunctionCall",
																				"src": "2919:24:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "2909:2:13",
																			"nodeType": "YulIdentifier",
																			"src": "2909:2:13"
																		},
																		"nativeSrc": "2909:35:13",
																		"nodeType": "YulFunctionCall",
																		"src": "2909:35:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2902:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2902:6:13"
																},
																"nativeSrc": "2902:43:13",
																"nodeType": "YulFunctionCall",
																"src": "2902:43:13"
															},
															"nativeSrc": "2899:63:13",
															"nodeType": "YulIf",
															"src": "2899:63:13"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nativeSrc": "2846:122:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2882:5:13",
														"nodeType": "YulTypedName",
														"src": "2882:5:13",
														"type": ""
													}
												],
												"src": "2846:122:13"
											},
											{
												"body": {
													"nativeSrc": "3026:87:13",
													"nodeType": "YulBlock",
													"src": "3026:87:13",
													"statements": [
														{
															"nativeSrc": "3036:29:13",
															"nodeType": "YulAssignment",
															"src": "3036:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "3058:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "3058:6:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "3045:12:13",
																	"nodeType": "YulIdentifier",
																	"src": "3045:12:13"
																},
																"nativeSrc": "3045:20:13",
																"nodeType": "YulFunctionCall",
																"src": "3045:20:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "3036:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "3036:5:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "3101:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "3101:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nativeSrc": "3074:26:13",
																	"nodeType": "YulIdentifier",
																	"src": "3074:26:13"
																},
																"nativeSrc": "3074:33:13",
																"nodeType": "YulFunctionCall",
																"src": "3074:33:13"
															},
															"nativeSrc": "3074:33:13",
															"nodeType": "YulExpressionStatement",
															"src": "3074:33:13"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nativeSrc": "2974:139:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "3004:6:13",
														"nodeType": "YulTypedName",
														"src": "3004:6:13",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "3012:3:13",
														"nodeType": "YulTypedName",
														"src": "3012:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "3020:5:13",
														"nodeType": "YulTypedName",
														"src": "3020:5:13",
														"type": ""
													}
												],
												"src": "2974:139:13"
											},
											{
												"body": {
													"nativeSrc": "3202:391:13",
													"nodeType": "YulBlock",
													"src": "3202:391:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "3248:83:13",
																"nodeType": "YulBlock",
																"src": "3248:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "3250:77:13",
																				"nodeType": "YulIdentifier",
																				"src": "3250:77:13"
																			},
																			"nativeSrc": "3250:79:13",
																			"nodeType": "YulFunctionCall",
																			"src": "3250:79:13"
																		},
																		"nativeSrc": "3250:79:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "3250:79:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3223:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "3223:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3232:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "3232:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3219:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "3219:3:13"
																		},
																		"nativeSrc": "3219:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3219:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3244:2:13",
																		"nodeType": "YulLiteral",
																		"src": "3244:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "3215:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "3215:3:13"
																},
																"nativeSrc": "3215:32:13",
																"nodeType": "YulFunctionCall",
																"src": "3215:32:13"
															},
															"nativeSrc": "3212:119:13",
															"nodeType": "YulIf",
															"src": "3212:119:13"
														},
														{
															"nativeSrc": "3341:117:13",
															"nodeType": "YulBlock",
															"src": "3341:117:13",
															"statements": [
																{
																	"nativeSrc": "3356:15:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "3356:15:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3370:1:13",
																		"nodeType": "YulLiteral",
																		"src": "3370:1:13",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "3360:6:13",
																			"nodeType": "YulTypedName",
																			"src": "3360:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "3385:63:13",
																	"nodeType": "YulAssignment",
																	"src": "3385:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "3420:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "3420:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "3431:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "3431:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "3416:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "3416:3:13"
																				},
																				"nativeSrc": "3416:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "3416:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3440:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "3440:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "3395:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "3395:20:13"
																		},
																		"nativeSrc": "3395:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3395:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "3385:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "3385:6:13"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "3468:118:13",
															"nodeType": "YulBlock",
															"src": "3468:118:13",
															"statements": [
																{
																	"nativeSrc": "3483:16:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "3483:16:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3497:2:13",
																		"nodeType": "YulLiteral",
																		"src": "3497:2:13",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "3487:6:13",
																			"nodeType": "YulTypedName",
																			"src": "3487:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "3513:63:13",
																	"nodeType": "YulAssignment",
																	"src": "3513:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "3548:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "3548:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "3559:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "3559:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "3544:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "3544:3:13"
																				},
																				"nativeSrc": "3544:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "3544:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3568:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "3568:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "3523:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "3523:20:13"
																		},
																		"nativeSrc": "3523:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3523:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "3513:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "3513:6:13"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nativeSrc": "3119:474:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3164:9:13",
														"nodeType": "YulTypedName",
														"src": "3164:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "3175:7:13",
														"nodeType": "YulTypedName",
														"src": "3175:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "3187:6:13",
														"nodeType": "YulTypedName",
														"src": "3187:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3195:6:13",
														"nodeType": "YulTypedName",
														"src": "3195:6:13",
														"type": ""
													}
												],
												"src": "3119:474:13"
											},
											{
												"body": {
													"nativeSrc": "3641:48:13",
													"nodeType": "YulBlock",
													"src": "3641:48:13",
													"statements": [
														{
															"nativeSrc": "3651:32:13",
															"nodeType": "YulAssignment",
															"src": "3651:32:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3676:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "3676:5:13"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "3669:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "3669:6:13"
																		},
																		"nativeSrc": "3669:13:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3669:13:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3662:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "3662:6:13"
																},
																"nativeSrc": "3662:21:13",
																"nodeType": "YulFunctionCall",
																"src": "3662:21:13"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "3651:7:13",
																	"nodeType": "YulIdentifier",
																	"src": "3651:7:13"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nativeSrc": "3599:90:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3623:5:13",
														"nodeType": "YulTypedName",
														"src": "3623:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "3633:7:13",
														"nodeType": "YulTypedName",
														"src": "3633:7:13",
														"type": ""
													}
												],
												"src": "3599:90:13"
											},
											{
												"body": {
													"nativeSrc": "3754:50:13",
													"nodeType": "YulBlock",
													"src": "3754:50:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "3771:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "3771:3:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3791:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "3791:5:13"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nativeSrc": "3776:14:13",
																			"nodeType": "YulIdentifier",
																			"src": "3776:14:13"
																		},
																		"nativeSrc": "3776:21:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3776:21:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3764:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "3764:6:13"
																},
																"nativeSrc": "3764:34:13",
																"nodeType": "YulFunctionCall",
																"src": "3764:34:13"
															},
															"nativeSrc": "3764:34:13",
															"nodeType": "YulExpressionStatement",
															"src": "3764:34:13"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nativeSrc": "3695:109:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3742:5:13",
														"nodeType": "YulTypedName",
														"src": "3742:5:13",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "3749:3:13",
														"nodeType": "YulTypedName",
														"src": "3749:3:13",
														"type": ""
													}
												],
												"src": "3695:109:13"
											},
											{
												"body": {
													"nativeSrc": "3902:118:13",
													"nodeType": "YulBlock",
													"src": "3902:118:13",
													"statements": [
														{
															"nativeSrc": "3912:26:13",
															"nodeType": "YulAssignment",
															"src": "3912:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3924:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "3924:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3935:2:13",
																		"nodeType": "YulLiteral",
																		"src": "3935:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3920:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "3920:3:13"
																},
																"nativeSrc": "3920:18:13",
																"nodeType": "YulFunctionCall",
																"src": "3920:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3912:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "3912:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "3986:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "3986:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3999:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "3999:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4010:1:13",
																				"nodeType": "YulLiteral",
																				"src": "4010:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3995:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "3995:3:13"
																		},
																		"nativeSrc": "3995:17:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3995:17:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nativeSrc": "3948:37:13",
																	"nodeType": "YulIdentifier",
																	"src": "3948:37:13"
																},
																"nativeSrc": "3948:65:13",
																"nodeType": "YulFunctionCall",
																"src": "3948:65:13"
															},
															"nativeSrc": "3948:65:13",
															"nodeType": "YulExpressionStatement",
															"src": "3948:65:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nativeSrc": "3810:210:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3874:9:13",
														"nodeType": "YulTypedName",
														"src": "3874:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3886:6:13",
														"nodeType": "YulTypedName",
														"src": "3886:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3897:4:13",
														"nodeType": "YulTypedName",
														"src": "3897:4:13",
														"type": ""
													}
												],
												"src": "3810:210:13"
											},
											{
												"body": {
													"nativeSrc": "4126:519:13",
													"nodeType": "YulBlock",
													"src": "4126:519:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "4172:83:13",
																"nodeType": "YulBlock",
																"src": "4172:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "4174:77:13",
																				"nodeType": "YulIdentifier",
																				"src": "4174:77:13"
																			},
																			"nativeSrc": "4174:79:13",
																			"nodeType": "YulFunctionCall",
																			"src": "4174:79:13"
																		},
																		"nativeSrc": "4174:79:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "4174:79:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4147:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "4147:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "4156:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "4156:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4143:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "4143:3:13"
																		},
																		"nativeSrc": "4143:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "4143:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4168:2:13",
																		"nodeType": "YulLiteral",
																		"src": "4168:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "4139:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "4139:3:13"
																},
																"nativeSrc": "4139:32:13",
																"nodeType": "YulFunctionCall",
																"src": "4139:32:13"
															},
															"nativeSrc": "4136:119:13",
															"nodeType": "YulIf",
															"src": "4136:119:13"
														},
														{
															"nativeSrc": "4265:117:13",
															"nodeType": "YulBlock",
															"src": "4265:117:13",
															"statements": [
																{
																	"nativeSrc": "4280:15:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4280:15:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4294:1:13",
																		"nodeType": "YulLiteral",
																		"src": "4294:1:13",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4284:6:13",
																			"nodeType": "YulTypedName",
																			"src": "4284:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4309:63:13",
																	"nodeType": "YulAssignment",
																	"src": "4309:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4344:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "4344:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4355:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "4355:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4340:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "4340:3:13"
																				},
																				"nativeSrc": "4340:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "4340:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4364:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "4364:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "4319:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "4319:20:13"
																		},
																		"nativeSrc": "4319:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "4319:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "4309:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "4309:6:13"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "4392:118:13",
															"nodeType": "YulBlock",
															"src": "4392:118:13",
															"statements": [
																{
																	"nativeSrc": "4407:16:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4407:16:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4421:2:13",
																		"nodeType": "YulLiteral",
																		"src": "4421:2:13",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4411:6:13",
																			"nodeType": "YulTypedName",
																			"src": "4411:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4437:63:13",
																	"nodeType": "YulAssignment",
																	"src": "4437:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4472:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "4472:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4483:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "4483:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4468:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "4468:3:13"
																				},
																				"nativeSrc": "4468:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "4468:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4492:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "4492:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "4447:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "4447:20:13"
																		},
																		"nativeSrc": "4447:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "4447:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "4437:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "4437:6:13"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "4520:118:13",
															"nodeType": "YulBlock",
															"src": "4520:118:13",
															"statements": [
																{
																	"nativeSrc": "4535:16:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4535:16:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4549:2:13",
																		"nodeType": "YulLiteral",
																		"src": "4549:2:13",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4539:6:13",
																			"nodeType": "YulTypedName",
																			"src": "4539:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4565:63:13",
																	"nodeType": "YulAssignment",
																	"src": "4565:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4600:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "4600:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4611:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "4611:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4596:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "4596:3:13"
																				},
																				"nativeSrc": "4596:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "4596:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4620:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "4620:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "4575:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "4575:20:13"
																		},
																		"nativeSrc": "4575:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "4575:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nativeSrc": "4565:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "4565:6:13"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nativeSrc": "4026:619:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4080:9:13",
														"nodeType": "YulTypedName",
														"src": "4080:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "4091:7:13",
														"nodeType": "YulTypedName",
														"src": "4091:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "4103:6:13",
														"nodeType": "YulTypedName",
														"src": "4103:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "4111:6:13",
														"nodeType": "YulTypedName",
														"src": "4111:6:13",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "4119:6:13",
														"nodeType": "YulTypedName",
														"src": "4119:6:13",
														"type": ""
													}
												],
												"src": "4026:619:13"
											},
											{
												"body": {
													"nativeSrc": "4694:43:13",
													"nodeType": "YulBlock",
													"src": "4694:43:13",
													"statements": [
														{
															"nativeSrc": "4704:27:13",
															"nodeType": "YulAssignment",
															"src": "4704:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "4719:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "4719:5:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4726:4:13",
																		"nodeType": "YulLiteral",
																		"src": "4726:4:13",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "4715:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "4715:3:13"
																},
																"nativeSrc": "4715:16:13",
																"nodeType": "YulFunctionCall",
																"src": "4715:16:13"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "4704:7:13",
																	"nodeType": "YulIdentifier",
																	"src": "4704:7:13"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nativeSrc": "4651:86:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4676:5:13",
														"nodeType": "YulTypedName",
														"src": "4676:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "4686:7:13",
														"nodeType": "YulTypedName",
														"src": "4686:7:13",
														"type": ""
													}
												],
												"src": "4651:86:13"
											},
											{
												"body": {
													"nativeSrc": "4804:51:13",
													"nodeType": "YulBlock",
													"src": "4804:51:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "4821:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "4821:3:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "4842:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "4842:5:13"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint8",
																			"nativeSrc": "4826:15:13",
																			"nodeType": "YulIdentifier",
																			"src": "4826:15:13"
																		},
																		"nativeSrc": "4826:22:13",
																		"nodeType": "YulFunctionCall",
																		"src": "4826:22:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4814:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "4814:6:13"
																},
																"nativeSrc": "4814:35:13",
																"nodeType": "YulFunctionCall",
																"src": "4814:35:13"
															},
															"nativeSrc": "4814:35:13",
															"nodeType": "YulExpressionStatement",
															"src": "4814:35:13"
														}
													]
												},
												"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
												"nativeSrc": "4743:112:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4792:5:13",
														"nodeType": "YulTypedName",
														"src": "4792:5:13",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "4799:3:13",
														"nodeType": "YulTypedName",
														"src": "4799:3:13",
														"type": ""
													}
												],
												"src": "4743:112:13"
											},
											{
												"body": {
													"nativeSrc": "4955:120:13",
													"nodeType": "YulBlock",
													"src": "4955:120:13",
													"statements": [
														{
															"nativeSrc": "4965:26:13",
															"nodeType": "YulAssignment",
															"src": "4965:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4977:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "4977:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4988:2:13",
																		"nodeType": "YulLiteral",
																		"src": "4988:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4973:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "4973:3:13"
																},
																"nativeSrc": "4973:18:13",
																"nodeType": "YulFunctionCall",
																"src": "4973:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "4965:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "4965:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "5041:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "5041:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5054:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "5054:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5065:1:13",
																				"nodeType": "YulLiteral",
																				"src": "5065:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5050:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "5050:3:13"
																		},
																		"nativeSrc": "5050:17:13",
																		"nodeType": "YulFunctionCall",
																		"src": "5050:17:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
																	"nativeSrc": "5001:39:13",
																	"nodeType": "YulIdentifier",
																	"src": "5001:39:13"
																},
																"nativeSrc": "5001:67:13",
																"nodeType": "YulFunctionCall",
																"src": "5001:67:13"
															},
															"nativeSrc": "5001:67:13",
															"nodeType": "YulExpressionStatement",
															"src": "5001:67:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nativeSrc": "4861:214:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4927:9:13",
														"nodeType": "YulTypedName",
														"src": "4927:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "4939:6:13",
														"nodeType": "YulTypedName",
														"src": "4939:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "4950:4:13",
														"nodeType": "YulTypedName",
														"src": "4950:4:13",
														"type": ""
													}
												],
												"src": "4861:214:13"
											},
											{
												"body": {
													"nativeSrc": "5146:53:13",
													"nodeType": "YulBlock",
													"src": "5146:53:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "5163:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "5163:3:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "5186:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "5186:5:13"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nativeSrc": "5168:17:13",
																			"nodeType": "YulIdentifier",
																			"src": "5168:17:13"
																		},
																		"nativeSrc": "5168:24:13",
																		"nodeType": "YulFunctionCall",
																		"src": "5168:24:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5156:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "5156:6:13"
																},
																"nativeSrc": "5156:37:13",
																"nodeType": "YulFunctionCall",
																"src": "5156:37:13"
															},
															"nativeSrc": "5156:37:13",
															"nodeType": "YulExpressionStatement",
															"src": "5156:37:13"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "5081:118:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5134:5:13",
														"nodeType": "YulTypedName",
														"src": "5134:5:13",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "5141:3:13",
														"nodeType": "YulTypedName",
														"src": "5141:3:13",
														"type": ""
													}
												],
												"src": "5081:118:13"
											},
											{
												"body": {
													"nativeSrc": "5303:124:13",
													"nodeType": "YulBlock",
													"src": "5303:124:13",
													"statements": [
														{
															"nativeSrc": "5313:26:13",
															"nodeType": "YulAssignment",
															"src": "5313:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5325:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "5325:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5336:2:13",
																		"nodeType": "YulLiteral",
																		"src": "5336:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5321:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "5321:3:13"
																},
																"nativeSrc": "5321:18:13",
																"nodeType": "YulFunctionCall",
																"src": "5321:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5313:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "5313:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "5393:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "5393:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5406:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "5406:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5417:1:13",
																				"nodeType": "YulLiteral",
																				"src": "5417:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5402:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "5402:3:13"
																		},
																		"nativeSrc": "5402:17:13",
																		"nodeType": "YulFunctionCall",
																		"src": "5402:17:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "5349:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "5349:43:13"
																},
																"nativeSrc": "5349:71:13",
																"nodeType": "YulFunctionCall",
																"src": "5349:71:13"
															},
															"nativeSrc": "5349:71:13",
															"nodeType": "YulExpressionStatement",
															"src": "5349:71:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "5205:222:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5275:9:13",
														"nodeType": "YulTypedName",
														"src": "5275:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5287:6:13",
														"nodeType": "YulTypedName",
														"src": "5287:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5298:4:13",
														"nodeType": "YulTypedName",
														"src": "5298:4:13",
														"type": ""
													}
												],
												"src": "5205:222:13"
											},
											{
												"body": {
													"nativeSrc": "5499:263:13",
													"nodeType": "YulBlock",
													"src": "5499:263:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "5545:83:13",
																"nodeType": "YulBlock",
																"src": "5545:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "5547:77:13",
																				"nodeType": "YulIdentifier",
																				"src": "5547:77:13"
																			},
																			"nativeSrc": "5547:79:13",
																			"nodeType": "YulFunctionCall",
																			"src": "5547:79:13"
																		},
																		"nativeSrc": "5547:79:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "5547:79:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5520:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "5520:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "5529:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "5529:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5516:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "5516:3:13"
																		},
																		"nativeSrc": "5516:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "5516:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5541:2:13",
																		"nodeType": "YulLiteral",
																		"src": "5541:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "5512:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "5512:3:13"
																},
																"nativeSrc": "5512:32:13",
																"nodeType": "YulFunctionCall",
																"src": "5512:32:13"
															},
															"nativeSrc": "5509:119:13",
															"nodeType": "YulIf",
															"src": "5509:119:13"
														},
														{
															"nativeSrc": "5638:117:13",
															"nodeType": "YulBlock",
															"src": "5638:117:13",
															"statements": [
																{
																	"nativeSrc": "5653:15:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "5653:15:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5667:1:13",
																		"nodeType": "YulLiteral",
																		"src": "5667:1:13",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "5657:6:13",
																			"nodeType": "YulTypedName",
																			"src": "5657:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "5682:63:13",
																	"nodeType": "YulAssignment",
																	"src": "5682:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5717:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "5717:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "5728:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "5728:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5713:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "5713:3:13"
																				},
																				"nativeSrc": "5713:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "5713:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5737:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "5737:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "5692:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "5692:20:13"
																		},
																		"nativeSrc": "5692:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "5692:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "5682:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "5682:6:13"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "5433:329:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5469:9:13",
														"nodeType": "YulTypedName",
														"src": "5469:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "5480:7:13",
														"nodeType": "YulTypedName",
														"src": "5480:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "5492:6:13",
														"nodeType": "YulTypedName",
														"src": "5492:6:13",
														"type": ""
													}
												],
												"src": "5433:329:13"
											},
											{
												"body": {
													"nativeSrc": "5851:391:13",
													"nodeType": "YulBlock",
													"src": "5851:391:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "5897:83:13",
																"nodeType": "YulBlock",
																"src": "5897:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "5899:77:13",
																				"nodeType": "YulIdentifier",
																				"src": "5899:77:13"
																			},
																			"nativeSrc": "5899:79:13",
																			"nodeType": "YulFunctionCall",
																			"src": "5899:79:13"
																		},
																		"nativeSrc": "5899:79:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "5899:79:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5872:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "5872:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "5881:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "5881:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5868:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "5868:3:13"
																		},
																		"nativeSrc": "5868:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "5868:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5893:2:13",
																		"nodeType": "YulLiteral",
																		"src": "5893:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "5864:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "5864:3:13"
																},
																"nativeSrc": "5864:32:13",
																"nodeType": "YulFunctionCall",
																"src": "5864:32:13"
															},
															"nativeSrc": "5861:119:13",
															"nodeType": "YulIf",
															"src": "5861:119:13"
														},
														{
															"nativeSrc": "5990:117:13",
															"nodeType": "YulBlock",
															"src": "5990:117:13",
															"statements": [
																{
																	"nativeSrc": "6005:15:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "6005:15:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "6019:1:13",
																		"nodeType": "YulLiteral",
																		"src": "6019:1:13",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "6009:6:13",
																			"nodeType": "YulTypedName",
																			"src": "6009:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "6034:63:13",
																	"nodeType": "YulAssignment",
																	"src": "6034:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "6069:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "6069:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "6080:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "6080:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "6065:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "6065:3:13"
																				},
																				"nativeSrc": "6065:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "6065:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "6089:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "6089:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "6044:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "6044:20:13"
																		},
																		"nativeSrc": "6044:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "6044:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "6034:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "6034:6:13"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "6117:118:13",
															"nodeType": "YulBlock",
															"src": "6117:118:13",
															"statements": [
																{
																	"nativeSrc": "6132:16:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "6132:16:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "6146:2:13",
																		"nodeType": "YulLiteral",
																		"src": "6146:2:13",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "6136:6:13",
																			"nodeType": "YulTypedName",
																			"src": "6136:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "6162:63:13",
																	"nodeType": "YulAssignment",
																	"src": "6162:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "6197:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "6197:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "6208:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "6208:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "6193:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "6193:3:13"
																				},
																				"nativeSrc": "6193:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "6193:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "6217:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "6217:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "6172:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "6172:20:13"
																		},
																		"nativeSrc": "6172:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "6172:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "6162:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "6162:6:13"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_address",
												"nativeSrc": "5768:474:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5813:9:13",
														"nodeType": "YulTypedName",
														"src": "5813:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "5824:7:13",
														"nodeType": "YulTypedName",
														"src": "5824:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "5836:6:13",
														"nodeType": "YulTypedName",
														"src": "5836:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "5844:6:13",
														"nodeType": "YulTypedName",
														"src": "5844:6:13",
														"type": ""
													}
												],
												"src": "5768:474:13"
											},
											{
												"body": {
													"nativeSrc": "6280:28:13",
													"nodeType": "YulBlock",
													"src": "6280:28:13",
													"statements": [
														{
															"nativeSrc": "6290:12:13",
															"nodeType": "YulAssignment",
															"src": "6290:12:13",
															"value": {
																"name": "value",
																"nativeSrc": "6297:5:13",
																"nodeType": "YulIdentifier",
																"src": "6297:5:13"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "6290:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "6290:3:13"
																}
															]
														}
													]
												},
												"name": "identity",
												"nativeSrc": "6248:60:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6266:5:13",
														"nodeType": "YulTypedName",
														"src": "6266:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "6276:3:13",
														"nodeType": "YulTypedName",
														"src": "6276:3:13",
														"type": ""
													}
												],
												"src": "6248:60:13"
											},
											{
												"body": {
													"nativeSrc": "6374:82:13",
													"nodeType": "YulBlock",
													"src": "6374:82:13",
													"statements": [
														{
															"nativeSrc": "6384:66:13",
															"nodeType": "YulAssignment",
															"src": "6384:66:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "6442:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "6442:5:13"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint160",
																					"nativeSrc": "6424:17:13",
																					"nodeType": "YulIdentifier",
																					"src": "6424:17:13"
																				},
																				"nativeSrc": "6424:24:13",
																				"nodeType": "YulFunctionCall",
																				"src": "6424:24:13"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nativeSrc": "6415:8:13",
																			"nodeType": "YulIdentifier",
																			"src": "6415:8:13"
																		},
																		"nativeSrc": "6415:34:13",
																		"nodeType": "YulFunctionCall",
																		"src": "6415:34:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "6397:17:13",
																	"nodeType": "YulIdentifier",
																	"src": "6397:17:13"
																},
																"nativeSrc": "6397:53:13",
																"nodeType": "YulFunctionCall",
																"src": "6397:53:13"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "6384:9:13",
																	"nodeType": "YulIdentifier",
																	"src": "6384:9:13"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_uint160",
												"nativeSrc": "6314:142:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6354:5:13",
														"nodeType": "YulTypedName",
														"src": "6354:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "6364:9:13",
														"nodeType": "YulTypedName",
														"src": "6364:9:13",
														"type": ""
													}
												],
												"src": "6314:142:13"
											},
											{
												"body": {
													"nativeSrc": "6522:66:13",
													"nodeType": "YulBlock",
													"src": "6522:66:13",
													"statements": [
														{
															"nativeSrc": "6532:50:13",
															"nodeType": "YulAssignment",
															"src": "6532:50:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "6576:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "6576:5:13"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_uint160",
																	"nativeSrc": "6545:30:13",
																	"nodeType": "YulIdentifier",
																	"src": "6545:30:13"
																},
																"nativeSrc": "6545:37:13",
																"nodeType": "YulFunctionCall",
																"src": "6545:37:13"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "6532:9:13",
																	"nodeType": "YulIdentifier",
																	"src": "6532:9:13"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_address",
												"nativeSrc": "6462:126:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6502:5:13",
														"nodeType": "YulTypedName",
														"src": "6502:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "6512:9:13",
														"nodeType": "YulTypedName",
														"src": "6512:9:13",
														"type": ""
													}
												],
												"src": "6462:126:13"
											},
											{
												"body": {
													"nativeSrc": "6669:66:13",
													"nodeType": "YulBlock",
													"src": "6669:66:13",
													"statements": [
														{
															"nativeSrc": "6679:50:13",
															"nodeType": "YulAssignment",
															"src": "6679:50:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "6723:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "6723:5:13"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_address",
																	"nativeSrc": "6692:30:13",
																	"nodeType": "YulIdentifier",
																	"src": "6692:30:13"
																},
																"nativeSrc": "6692:37:13",
																"nodeType": "YulFunctionCall",
																"src": "6692:37:13"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "6679:9:13",
																	"nodeType": "YulIdentifier",
																	"src": "6679:9:13"
																}
															]
														}
													]
												},
												"name": "convert_t_contract$_IERC20_$1047_to_t_address",
												"nativeSrc": "6594:141:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6649:5:13",
														"nodeType": "YulTypedName",
														"src": "6649:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "6659:9:13",
														"nodeType": "YulTypedName",
														"src": "6659:9:13",
														"type": ""
													}
												],
												"src": "6594:141:13"
											},
											{
												"body": {
													"nativeSrc": "6821:81:13",
													"nodeType": "YulBlock",
													"src": "6821:81:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6838:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "6838:3:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "6889:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "6889:5:13"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_contract$_IERC20_$1047_to_t_address",
																			"nativeSrc": "6843:45:13",
																			"nodeType": "YulIdentifier",
																			"src": "6843:45:13"
																		},
																		"nativeSrc": "6843:52:13",
																		"nodeType": "YulFunctionCall",
																		"src": "6843:52:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6831:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "6831:6:13"
																},
																"nativeSrc": "6831:65:13",
																"nodeType": "YulFunctionCall",
																"src": "6831:65:13"
															},
															"nativeSrc": "6831:65:13",
															"nodeType": "YulExpressionStatement",
															"src": "6831:65:13"
														}
													]
												},
												"name": "abi_encode_t_contract$_IERC20_$1047_to_t_address_fromStack",
												"nativeSrc": "6741:161:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6809:5:13",
														"nodeType": "YulTypedName",
														"src": "6809:5:13",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "6816:3:13",
														"nodeType": "YulTypedName",
														"src": "6816:3:13",
														"type": ""
													}
												],
												"src": "6741:161:13"
											},
											{
												"body": {
													"nativeSrc": "7021:139:13",
													"nodeType": "YulBlock",
													"src": "7021:139:13",
													"statements": [
														{
															"nativeSrc": "7031:26:13",
															"nodeType": "YulAssignment",
															"src": "7031:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7043:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "7043:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7054:2:13",
																		"nodeType": "YulLiteral",
																		"src": "7054:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7039:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "7039:3:13"
																},
																"nativeSrc": "7039:18:13",
																"nodeType": "YulFunctionCall",
																"src": "7039:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7031:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "7031:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "7126:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "7126:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7139:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "7139:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7150:1:13",
																				"nodeType": "YulLiteral",
																				"src": "7150:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7135:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "7135:3:13"
																		},
																		"nativeSrc": "7135:17:13",
																		"nodeType": "YulFunctionCall",
																		"src": "7135:17:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_contract$_IERC20_$1047_to_t_address_fromStack",
																	"nativeSrc": "7067:58:13",
																	"nodeType": "YulIdentifier",
																	"src": "7067:58:13"
																},
																"nativeSrc": "7067:86:13",
																"nodeType": "YulFunctionCall",
																"src": "7067:86:13"
															},
															"nativeSrc": "7067:86:13",
															"nodeType": "YulExpressionStatement",
															"src": "7067:86:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IERC20_$1047__to_t_address__fromStack_reversed",
												"nativeSrc": "6908:252:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6993:9:13",
														"nodeType": "YulTypedName",
														"src": "6993:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "7005:6:13",
														"nodeType": "YulTypedName",
														"src": "7005:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "7016:4:13",
														"nodeType": "YulTypedName",
														"src": "7016:4:13",
														"type": ""
													}
												],
												"src": "6908:252:13"
											},
											{
												"body": {
													"nativeSrc": "7266:519:13",
													"nodeType": "YulBlock",
													"src": "7266:519:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "7312:83:13",
																"nodeType": "YulBlock",
																"src": "7312:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "7314:77:13",
																				"nodeType": "YulIdentifier",
																				"src": "7314:77:13"
																			},
																			"nativeSrc": "7314:79:13",
																			"nodeType": "YulFunctionCall",
																			"src": "7314:79:13"
																		},
																		"nativeSrc": "7314:79:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "7314:79:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "7287:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "7287:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "7296:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "7296:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "7283:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "7283:3:13"
																		},
																		"nativeSrc": "7283:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "7283:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7308:2:13",
																		"nodeType": "YulLiteral",
																		"src": "7308:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "7279:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "7279:3:13"
																},
																"nativeSrc": "7279:32:13",
																"nodeType": "YulFunctionCall",
																"src": "7279:32:13"
															},
															"nativeSrc": "7276:119:13",
															"nodeType": "YulIf",
															"src": "7276:119:13"
														},
														{
															"nativeSrc": "7405:117:13",
															"nodeType": "YulBlock",
															"src": "7405:117:13",
															"statements": [
																{
																	"nativeSrc": "7420:15:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "7420:15:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "7434:1:13",
																		"nodeType": "YulLiteral",
																		"src": "7434:1:13",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "7424:6:13",
																			"nodeType": "YulTypedName",
																			"src": "7424:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "7449:63:13",
																	"nodeType": "YulAssignment",
																	"src": "7449:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "7484:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "7484:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "7495:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "7495:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "7480:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "7480:3:13"
																				},
																				"nativeSrc": "7480:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "7480:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "7504:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "7504:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "7459:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "7459:20:13"
																		},
																		"nativeSrc": "7459:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "7459:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "7449:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "7449:6:13"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "7532:118:13",
															"nodeType": "YulBlock",
															"src": "7532:118:13",
															"statements": [
																{
																	"nativeSrc": "7547:16:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "7547:16:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "7561:2:13",
																		"nodeType": "YulLiteral",
																		"src": "7561:2:13",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "7551:6:13",
																			"nodeType": "YulTypedName",
																			"src": "7551:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "7577:63:13",
																	"nodeType": "YulAssignment",
																	"src": "7577:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "7612:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "7612:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "7623:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "7623:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "7608:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "7608:3:13"
																				},
																				"nativeSrc": "7608:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "7608:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "7632:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "7632:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "7587:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "7587:20:13"
																		},
																		"nativeSrc": "7587:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "7587:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "7577:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "7577:6:13"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "7660:118:13",
															"nodeType": "YulBlock",
															"src": "7660:118:13",
															"statements": [
																{
																	"nativeSrc": "7675:16:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "7675:16:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "7689:2:13",
																		"nodeType": "YulLiteral",
																		"src": "7689:2:13",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "7679:6:13",
																			"nodeType": "YulTypedName",
																			"src": "7679:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "7705:63:13",
																	"nodeType": "YulAssignment",
																	"src": "7705:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "7740:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "7740:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "7751:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "7751:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "7736:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "7736:3:13"
																				},
																				"nativeSrc": "7736:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "7736:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "7760:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "7760:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "7715:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "7715:20:13"
																		},
																		"nativeSrc": "7715:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "7715:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nativeSrc": "7705:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "7705:6:13"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_addresst_address",
												"nativeSrc": "7166:619:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7220:9:13",
														"nodeType": "YulTypedName",
														"src": "7220:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "7231:7:13",
														"nodeType": "YulTypedName",
														"src": "7231:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "7243:6:13",
														"nodeType": "YulTypedName",
														"src": "7243:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "7251:6:13",
														"nodeType": "YulTypedName",
														"src": "7251:6:13",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "7259:6:13",
														"nodeType": "YulTypedName",
														"src": "7259:6:13",
														"type": ""
													}
												],
												"src": "7166:619:13"
											},
											{
												"body": {
													"nativeSrc": "7874:391:13",
													"nodeType": "YulBlock",
													"src": "7874:391:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "7920:83:13",
																"nodeType": "YulBlock",
																"src": "7920:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "7922:77:13",
																				"nodeType": "YulIdentifier",
																				"src": "7922:77:13"
																			},
																			"nativeSrc": "7922:79:13",
																			"nodeType": "YulFunctionCall",
																			"src": "7922:79:13"
																		},
																		"nativeSrc": "7922:79:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "7922:79:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "7895:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "7895:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "7904:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "7904:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "7891:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "7891:3:13"
																		},
																		"nativeSrc": "7891:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "7891:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7916:2:13",
																		"nodeType": "YulLiteral",
																		"src": "7916:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "7887:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "7887:3:13"
																},
																"nativeSrc": "7887:32:13",
																"nodeType": "YulFunctionCall",
																"src": "7887:32:13"
															},
															"nativeSrc": "7884:119:13",
															"nodeType": "YulIf",
															"src": "7884:119:13"
														},
														{
															"nativeSrc": "8013:117:13",
															"nodeType": "YulBlock",
															"src": "8013:117:13",
															"statements": [
																{
																	"nativeSrc": "8028:15:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "8028:15:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "8042:1:13",
																		"nodeType": "YulLiteral",
																		"src": "8042:1:13",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "8032:6:13",
																			"nodeType": "YulTypedName",
																			"src": "8032:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "8057:63:13",
																	"nodeType": "YulAssignment",
																	"src": "8057:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "8092:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "8092:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "8103:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "8103:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "8088:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "8088:3:13"
																				},
																				"nativeSrc": "8088:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "8088:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "8112:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "8112:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "8067:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "8067:20:13"
																		},
																		"nativeSrc": "8067:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "8067:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "8057:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "8057:6:13"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "8140:118:13",
															"nodeType": "YulBlock",
															"src": "8140:118:13",
															"statements": [
																{
																	"nativeSrc": "8155:16:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "8155:16:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "8169:2:13",
																		"nodeType": "YulLiteral",
																		"src": "8169:2:13",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "8159:6:13",
																			"nodeType": "YulTypedName",
																			"src": "8159:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "8185:63:13",
																	"nodeType": "YulAssignment",
																	"src": "8185:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "8220:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "8220:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "8231:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "8231:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "8216:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "8216:3:13"
																				},
																				"nativeSrc": "8216:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "8216:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "8240:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "8240:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "8195:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "8195:20:13"
																		},
																		"nativeSrc": "8195:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "8195:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "8185:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "8185:6:13"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nativeSrc": "7791:474:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7836:9:13",
														"nodeType": "YulTypedName",
														"src": "7836:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "7847:7:13",
														"nodeType": "YulTypedName",
														"src": "7847:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "7859:6:13",
														"nodeType": "YulTypedName",
														"src": "7859:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "7867:6:13",
														"nodeType": "YulTypedName",
														"src": "7867:6:13",
														"type": ""
													}
												],
												"src": "7791:474:13"
											},
											{
												"body": {
													"nativeSrc": "8334:80:13",
													"nodeType": "YulBlock",
													"src": "8334:80:13",
													"statements": [
														{
															"nativeSrc": "8344:22:13",
															"nodeType": "YulAssignment",
															"src": "8344:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "8359:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "8359:6:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "8353:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "8353:5:13"
																},
																"nativeSrc": "8353:13:13",
																"nodeType": "YulFunctionCall",
																"src": "8353:13:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "8344:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "8344:5:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "8402:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "8402:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nativeSrc": "8375:26:13",
																	"nodeType": "YulIdentifier",
																	"src": "8375:26:13"
																},
																"nativeSrc": "8375:33:13",
																"nodeType": "YulFunctionCall",
																"src": "8375:33:13"
															},
															"nativeSrc": "8375:33:13",
															"nodeType": "YulExpressionStatement",
															"src": "8375:33:13"
														}
													]
												},
												"name": "abi_decode_t_uint256_fromMemory",
												"nativeSrc": "8271:143:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "8312:6:13",
														"nodeType": "YulTypedName",
														"src": "8312:6:13",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "8320:3:13",
														"nodeType": "YulTypedName",
														"src": "8320:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "8328:5:13",
														"nodeType": "YulTypedName",
														"src": "8328:5:13",
														"type": ""
													}
												],
												"src": "8271:143:13"
											},
											{
												"body": {
													"nativeSrc": "8497:274:13",
													"nodeType": "YulBlock",
													"src": "8497:274:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "8543:83:13",
																"nodeType": "YulBlock",
																"src": "8543:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "8545:77:13",
																				"nodeType": "YulIdentifier",
																				"src": "8545:77:13"
																			},
																			"nativeSrc": "8545:79:13",
																			"nodeType": "YulFunctionCall",
																			"src": "8545:79:13"
																		},
																		"nativeSrc": "8545:79:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "8545:79:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "8518:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "8518:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "8527:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "8527:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "8514:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "8514:3:13"
																		},
																		"nativeSrc": "8514:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "8514:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8539:2:13",
																		"nodeType": "YulLiteral",
																		"src": "8539:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "8510:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "8510:3:13"
																},
																"nativeSrc": "8510:32:13",
																"nodeType": "YulFunctionCall",
																"src": "8510:32:13"
															},
															"nativeSrc": "8507:119:13",
															"nodeType": "YulIf",
															"src": "8507:119:13"
														},
														{
															"nativeSrc": "8636:128:13",
															"nodeType": "YulBlock",
															"src": "8636:128:13",
															"statements": [
																{
																	"nativeSrc": "8651:15:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "8651:15:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "8665:1:13",
																		"nodeType": "YulLiteral",
																		"src": "8665:1:13",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "8655:6:13",
																			"nodeType": "YulTypedName",
																			"src": "8655:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "8680:74:13",
																	"nodeType": "YulAssignment",
																	"src": "8680:74:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "8726:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "8726:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "8737:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "8737:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "8722:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "8722:3:13"
																				},
																				"nativeSrc": "8722:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "8722:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "8746:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "8746:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nativeSrc": "8690:31:13",
																			"nodeType": "YulIdentifier",
																			"src": "8690:31:13"
																		},
																		"nativeSrc": "8690:64:13",
																		"nodeType": "YulFunctionCall",
																		"src": "8690:64:13"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "8680:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "8680:6:13"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nativeSrc": "8420:351:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "8467:9:13",
														"nodeType": "YulTypedName",
														"src": "8467:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "8478:7:13",
														"nodeType": "YulTypedName",
														"src": "8478:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "8490:6:13",
														"nodeType": "YulTypedName",
														"src": "8490:6:13",
														"type": ""
													}
												],
												"src": "8420:351:13"
											},
											{
												"body": {
													"nativeSrc": "8805:152:13",
													"nodeType": "YulBlock",
													"src": "8805:152:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8822:1:13",
																		"nodeType": "YulLiteral",
																		"src": "8822:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8825:77:13",
																		"nodeType": "YulLiteral",
																		"src": "8825:77:13",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8815:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "8815:6:13"
																},
																"nativeSrc": "8815:88:13",
																"nodeType": "YulFunctionCall",
																"src": "8815:88:13"
															},
															"nativeSrc": "8815:88:13",
															"nodeType": "YulExpressionStatement",
															"src": "8815:88:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8919:1:13",
																		"nodeType": "YulLiteral",
																		"src": "8919:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8922:4:13",
																		"nodeType": "YulLiteral",
																		"src": "8922:4:13",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8912:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "8912:6:13"
																},
																"nativeSrc": "8912:15:13",
																"nodeType": "YulFunctionCall",
																"src": "8912:15:13"
															},
															"nativeSrc": "8912:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "8912:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8943:1:13",
																		"nodeType": "YulLiteral",
																		"src": "8943:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8946:4:13",
																		"nodeType": "YulLiteral",
																		"src": "8946:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "8936:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "8936:6:13"
																},
																"nativeSrc": "8936:15:13",
																"nodeType": "YulFunctionCall",
																"src": "8936:15:13"
															},
															"nativeSrc": "8936:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "8936:15:13"
														}
													]
												},
												"name": "panic_error_0x22",
												"nativeSrc": "8777:180:13",
												"nodeType": "YulFunctionDefinition",
												"src": "8777:180:13"
											},
											{
												"body": {
													"nativeSrc": "9014:269:13",
													"nodeType": "YulBlock",
													"src": "9014:269:13",
													"statements": [
														{
															"nativeSrc": "9024:22:13",
															"nodeType": "YulAssignment",
															"src": "9024:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "9038:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "9038:4:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9044:1:13",
																		"nodeType": "YulLiteral",
																		"src": "9044:1:13",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "9034:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "9034:3:13"
																},
																"nativeSrc": "9034:12:13",
																"nodeType": "YulFunctionCall",
																"src": "9034:12:13"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "9024:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "9024:6:13"
																}
															]
														},
														{
															"nativeSrc": "9055:38:13",
															"nodeType": "YulVariableDeclaration",
															"src": "9055:38:13",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "9085:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "9085:4:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9091:1:13",
																		"nodeType": "YulLiteral",
																		"src": "9091:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "9081:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "9081:3:13"
																},
																"nativeSrc": "9081:12:13",
																"nodeType": "YulFunctionCall",
																"src": "9081:12:13"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "9059:18:13",
																	"nodeType": "YulTypedName",
																	"src": "9059:18:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "9132:51:13",
																"nodeType": "YulBlock",
																"src": "9132:51:13",
																"statements": [
																	{
																		"nativeSrc": "9146:27:13",
																		"nodeType": "YulAssignment",
																		"src": "9146:27:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "9160:6:13",
																					"nodeType": "YulIdentifier",
																					"src": "9160:6:13"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "9168:4:13",
																					"nodeType": "YulLiteral",
																					"src": "9168:4:13",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "9156:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "9156:3:13"
																			},
																			"nativeSrc": "9156:17:13",
																			"nodeType": "YulFunctionCall",
																			"src": "9156:17:13"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "9146:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "9146:6:13"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "9112:18:13",
																		"nodeType": "YulIdentifier",
																		"src": "9112:18:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "9105:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "9105:6:13"
																},
																"nativeSrc": "9105:26:13",
																"nodeType": "YulFunctionCall",
																"src": "9105:26:13"
															},
															"nativeSrc": "9102:81:13",
															"nodeType": "YulIf",
															"src": "9102:81:13"
														},
														{
															"body": {
																"nativeSrc": "9235:42:13",
																"nodeType": "YulBlock",
																"src": "9235:42:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nativeSrc": "9249:16:13",
																				"nodeType": "YulIdentifier",
																				"src": "9249:16:13"
																			},
																			"nativeSrc": "9249:18:13",
																			"nodeType": "YulFunctionCall",
																			"src": "9249:18:13"
																		},
																		"nativeSrc": "9249:18:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "9249:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "9199:18:13",
																		"nodeType": "YulIdentifier",
																		"src": "9199:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "9222:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "9222:6:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9230:2:13",
																				"nodeType": "YulLiteral",
																				"src": "9230:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "9219:2:13",
																			"nodeType": "YulIdentifier",
																			"src": "9219:2:13"
																		},
																		"nativeSrc": "9219:14:13",
																		"nodeType": "YulFunctionCall",
																		"src": "9219:14:13"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "9196:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "9196:2:13"
																},
																"nativeSrc": "9196:38:13",
																"nodeType": "YulFunctionCall",
																"src": "9196:38:13"
															},
															"nativeSrc": "9193:84:13",
															"nodeType": "YulIf",
															"src": "9193:84:13"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "8963:320:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "8998:4:13",
														"nodeType": "YulTypedName",
														"src": "8998:4:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "9007:6:13",
														"nodeType": "YulTypedName",
														"src": "9007:6:13",
														"type": ""
													}
												],
												"src": "8963:320:13"
											},
											{
												"body": {
													"nativeSrc": "9317:152:13",
													"nodeType": "YulBlock",
													"src": "9317:152:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "9334:1:13",
																		"nodeType": "YulLiteral",
																		"src": "9334:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9337:77:13",
																		"nodeType": "YulLiteral",
																		"src": "9337:77:13",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9327:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "9327:6:13"
																},
																"nativeSrc": "9327:88:13",
																"nodeType": "YulFunctionCall",
																"src": "9327:88:13"
															},
															"nativeSrc": "9327:88:13",
															"nodeType": "YulExpressionStatement",
															"src": "9327:88:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "9431:1:13",
																		"nodeType": "YulLiteral",
																		"src": "9431:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9434:4:13",
																		"nodeType": "YulLiteral",
																		"src": "9434:4:13",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9424:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "9424:6:13"
																},
																"nativeSrc": "9424:15:13",
																"nodeType": "YulFunctionCall",
																"src": "9424:15:13"
															},
															"nativeSrc": "9424:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "9424:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "9455:1:13",
																		"nodeType": "YulLiteral",
																		"src": "9455:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9458:4:13",
																		"nodeType": "YulLiteral",
																		"src": "9458:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "9448:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "9448:6:13"
																},
																"nativeSrc": "9448:15:13",
																"nodeType": "YulFunctionCall",
																"src": "9448:15:13"
															},
															"nativeSrc": "9448:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "9448:15:13"
														}
													]
												},
												"name": "panic_error_0x11",
												"nativeSrc": "9289:180:13",
												"nodeType": "YulFunctionDefinition",
												"src": "9289:180:13"
											},
											{
												"body": {
													"nativeSrc": "9517:146:13",
													"nodeType": "YulBlock",
													"src": "9517:146:13",
													"statements": [
														{
															"nativeSrc": "9527:23:13",
															"nodeType": "YulAssignment",
															"src": "9527:23:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "9548:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "9548:1:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nativeSrc": "9532:15:13",
																	"nodeType": "YulIdentifier",
																	"src": "9532:15:13"
																},
																"nativeSrc": "9532:18:13",
																"nodeType": "YulFunctionCall",
																"src": "9532:18:13"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "9527:1:13",
																	"nodeType": "YulIdentifier",
																	"src": "9527:1:13"
																}
															]
														},
														{
															"nativeSrc": "9559:23:13",
															"nodeType": "YulAssignment",
															"src": "9559:23:13",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "9580:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "9580:1:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nativeSrc": "9564:15:13",
																	"nodeType": "YulIdentifier",
																	"src": "9564:15:13"
																},
																"nativeSrc": "9564:18:13",
																"nodeType": "YulFunctionCall",
																"src": "9564:18:13"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "9559:1:13",
																	"nodeType": "YulIdentifier",
																	"src": "9559:1:13"
																}
															]
														},
														{
															"nativeSrc": "9591:16:13",
															"nodeType": "YulAssignment",
															"src": "9591:16:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "9602:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "9602:1:13"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "9605:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "9605:1:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "9598:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "9598:3:13"
																},
																"nativeSrc": "9598:9:13",
																"nodeType": "YulFunctionCall",
																"src": "9598:9:13"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "9591:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "9591:3:13"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "9634:22:13",
																"nodeType": "YulBlock",
																"src": "9634:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "9636:16:13",
																				"nodeType": "YulIdentifier",
																				"src": "9636:16:13"
																			},
																			"nativeSrc": "9636:18:13",
																			"nodeType": "YulFunctionCall",
																			"src": "9636:18:13"
																		},
																		"nativeSrc": "9636:18:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "9636:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "sum",
																		"nativeSrc": "9623:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "9623:3:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9628:4:13",
																		"nodeType": "YulLiteral",
																		"src": "9628:4:13",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "9620:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "9620:2:13"
																},
																"nativeSrc": "9620:13:13",
																"nodeType": "YulFunctionCall",
																"src": "9620:13:13"
															},
															"nativeSrc": "9617:39:13",
															"nodeType": "YulIf",
															"src": "9617:39:13"
														}
													]
												},
												"name": "checked_add_t_uint8",
												"nativeSrc": "9475:188:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "9504:1:13",
														"nodeType": "YulTypedName",
														"src": "9504:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "9507:1:13",
														"nodeType": "YulTypedName",
														"src": "9507:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "9513:3:13",
														"nodeType": "YulTypedName",
														"src": "9513:3:13",
														"type": ""
													}
												],
												"src": "9475:188:13"
											},
											{
												"body": {
													"nativeSrc": "9775:64:13",
													"nodeType": "YulBlock",
													"src": "9775:64:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "9797:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "9797:6:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9805:1:13",
																				"nodeType": "YulLiteral",
																				"src": "9805:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9793:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "9793:3:13"
																		},
																		"nativeSrc": "9793:14:13",
																		"nodeType": "YulFunctionCall",
																		"src": "9793:14:13"
																	},
																	{
																		"hexValue": "53656e646572206973204e6f74205661756c7473",
																		"kind": "string",
																		"nativeSrc": "9809:22:13",
																		"nodeType": "YulLiteral",
																		"src": "9809:22:13",
																		"type": "",
																		"value": "Sender is Not Vaults"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9786:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "9786:6:13"
																},
																"nativeSrc": "9786:46:13",
																"nodeType": "YulFunctionCall",
																"src": "9786:46:13"
															},
															"nativeSrc": "9786:46:13",
															"nodeType": "YulExpressionStatement",
															"src": "9786:46:13"
														}
													]
												},
												"name": "store_literal_in_memory_8bb8eaf1580515f96cb5013e54fb02bd0d2d1120f2636292a4ac84c518b1b5a3",
												"nativeSrc": "9669:170:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nativeSrc": "9767:6:13",
														"nodeType": "YulTypedName",
														"src": "9767:6:13",
														"type": ""
													}
												],
												"src": "9669:170:13"
											},
											{
												"body": {
													"nativeSrc": "9991:220:13",
													"nodeType": "YulBlock",
													"src": "9991:220:13",
													"statements": [
														{
															"nativeSrc": "10001:74:13",
															"nodeType": "YulAssignment",
															"src": "10001:74:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "10067:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "10067:3:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10072:2:13",
																		"nodeType": "YulLiteral",
																		"src": "10072:2:13",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "10008:58:13",
																	"nodeType": "YulIdentifier",
																	"src": "10008:58:13"
																},
																"nativeSrc": "10008:67:13",
																"nodeType": "YulFunctionCall",
																"src": "10008:67:13"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "10001:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "10001:3:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "10173:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "10173:3:13"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_8bb8eaf1580515f96cb5013e54fb02bd0d2d1120f2636292a4ac84c518b1b5a3",
																	"nativeSrc": "10084:88:13",
																	"nodeType": "YulIdentifier",
																	"src": "10084:88:13"
																},
																"nativeSrc": "10084:93:13",
																"nodeType": "YulFunctionCall",
																"src": "10084:93:13"
															},
															"nativeSrc": "10084:93:13",
															"nodeType": "YulExpressionStatement",
															"src": "10084:93:13"
														},
														{
															"nativeSrc": "10186:19:13",
															"nodeType": "YulAssignment",
															"src": "10186:19:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "10197:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "10197:3:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10202:2:13",
																		"nodeType": "YulLiteral",
																		"src": "10202:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "10193:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "10193:3:13"
																},
																"nativeSrc": "10193:12:13",
																"nodeType": "YulFunctionCall",
																"src": "10193:12:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "10186:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "10186:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_8bb8eaf1580515f96cb5013e54fb02bd0d2d1120f2636292a4ac84c518b1b5a3_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "9845:366:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "9979:3:13",
														"nodeType": "YulTypedName",
														"src": "9979:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "9987:3:13",
														"nodeType": "YulTypedName",
														"src": "9987:3:13",
														"type": ""
													}
												],
												"src": "9845:366:13"
											},
											{
												"body": {
													"nativeSrc": "10388:248:13",
													"nodeType": "YulBlock",
													"src": "10388:248:13",
													"statements": [
														{
															"nativeSrc": "10398:26:13",
															"nodeType": "YulAssignment",
															"src": "10398:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "10410:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "10410:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10421:2:13",
																		"nodeType": "YulLiteral",
																		"src": "10421:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "10406:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "10406:3:13"
																},
																"nativeSrc": "10406:18:13",
																"nodeType": "YulFunctionCall",
																"src": "10406:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "10398:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "10398:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "10445:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "10445:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10456:1:13",
																				"nodeType": "YulLiteral",
																				"src": "10456:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10441:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "10441:3:13"
																		},
																		"nativeSrc": "10441:17:13",
																		"nodeType": "YulFunctionCall",
																		"src": "10441:17:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "10464:4:13",
																				"nodeType": "YulIdentifier",
																				"src": "10464:4:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "10470:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "10470:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "10460:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "10460:3:13"
																		},
																		"nativeSrc": "10460:20:13",
																		"nodeType": "YulFunctionCall",
																		"src": "10460:20:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10434:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "10434:6:13"
																},
																"nativeSrc": "10434:47:13",
																"nodeType": "YulFunctionCall",
																"src": "10434:47:13"
															},
															"nativeSrc": "10434:47:13",
															"nodeType": "YulExpressionStatement",
															"src": "10434:47:13"
														},
														{
															"nativeSrc": "10490:139:13",
															"nodeType": "YulAssignment",
															"src": "10490:139:13",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nativeSrc": "10624:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "10624:4:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_8bb8eaf1580515f96cb5013e54fb02bd0d2d1120f2636292a4ac84c518b1b5a3_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "10498:124:13",
																	"nodeType": "YulIdentifier",
																	"src": "10498:124:13"
																},
																"nativeSrc": "10498:131:13",
																"nodeType": "YulFunctionCall",
																"src": "10498:131:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "10490:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "10490:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_8bb8eaf1580515f96cb5013e54fb02bd0d2d1120f2636292a4ac84c518b1b5a3__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "10217:419:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "10368:9:13",
														"nodeType": "YulTypedName",
														"src": "10368:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "10383:4:13",
														"nodeType": "YulTypedName",
														"src": "10383:4:13",
														"type": ""
													}
												],
												"src": "10217:419:13"
											},
											{
												"body": {
													"nativeSrc": "10748:73:13",
													"nodeType": "YulBlock",
													"src": "10748:73:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "10770:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "10770:6:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10778:1:13",
																				"nodeType": "YulLiteral",
																				"src": "10778:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10766:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "10766:3:13"
																		},
																		"nativeSrc": "10766:14:13",
																		"nodeType": "YulFunctionCall",
																		"src": "10766:14:13"
																	},
																	{
																		"hexValue": "416d6f756e74206d7573742062652067726561746572207468616e2030",
																		"kind": "string",
																		"nativeSrc": "10782:31:13",
																		"nodeType": "YulLiteral",
																		"src": "10782:31:13",
																		"type": "",
																		"value": "Amount must be greater than 0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10759:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "10759:6:13"
																},
																"nativeSrc": "10759:55:13",
																"nodeType": "YulFunctionCall",
																"src": "10759:55:13"
															},
															"nativeSrc": "10759:55:13",
															"nodeType": "YulExpressionStatement",
															"src": "10759:55:13"
														}
													]
												},
												"name": "store_literal_in_memory_3e76f273c719bb7d23db533a2dc9a822ae7d899fcd42eb8910272e24764e8296",
												"nativeSrc": "10642:179:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nativeSrc": "10740:6:13",
														"nodeType": "YulTypedName",
														"src": "10740:6:13",
														"type": ""
													}
												],
												"src": "10642:179:13"
											},
											{
												"body": {
													"nativeSrc": "10973:220:13",
													"nodeType": "YulBlock",
													"src": "10973:220:13",
													"statements": [
														{
															"nativeSrc": "10983:74:13",
															"nodeType": "YulAssignment",
															"src": "10983:74:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "11049:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "11049:3:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11054:2:13",
																		"nodeType": "YulLiteral",
																		"src": "11054:2:13",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "10990:58:13",
																	"nodeType": "YulIdentifier",
																	"src": "10990:58:13"
																},
																"nativeSrc": "10990:67:13",
																"nodeType": "YulFunctionCall",
																"src": "10990:67:13"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "10983:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "10983:3:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "11155:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "11155:3:13"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_3e76f273c719bb7d23db533a2dc9a822ae7d899fcd42eb8910272e24764e8296",
																	"nativeSrc": "11066:88:13",
																	"nodeType": "YulIdentifier",
																	"src": "11066:88:13"
																},
																"nativeSrc": "11066:93:13",
																"nodeType": "YulFunctionCall",
																"src": "11066:93:13"
															},
															"nativeSrc": "11066:93:13",
															"nodeType": "YulExpressionStatement",
															"src": "11066:93:13"
														},
														{
															"nativeSrc": "11168:19:13",
															"nodeType": "YulAssignment",
															"src": "11168:19:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "11179:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "11179:3:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11184:2:13",
																		"nodeType": "YulLiteral",
																		"src": "11184:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "11175:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "11175:3:13"
																},
																"nativeSrc": "11175:12:13",
																"nodeType": "YulFunctionCall",
																"src": "11175:12:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "11168:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "11168:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_3e76f273c719bb7d23db533a2dc9a822ae7d899fcd42eb8910272e24764e8296_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "10827:366:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "10961:3:13",
														"nodeType": "YulTypedName",
														"src": "10961:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "10969:3:13",
														"nodeType": "YulTypedName",
														"src": "10969:3:13",
														"type": ""
													}
												],
												"src": "10827:366:13"
											},
											{
												"body": {
													"nativeSrc": "11370:248:13",
													"nodeType": "YulBlock",
													"src": "11370:248:13",
													"statements": [
														{
															"nativeSrc": "11380:26:13",
															"nodeType": "YulAssignment",
															"src": "11380:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "11392:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "11392:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11403:2:13",
																		"nodeType": "YulLiteral",
																		"src": "11403:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "11388:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "11388:3:13"
																},
																"nativeSrc": "11388:18:13",
																"nodeType": "YulFunctionCall",
																"src": "11388:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "11380:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "11380:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "11427:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "11427:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "11438:1:13",
																				"nodeType": "YulLiteral",
																				"src": "11438:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "11423:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "11423:3:13"
																		},
																		"nativeSrc": "11423:17:13",
																		"nodeType": "YulFunctionCall",
																		"src": "11423:17:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "11446:4:13",
																				"nodeType": "YulIdentifier",
																				"src": "11446:4:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "11452:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "11452:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "11442:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "11442:3:13"
																		},
																		"nativeSrc": "11442:20:13",
																		"nodeType": "YulFunctionCall",
																		"src": "11442:20:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "11416:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "11416:6:13"
																},
																"nativeSrc": "11416:47:13",
																"nodeType": "YulFunctionCall",
																"src": "11416:47:13"
															},
															"nativeSrc": "11416:47:13",
															"nodeType": "YulExpressionStatement",
															"src": "11416:47:13"
														},
														{
															"nativeSrc": "11472:139:13",
															"nodeType": "YulAssignment",
															"src": "11472:139:13",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nativeSrc": "11606:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "11606:4:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_3e76f273c719bb7d23db533a2dc9a822ae7d899fcd42eb8910272e24764e8296_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "11480:124:13",
																	"nodeType": "YulIdentifier",
																	"src": "11480:124:13"
																},
																"nativeSrc": "11480:131:13",
																"nodeType": "YulFunctionCall",
																"src": "11480:131:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "11472:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "11472:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3e76f273c719bb7d23db533a2dc9a822ae7d899fcd42eb8910272e24764e8296__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "11199:419:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "11350:9:13",
														"nodeType": "YulTypedName",
														"src": "11350:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "11365:4:13",
														"nodeType": "YulTypedName",
														"src": "11365:4:13",
														"type": ""
													}
												],
												"src": "11199:419:13"
											},
											{
												"body": {
													"nativeSrc": "11778:288:13",
													"nodeType": "YulBlock",
													"src": "11778:288:13",
													"statements": [
														{
															"nativeSrc": "11788:26:13",
															"nodeType": "YulAssignment",
															"src": "11788:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "11800:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "11800:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11811:2:13",
																		"nodeType": "YulLiteral",
																		"src": "11811:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "11796:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "11796:3:13"
																},
																"nativeSrc": "11796:18:13",
																"nodeType": "YulFunctionCall",
																"src": "11796:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "11788:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "11788:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "11868:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "11868:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "11881:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "11881:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "11892:1:13",
																				"nodeType": "YulLiteral",
																				"src": "11892:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "11877:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "11877:3:13"
																		},
																		"nativeSrc": "11877:17:13",
																		"nodeType": "YulFunctionCall",
																		"src": "11877:17:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "11824:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "11824:43:13"
																},
																"nativeSrc": "11824:71:13",
																"nodeType": "YulFunctionCall",
																"src": "11824:71:13"
															},
															"nativeSrc": "11824:71:13",
															"nodeType": "YulExpressionStatement",
															"src": "11824:71:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "11949:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "11949:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "11962:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "11962:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "11973:2:13",
																				"nodeType": "YulLiteral",
																				"src": "11973:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "11958:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "11958:3:13"
																		},
																		"nativeSrc": "11958:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "11958:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "11905:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "11905:43:13"
																},
																"nativeSrc": "11905:72:13",
																"nodeType": "YulFunctionCall",
																"src": "11905:72:13"
															},
															"nativeSrc": "11905:72:13",
															"nodeType": "YulExpressionStatement",
															"src": "11905:72:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "12031:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "12031:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "12044:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "12044:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "12055:2:13",
																				"nodeType": "YulLiteral",
																				"src": "12055:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "12040:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "12040:3:13"
																		},
																		"nativeSrc": "12040:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "12040:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "11987:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "11987:43:13"
																},
																"nativeSrc": "11987:72:13",
																"nodeType": "YulFunctionCall",
																"src": "11987:72:13"
															},
															"nativeSrc": "11987:72:13",
															"nodeType": "YulExpressionStatement",
															"src": "11987:72:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "11624:442:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "11734:9:13",
														"nodeType": "YulTypedName",
														"src": "11734:9:13",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "11746:6:13",
														"nodeType": "YulTypedName",
														"src": "11746:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "11754:6:13",
														"nodeType": "YulTypedName",
														"src": "11754:6:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "11762:6:13",
														"nodeType": "YulTypedName",
														"src": "11762:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "11773:4:13",
														"nodeType": "YulTypedName",
														"src": "11773:4:13",
														"type": ""
													}
												],
												"src": "11624:442:13"
											},
											{
												"body": {
													"nativeSrc": "12116:147:13",
													"nodeType": "YulBlock",
													"src": "12116:147:13",
													"statements": [
														{
															"nativeSrc": "12126:25:13",
															"nodeType": "YulAssignment",
															"src": "12126:25:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "12149:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "12149:1:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "12131:17:13",
																	"nodeType": "YulIdentifier",
																	"src": "12131:17:13"
																},
																"nativeSrc": "12131:20:13",
																"nodeType": "YulFunctionCall",
																"src": "12131:20:13"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "12126:1:13",
																	"nodeType": "YulIdentifier",
																	"src": "12126:1:13"
																}
															]
														},
														{
															"nativeSrc": "12160:25:13",
															"nodeType": "YulAssignment",
															"src": "12160:25:13",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "12183:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "12183:1:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "12165:17:13",
																	"nodeType": "YulIdentifier",
																	"src": "12165:17:13"
																},
																"nativeSrc": "12165:20:13",
																"nodeType": "YulFunctionCall",
																"src": "12165:20:13"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "12160:1:13",
																	"nodeType": "YulIdentifier",
																	"src": "12160:1:13"
																}
															]
														},
														{
															"nativeSrc": "12194:16:13",
															"nodeType": "YulAssignment",
															"src": "12194:16:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "12205:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "12205:1:13"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "12208:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "12208:1:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "12201:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "12201:3:13"
																},
																"nativeSrc": "12201:9:13",
																"nodeType": "YulFunctionCall",
																"src": "12201:9:13"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "12194:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "12194:3:13"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "12234:22:13",
																"nodeType": "YulBlock",
																"src": "12234:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "12236:16:13",
																				"nodeType": "YulIdentifier",
																				"src": "12236:16:13"
																			},
																			"nativeSrc": "12236:18:13",
																			"nodeType": "YulFunctionCall",
																			"src": "12236:18:13"
																		},
																		"nativeSrc": "12236:18:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "12236:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "12226:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "12226:1:13"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "12229:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "12229:3:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "12223:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "12223:2:13"
																},
																"nativeSrc": "12223:10:13",
																"nodeType": "YulFunctionCall",
																"src": "12223:10:13"
															},
															"nativeSrc": "12220:36:13",
															"nodeType": "YulIf",
															"src": "12220:36:13"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "12072:191:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "12103:1:13",
														"nodeType": "YulTypedName",
														"src": "12103:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "12106:1:13",
														"nodeType": "YulTypedName",
														"src": "12106:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "12112:3:13",
														"nodeType": "YulTypedName",
														"src": "12112:3:13",
														"type": ""
													}
												],
												"src": "12072:191:13"
											},
											{
												"body": {
													"nativeSrc": "12320:51:13",
													"nodeType": "YulBlock",
													"src": "12320:51:13",
													"statements": [
														{
															"nativeSrc": "12330:34:13",
															"nodeType": "YulAssignment",
															"src": "12330:34:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "12355:1:13",
																		"nodeType": "YulLiteral",
																		"src": "12355:1:13",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "value",
																		"nativeSrc": "12358:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "12358:5:13"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "12351:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "12351:3:13"
																},
																"nativeSrc": "12351:13:13",
																"nodeType": "YulFunctionCall",
																"src": "12351:13:13"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nativeSrc": "12330:8:13",
																	"nodeType": "YulIdentifier",
																	"src": "12330:8:13"
																}
															]
														}
													]
												},
												"name": "shift_right_1_unsigned",
												"nativeSrc": "12269:102:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "12301:5:13",
														"nodeType": "YulTypedName",
														"src": "12301:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nativeSrc": "12311:8:13",
														"nodeType": "YulTypedName",
														"src": "12311:8:13",
														"type": ""
													}
												],
												"src": "12269:102:13"
											},
											{
												"body": {
													"nativeSrc": "12450:775:13",
													"nodeType": "YulBlock",
													"src": "12450:775:13",
													"statements": [
														{
															"nativeSrc": "12460:15:13",
															"nodeType": "YulAssignment",
															"src": "12460:15:13",
															"value": {
																"name": "_power",
																"nativeSrc": "12469:6:13",
																"nodeType": "YulIdentifier",
																"src": "12469:6:13"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "12460:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "12460:5:13"
																}
															]
														},
														{
															"nativeSrc": "12484:14:13",
															"nodeType": "YulAssignment",
															"src": "12484:14:13",
															"value": {
																"name": "_base",
																"nativeSrc": "12493:5:13",
																"nodeType": "YulIdentifier",
																"src": "12493:5:13"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nativeSrc": "12484:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "12484:4:13"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "12542:677:13",
																"nodeType": "YulBlock",
																"src": "12542:677:13",
																"statements": [
																	{
																		"body": {
																			"nativeSrc": "12630:22:13",
																			"nodeType": "YulBlock",
																			"src": "12630:22:13",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nativeSrc": "12632:16:13",
																							"nodeType": "YulIdentifier",
																							"src": "12632:16:13"
																						},
																						"nativeSrc": "12632:18:13",
																						"nodeType": "YulFunctionCall",
																						"src": "12632:18:13"
																					},
																					"nativeSrc": "12632:18:13",
																					"nodeType": "YulExpressionStatement",
																					"src": "12632:18:13"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "12608:4:13",
																					"nodeType": "YulIdentifier",
																					"src": "12608:4:13"
																				},
																				{
																					"arguments": [
																						{
																							"name": "max",
																							"nativeSrc": "12618:3:13",
																							"nodeType": "YulIdentifier",
																							"src": "12618:3:13"
																						},
																						{
																							"name": "base",
																							"nativeSrc": "12623:4:13",
																							"nodeType": "YulIdentifier",
																							"src": "12623:4:13"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nativeSrc": "12614:3:13",
																						"nodeType": "YulIdentifier",
																						"src": "12614:3:13"
																					},
																					"nativeSrc": "12614:14:13",
																					"nodeType": "YulFunctionCall",
																					"src": "12614:14:13"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nativeSrc": "12605:2:13",
																				"nodeType": "YulIdentifier",
																				"src": "12605:2:13"
																			},
																			"nativeSrc": "12605:24:13",
																			"nodeType": "YulFunctionCall",
																			"src": "12605:24:13"
																		},
																		"nativeSrc": "12602:50:13",
																		"nodeType": "YulIf",
																		"src": "12602:50:13"
																	},
																	{
																		"body": {
																			"nativeSrc": "12697:419:13",
																			"nodeType": "YulBlock",
																			"src": "12697:419:13",
																			"statements": [
																				{
																					"nativeSrc": "13077:25:13",
																					"nodeType": "YulAssignment",
																					"src": "13077:25:13",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nativeSrc": "13090:5:13",
																								"nodeType": "YulIdentifier",
																								"src": "13090:5:13"
																							},
																							{
																								"name": "base",
																								"nativeSrc": "13097:4:13",
																								"nodeType": "YulIdentifier",
																								"src": "13097:4:13"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nativeSrc": "13086:3:13",
																							"nodeType": "YulIdentifier",
																							"src": "13086:3:13"
																						},
																						"nativeSrc": "13086:16:13",
																						"nodeType": "YulFunctionCall",
																						"src": "13086:16:13"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nativeSrc": "13077:5:13",
																							"nodeType": "YulIdentifier",
																							"src": "13077:5:13"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nativeSrc": "12672:8:13",
																					"nodeType": "YulIdentifier",
																					"src": "12672:8:13"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "12682:1:13",
																					"nodeType": "YulLiteral",
																					"src": "12682:1:13",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "12668:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "12668:3:13"
																			},
																			"nativeSrc": "12668:16:13",
																			"nodeType": "YulFunctionCall",
																			"src": "12668:16:13"
																		},
																		"nativeSrc": "12665:451:13",
																		"nodeType": "YulIf",
																		"src": "12665:451:13"
																	},
																	{
																		"nativeSrc": "13129:23:13",
																		"nodeType": "YulAssignment",
																		"src": "13129:23:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "13141:4:13",
																					"nodeType": "YulIdentifier",
																					"src": "13141:4:13"
																				},
																				{
																					"name": "base",
																					"nativeSrc": "13147:4:13",
																					"nodeType": "YulIdentifier",
																					"src": "13147:4:13"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nativeSrc": "13137:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "13137:3:13"
																			},
																			"nativeSrc": "13137:15:13",
																			"nodeType": "YulFunctionCall",
																			"src": "13137:15:13"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nativeSrc": "13129:4:13",
																				"nodeType": "YulIdentifier",
																				"src": "13129:4:13"
																			}
																		]
																	},
																	{
																		"nativeSrc": "13165:44:13",
																		"nodeType": "YulAssignment",
																		"src": "13165:44:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nativeSrc": "13200:8:13",
																					"nodeType": "YulIdentifier",
																					"src": "13200:8:13"
																				}
																			],
																			"functionName": {
																				"name": "shift_right_1_unsigned",
																				"nativeSrc": "13177:22:13",
																				"nodeType": "YulIdentifier",
																				"src": "13177:22:13"
																			},
																			"nativeSrc": "13177:32:13",
																			"nodeType": "YulFunctionCall",
																			"src": "13177:32:13"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nativeSrc": "13165:8:13",
																				"nodeType": "YulIdentifier",
																				"src": "13165:8:13"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "12518:8:13",
																		"nodeType": "YulIdentifier",
																		"src": "12518:8:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "12528:1:13",
																		"nodeType": "YulLiteral",
																		"src": "12528:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "12515:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "12515:2:13"
																},
																"nativeSrc": "12515:15:13",
																"nodeType": "YulFunctionCall",
																"src": "12515:15:13"
															},
															"nativeSrc": "12507:712:13",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "12531:2:13",
																"nodeType": "YulBlock",
																"src": "12531:2:13",
																"statements": []
															},
															"pre": {
																"nativeSrc": "12511:3:13",
																"nodeType": "YulBlock",
																"src": "12511:3:13",
																"statements": []
															},
															"src": "12507:712:13"
														}
													]
												},
												"name": "checked_exp_helper",
												"nativeSrc": "12377:848:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_power",
														"nativeSrc": "12405:6:13",
														"nodeType": "YulTypedName",
														"src": "12405:6:13",
														"type": ""
													},
													{
														"name": "_base",
														"nativeSrc": "12413:5:13",
														"nodeType": "YulTypedName",
														"src": "12413:5:13",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "12420:8:13",
														"nodeType": "YulTypedName",
														"src": "12420:8:13",
														"type": ""
													},
													{
														"name": "max",
														"nativeSrc": "12430:3:13",
														"nodeType": "YulTypedName",
														"src": "12430:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "12438:5:13",
														"nodeType": "YulTypedName",
														"src": "12438:5:13",
														"type": ""
													},
													{
														"name": "base",
														"nativeSrc": "12445:4:13",
														"nodeType": "YulTypedName",
														"src": "12445:4:13",
														"type": ""
													}
												],
												"src": "12377:848:13"
											},
											{
												"body": {
													"nativeSrc": "13291:1013:13",
													"nodeType": "YulBlock",
													"src": "13291:1013:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "13486:20:13",
																"nodeType": "YulBlock",
																"src": "13486:20:13",
																"statements": [
																	{
																		"nativeSrc": "13488:10:13",
																		"nodeType": "YulAssignment",
																		"src": "13488:10:13",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "13497:1:13",
																			"nodeType": "YulLiteral",
																			"src": "13497:1:13",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "13488:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "13488:5:13"
																			}
																		]
																	},
																	{
																		"nativeSrc": "13499:5:13",
																		"nodeType": "YulLeave",
																		"src": "13499:5:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "13476:8:13",
																		"nodeType": "YulIdentifier",
																		"src": "13476:8:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "13469:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "13469:6:13"
																},
																"nativeSrc": "13469:16:13",
																"nodeType": "YulFunctionCall",
																"src": "13469:16:13"
															},
															"nativeSrc": "13466:40:13",
															"nodeType": "YulIf",
															"src": "13466:40:13"
														},
														{
															"body": {
																"nativeSrc": "13531:20:13",
																"nodeType": "YulBlock",
																"src": "13531:20:13",
																"statements": [
																	{
																		"nativeSrc": "13533:10:13",
																		"nodeType": "YulAssignment",
																		"src": "13533:10:13",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "13542:1:13",
																			"nodeType": "YulLiteral",
																			"src": "13542:1:13",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "13533:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "13533:5:13"
																			}
																		]
																	},
																	{
																		"nativeSrc": "13544:5:13",
																		"nodeType": "YulLeave",
																		"src": "13544:5:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "13525:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "13525:4:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "13518:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "13518:6:13"
																},
																"nativeSrc": "13518:12:13",
																"nodeType": "YulFunctionCall",
																"src": "13518:12:13"
															},
															"nativeSrc": "13515:36:13",
															"nodeType": "YulIf",
															"src": "13515:36:13"
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "13661:20:13",
																		"nodeType": "YulBlock",
																		"src": "13661:20:13",
																		"statements": [
																			{
																				"nativeSrc": "13663:10:13",
																				"nodeType": "YulAssignment",
																				"src": "13663:10:13",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "13672:1:13",
																					"nodeType": "YulLiteral",
																					"src": "13672:1:13",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nativeSrc": "13663:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "13663:5:13"
																					}
																				]
																			},
																			{
																				"nativeSrc": "13674:5:13",
																				"nodeType": "YulLeave",
																				"src": "13674:5:13"
																			}
																		]
																	},
																	"nativeSrc": "13654:27:13",
																	"nodeType": "YulCase",
																	"src": "13654:27:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "13659:1:13",
																		"nodeType": "YulLiteral",
																		"src": "13659:1:13",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "13705:176:13",
																		"nodeType": "YulBlock",
																		"src": "13705:176:13",
																		"statements": [
																			{
																				"body": {
																					"nativeSrc": "13740:22:13",
																					"nodeType": "YulBlock",
																					"src": "13740:22:13",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nativeSrc": "13742:16:13",
																									"nodeType": "YulIdentifier",
																									"src": "13742:16:13"
																								},
																								"nativeSrc": "13742:18:13",
																								"nodeType": "YulFunctionCall",
																								"src": "13742:18:13"
																							},
																							"nativeSrc": "13742:18:13",
																							"nodeType": "YulExpressionStatement",
																							"src": "13742:18:13"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nativeSrc": "13725:8:13",
																							"nodeType": "YulIdentifier",
																							"src": "13725:8:13"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "13735:3:13",
																							"nodeType": "YulLiteral",
																							"src": "13735:3:13",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nativeSrc": "13722:2:13",
																						"nodeType": "YulIdentifier",
																						"src": "13722:2:13"
																					},
																					"nativeSrc": "13722:17:13",
																					"nodeType": "YulFunctionCall",
																					"src": "13722:17:13"
																				},
																				"nativeSrc": "13719:43:13",
																				"nodeType": "YulIf",
																				"src": "13719:43:13"
																			},
																			{
																				"nativeSrc": "13775:25:13",
																				"nodeType": "YulAssignment",
																				"src": "13775:25:13",
																				"value": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "13788:1:13",
																							"nodeType": "YulLiteral",
																							"src": "13788:1:13",
																							"type": "",
																							"value": "2"
																						},
																						{
																							"name": "exponent",
																							"nativeSrc": "13791:8:13",
																							"nodeType": "YulIdentifier",
																							"src": "13791:8:13"
																						}
																					],
																					"functionName": {
																						"name": "exp",
																						"nativeSrc": "13784:3:13",
																						"nodeType": "YulIdentifier",
																						"src": "13784:3:13"
																					},
																					"nativeSrc": "13784:16:13",
																					"nodeType": "YulFunctionCall",
																					"src": "13784:16:13"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nativeSrc": "13775:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "13775:5:13"
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "13831:22:13",
																					"nodeType": "YulBlock",
																					"src": "13831:22:13",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nativeSrc": "13833:16:13",
																									"nodeType": "YulIdentifier",
																									"src": "13833:16:13"
																								},
																								"nativeSrc": "13833:18:13",
																								"nodeType": "YulFunctionCall",
																								"src": "13833:18:13"
																							},
																							"nativeSrc": "13833:18:13",
																							"nodeType": "YulExpressionStatement",
																							"src": "13833:18:13"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "power",
																							"nativeSrc": "13819:5:13",
																							"nodeType": "YulIdentifier",
																							"src": "13819:5:13"
																						},
																						{
																							"name": "max",
																							"nativeSrc": "13826:3:13",
																							"nodeType": "YulIdentifier",
																							"src": "13826:3:13"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nativeSrc": "13816:2:13",
																						"nodeType": "YulIdentifier",
																						"src": "13816:2:13"
																					},
																					"nativeSrc": "13816:14:13",
																					"nodeType": "YulFunctionCall",
																					"src": "13816:14:13"
																				},
																				"nativeSrc": "13813:40:13",
																				"nodeType": "YulIf",
																				"src": "13813:40:13"
																			},
																			{
																				"nativeSrc": "13866:5:13",
																				"nodeType": "YulLeave",
																				"src": "13866:5:13"
																			}
																		]
																	},
																	"nativeSrc": "13690:191:13",
																	"nodeType": "YulCase",
																	"src": "13690:191:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "13695:1:13",
																		"nodeType": "YulLiteral",
																		"src": "13695:1:13",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nativeSrc": "13611:4:13",
																"nodeType": "YulIdentifier",
																"src": "13611:4:13"
															},
															"nativeSrc": "13604:277:13",
															"nodeType": "YulSwitch",
															"src": "13604:277:13"
														},
														{
															"body": {
																"nativeSrc": "14013:123:13",
																"nodeType": "YulBlock",
																"src": "14013:123:13",
																"statements": [
																	{
																		"nativeSrc": "14027:28:13",
																		"nodeType": "YulAssignment",
																		"src": "14027:28:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "14040:4:13",
																					"nodeType": "YulIdentifier",
																					"src": "14040:4:13"
																				},
																				{
																					"name": "exponent",
																					"nativeSrc": "14046:8:13",
																					"nodeType": "YulIdentifier",
																					"src": "14046:8:13"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nativeSrc": "14036:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "14036:3:13"
																			},
																			"nativeSrc": "14036:19:13",
																			"nodeType": "YulFunctionCall",
																			"src": "14036:19:13"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "14027:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "14027:5:13"
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "14086:22:13",
																			"nodeType": "YulBlock",
																			"src": "14086:22:13",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nativeSrc": "14088:16:13",
																							"nodeType": "YulIdentifier",
																							"src": "14088:16:13"
																						},
																						"nativeSrc": "14088:18:13",
																						"nodeType": "YulFunctionCall",
																						"src": "14088:18:13"
																					},
																					"nativeSrc": "14088:18:13",
																					"nodeType": "YulExpressionStatement",
																					"src": "14088:18:13"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "power",
																					"nativeSrc": "14074:5:13",
																					"nodeType": "YulIdentifier",
																					"src": "14074:5:13"
																				},
																				{
																					"name": "max",
																					"nativeSrc": "14081:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "14081:3:13"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nativeSrc": "14071:2:13",
																				"nodeType": "YulIdentifier",
																				"src": "14071:2:13"
																			},
																			"nativeSrc": "14071:14:13",
																			"nodeType": "YulFunctionCall",
																			"src": "14071:14:13"
																		},
																		"nativeSrc": "14068:40:13",
																		"nodeType": "YulIf",
																		"src": "14068:40:13"
																	},
																	{
																		"nativeSrc": "14121:5:13",
																		"nodeType": "YulLeave",
																		"src": "14121:5:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nativeSrc": "13916:4:13",
																						"nodeType": "YulIdentifier",
																						"src": "13916:4:13"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "13922:2:13",
																						"nodeType": "YulLiteral",
																						"src": "13922:2:13",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "13913:2:13",
																					"nodeType": "YulIdentifier",
																					"src": "13913:2:13"
																				},
																				"nativeSrc": "13913:12:13",
																				"nodeType": "YulFunctionCall",
																				"src": "13913:12:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nativeSrc": "13930:8:13",
																						"nodeType": "YulIdentifier",
																						"src": "13930:8:13"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "13940:2:13",
																						"nodeType": "YulLiteral",
																						"src": "13940:2:13",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "13927:2:13",
																					"nodeType": "YulIdentifier",
																					"src": "13927:2:13"
																				},
																				"nativeSrc": "13927:16:13",
																				"nodeType": "YulFunctionCall",
																				"src": "13927:16:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "13909:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "13909:3:13"
																		},
																		"nativeSrc": "13909:35:13",
																		"nodeType": "YulFunctionCall",
																		"src": "13909:35:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nativeSrc": "13965:4:13",
																						"nodeType": "YulIdentifier",
																						"src": "13965:4:13"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "13971:3:13",
																						"nodeType": "YulLiteral",
																						"src": "13971:3:13",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "13962:2:13",
																					"nodeType": "YulIdentifier",
																					"src": "13962:2:13"
																				},
																				"nativeSrc": "13962:13:13",
																				"nodeType": "YulFunctionCall",
																				"src": "13962:13:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nativeSrc": "13980:8:13",
																						"nodeType": "YulIdentifier",
																						"src": "13980:8:13"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "13990:2:13",
																						"nodeType": "YulLiteral",
																						"src": "13990:2:13",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "13977:2:13",
																					"nodeType": "YulIdentifier",
																					"src": "13977:2:13"
																				},
																				"nativeSrc": "13977:16:13",
																				"nodeType": "YulFunctionCall",
																				"src": "13977:16:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "13958:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "13958:3:13"
																		},
																		"nativeSrc": "13958:36:13",
																		"nodeType": "YulFunctionCall",
																		"src": "13958:36:13"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "13893:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "13893:2:13"
																},
																"nativeSrc": "13893:111:13",
																"nodeType": "YulFunctionCall",
																"src": "13893:111:13"
															},
															"nativeSrc": "13890:246:13",
															"nodeType": "YulIf",
															"src": "13890:246:13"
														},
														{
															"nativeSrc": "14146:57:13",
															"nodeType": "YulAssignment",
															"src": "14146:57:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "14180:1:13",
																		"nodeType": "YulLiteral",
																		"src": "14180:1:13",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "base",
																		"nativeSrc": "14183:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "14183:4:13"
																	},
																	{
																		"name": "exponent",
																		"nativeSrc": "14189:8:13",
																		"nodeType": "YulIdentifier",
																		"src": "14189:8:13"
																	},
																	{
																		"name": "max",
																		"nativeSrc": "14199:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "14199:3:13"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nativeSrc": "14161:18:13",
																	"nodeType": "YulIdentifier",
																	"src": "14161:18:13"
																},
																"nativeSrc": "14161:42:13",
																"nodeType": "YulFunctionCall",
																"src": "14161:42:13"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "14146:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "14146:5:13"
																},
																{
																	"name": "base",
																	"nativeSrc": "14153:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "14153:4:13"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "14242:22:13",
																"nodeType": "YulBlock",
																"src": "14242:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "14244:16:13",
																				"nodeType": "YulIdentifier",
																				"src": "14244:16:13"
																			},
																			"nativeSrc": "14244:18:13",
																			"nodeType": "YulFunctionCall",
																			"src": "14244:18:13"
																		},
																		"nativeSrc": "14244:18:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "14244:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power",
																		"nativeSrc": "14219:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "14219:5:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "max",
																				"nativeSrc": "14230:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "14230:3:13"
																			},
																			{
																				"name": "base",
																				"nativeSrc": "14235:4:13",
																				"nodeType": "YulIdentifier",
																				"src": "14235:4:13"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "14226:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "14226:3:13"
																		},
																		"nativeSrc": "14226:14:13",
																		"nodeType": "YulFunctionCall",
																		"src": "14226:14:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "14216:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "14216:2:13"
																},
																"nativeSrc": "14216:25:13",
																"nodeType": "YulFunctionCall",
																"src": "14216:25:13"
															},
															"nativeSrc": "14213:51:13",
															"nodeType": "YulIf",
															"src": "14213:51:13"
														},
														{
															"nativeSrc": "14273:25:13",
															"nodeType": "YulAssignment",
															"src": "14273:25:13",
															"value": {
																"arguments": [
																	{
																		"name": "power",
																		"nativeSrc": "14286:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "14286:5:13"
																	},
																	{
																		"name": "base",
																		"nativeSrc": "14293:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "14293:4:13"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "14282:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "14282:3:13"
																},
																"nativeSrc": "14282:16:13",
																"nodeType": "YulFunctionCall",
																"src": "14282:16:13"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "14273:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "14273:5:13"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nativeSrc": "13231:1073:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nativeSrc": "13261:4:13",
														"nodeType": "YulTypedName",
														"src": "13261:4:13",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "13267:8:13",
														"nodeType": "YulTypedName",
														"src": "13267:8:13",
														"type": ""
													},
													{
														"name": "max",
														"nativeSrc": "13277:3:13",
														"nodeType": "YulTypedName",
														"src": "13277:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "13285:5:13",
														"nodeType": "YulTypedName",
														"src": "13285:5:13",
														"type": ""
													}
												],
												"src": "13231:1073:13"
											},
											{
												"body": {
													"nativeSrc": "14374:217:13",
													"nodeType": "YulBlock",
													"src": "14374:217:13",
													"statements": [
														{
															"nativeSrc": "14384:31:13",
															"nodeType": "YulAssignment",
															"src": "14384:31:13",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "14410:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "14410:4:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "14392:17:13",
																	"nodeType": "YulIdentifier",
																	"src": "14392:17:13"
																},
																"nativeSrc": "14392:23:13",
																"nodeType": "YulFunctionCall",
																"src": "14392:23:13"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nativeSrc": "14384:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "14384:4:13"
																}
															]
														},
														{
															"nativeSrc": "14424:37:13",
															"nodeType": "YulAssignment",
															"src": "14424:37:13",
															"value": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "14452:8:13",
																		"nodeType": "YulIdentifier",
																		"src": "14452:8:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nativeSrc": "14436:15:13",
																	"nodeType": "YulIdentifier",
																	"src": "14436:15:13"
																},
																"nativeSrc": "14436:25:13",
																"nodeType": "YulFunctionCall",
																"src": "14436:25:13"
															},
															"variableNames": [
																{
																	"name": "exponent",
																	"nativeSrc": "14424:8:13",
																	"nodeType": "YulIdentifier",
																	"src": "14424:8:13"
																}
															]
														},
														{
															"nativeSrc": "14471:113:13",
															"nodeType": "YulAssignment",
															"src": "14471:113:13",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "14501:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "14501:4:13"
																	},
																	{
																		"name": "exponent",
																		"nativeSrc": "14507:8:13",
																		"nodeType": "YulIdentifier",
																		"src": "14507:8:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "14517:66:13",
																		"nodeType": "YulLiteral",
																		"src": "14517:66:13",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nativeSrc": "14480:20:13",
																	"nodeType": "YulIdentifier",
																	"src": "14480:20:13"
																},
																"nativeSrc": "14480:104:13",
																"nodeType": "YulFunctionCall",
																"src": "14480:104:13"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "14471:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "14471:5:13"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint8",
												"nativeSrc": "14310:281:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nativeSrc": "14349:4:13",
														"nodeType": "YulTypedName",
														"src": "14349:4:13",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "14355:8:13",
														"nodeType": "YulTypedName",
														"src": "14355:8:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "14368:5:13",
														"nodeType": "YulTypedName",
														"src": "14368:5:13",
														"type": ""
													}
												],
												"src": "14310:281:13"
											},
											{
												"body": {
													"nativeSrc": "14642:149:13",
													"nodeType": "YulBlock",
													"src": "14642:149:13",
													"statements": [
														{
															"nativeSrc": "14652:25:13",
															"nodeType": "YulAssignment",
															"src": "14652:25:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "14675:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "14675:1:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "14657:17:13",
																	"nodeType": "YulIdentifier",
																	"src": "14657:17:13"
																},
																"nativeSrc": "14657:20:13",
																"nodeType": "YulFunctionCall",
																"src": "14657:20:13"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "14652:1:13",
																	"nodeType": "YulIdentifier",
																	"src": "14652:1:13"
																}
															]
														},
														{
															"nativeSrc": "14686:25:13",
															"nodeType": "YulAssignment",
															"src": "14686:25:13",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "14709:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "14709:1:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "14691:17:13",
																	"nodeType": "YulIdentifier",
																	"src": "14691:17:13"
																},
																"nativeSrc": "14691:20:13",
																"nodeType": "YulFunctionCall",
																"src": "14691:20:13"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "14686:1:13",
																	"nodeType": "YulIdentifier",
																	"src": "14686:1:13"
																}
															]
														},
														{
															"nativeSrc": "14720:17:13",
															"nodeType": "YulAssignment",
															"src": "14720:17:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "14732:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "14732:1:13"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "14735:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "14735:1:13"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nativeSrc": "14728:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "14728:3:13"
																},
																"nativeSrc": "14728:9:13",
																"nodeType": "YulFunctionCall",
																"src": "14728:9:13"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nativeSrc": "14720:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "14720:4:13"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "14762:22:13",
																"nodeType": "YulBlock",
																"src": "14762:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "14764:16:13",
																				"nodeType": "YulIdentifier",
																				"src": "14764:16:13"
																			},
																			"nativeSrc": "14764:18:13",
																			"nodeType": "YulFunctionCall",
																			"src": "14764:18:13"
																		},
																		"nativeSrc": "14764:18:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "14764:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nativeSrc": "14753:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "14753:4:13"
																	},
																	{
																		"name": "x",
																		"nativeSrc": "14759:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "14759:1:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "14750:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "14750:2:13"
																},
																"nativeSrc": "14750:11:13",
																"nodeType": "YulFunctionCall",
																"src": "14750:11:13"
															},
															"nativeSrc": "14747:37:13",
															"nodeType": "YulIf",
															"src": "14747:37:13"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nativeSrc": "14597:194:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "14628:1:13",
														"nodeType": "YulTypedName",
														"src": "14628:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "14631:1:13",
														"nodeType": "YulTypedName",
														"src": "14631:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nativeSrc": "14637:4:13",
														"nodeType": "YulTypedName",
														"src": "14637:4:13",
														"type": ""
													}
												],
												"src": "14597:194:13"
											},
											{
												"body": {
													"nativeSrc": "14923:206:13",
													"nodeType": "YulBlock",
													"src": "14923:206:13",
													"statements": [
														{
															"nativeSrc": "14933:26:13",
															"nodeType": "YulAssignment",
															"src": "14933:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "14945:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "14945:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "14956:2:13",
																		"nodeType": "YulLiteral",
																		"src": "14956:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "14941:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "14941:3:13"
																},
																"nativeSrc": "14941:18:13",
																"nodeType": "YulFunctionCall",
																"src": "14941:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "14933:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "14933:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "15013:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "15013:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "15026:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "15026:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "15037:1:13",
																				"nodeType": "YulLiteral",
																				"src": "15037:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "15022:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "15022:3:13"
																		},
																		"nativeSrc": "15022:17:13",
																		"nodeType": "YulFunctionCall",
																		"src": "15022:17:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "14969:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "14969:43:13"
																},
																"nativeSrc": "14969:71:13",
																"nodeType": "YulFunctionCall",
																"src": "14969:71:13"
															},
															"nativeSrc": "14969:71:13",
															"nodeType": "YulExpressionStatement",
															"src": "14969:71:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "15094:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "15094:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "15107:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "15107:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "15118:2:13",
																				"nodeType": "YulLiteral",
																				"src": "15118:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "15103:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "15103:3:13"
																		},
																		"nativeSrc": "15103:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "15103:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "15050:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "15050:43:13"
																},
																"nativeSrc": "15050:72:13",
																"nodeType": "YulFunctionCall",
																"src": "15050:72:13"
															},
															"nativeSrc": "15050:72:13",
															"nodeType": "YulExpressionStatement",
															"src": "15050:72:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "14797:332:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "14887:9:13",
														"nodeType": "YulTypedName",
														"src": "14887:9:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "14899:6:13",
														"nodeType": "YulTypedName",
														"src": "14899:6:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "14907:6:13",
														"nodeType": "YulTypedName",
														"src": "14907:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "14918:4:13",
														"nodeType": "YulTypedName",
														"src": "14918:4:13",
														"type": ""
													}
												],
												"src": "14797:332:13"
											},
											{
												"body": {
													"nativeSrc": "15163:152:13",
													"nodeType": "YulBlock",
													"src": "15163:152:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "15180:1:13",
																		"nodeType": "YulLiteral",
																		"src": "15180:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "15183:77:13",
																		"nodeType": "YulLiteral",
																		"src": "15183:77:13",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "15173:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "15173:6:13"
																},
																"nativeSrc": "15173:88:13",
																"nodeType": "YulFunctionCall",
																"src": "15173:88:13"
															},
															"nativeSrc": "15173:88:13",
															"nodeType": "YulExpressionStatement",
															"src": "15173:88:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "15277:1:13",
																		"nodeType": "YulLiteral",
																		"src": "15277:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "15280:4:13",
																		"nodeType": "YulLiteral",
																		"src": "15280:4:13",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "15270:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "15270:6:13"
																},
																"nativeSrc": "15270:15:13",
																"nodeType": "YulFunctionCall",
																"src": "15270:15:13"
															},
															"nativeSrc": "15270:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "15270:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "15301:1:13",
																		"nodeType": "YulLiteral",
																		"src": "15301:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "15304:4:13",
																		"nodeType": "YulLiteral",
																		"src": "15304:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "15294:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "15294:6:13"
																},
																"nativeSrc": "15294:15:13",
																"nodeType": "YulFunctionCall",
																"src": "15294:15:13"
															},
															"nativeSrc": "15294:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "15294:15:13"
														}
													]
												},
												"name": "panic_error_0x12",
												"nativeSrc": "15135:180:13",
												"nodeType": "YulFunctionDefinition",
												"src": "15135:180:13"
											},
											{
												"body": {
													"nativeSrc": "15447:206:13",
													"nodeType": "YulBlock",
													"src": "15447:206:13",
													"statements": [
														{
															"nativeSrc": "15457:26:13",
															"nodeType": "YulAssignment",
															"src": "15457:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "15469:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "15469:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "15480:2:13",
																		"nodeType": "YulLiteral",
																		"src": "15480:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "15465:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "15465:3:13"
																},
																"nativeSrc": "15465:18:13",
																"nodeType": "YulFunctionCall",
																"src": "15465:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "15457:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "15457:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "15537:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "15537:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "15550:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "15550:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "15561:1:13",
																				"nodeType": "YulLiteral",
																				"src": "15561:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "15546:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "15546:3:13"
																		},
																		"nativeSrc": "15546:17:13",
																		"nodeType": "YulFunctionCall",
																		"src": "15546:17:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "15493:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "15493:43:13"
																},
																"nativeSrc": "15493:71:13",
																"nodeType": "YulFunctionCall",
																"src": "15493:71:13"
															},
															"nativeSrc": "15493:71:13",
															"nodeType": "YulExpressionStatement",
															"src": "15493:71:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "15618:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "15618:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "15631:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "15631:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "15642:2:13",
																				"nodeType": "YulLiteral",
																				"src": "15642:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "15627:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "15627:3:13"
																		},
																		"nativeSrc": "15627:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "15627:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "15574:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "15574:43:13"
																},
																"nativeSrc": "15574:72:13",
																"nodeType": "YulFunctionCall",
																"src": "15574:72:13"
															},
															"nativeSrc": "15574:72:13",
															"nodeType": "YulExpressionStatement",
															"src": "15574:72:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nativeSrc": "15321:332:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "15411:9:13",
														"nodeType": "YulTypedName",
														"src": "15411:9:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "15423:6:13",
														"nodeType": "YulTypedName",
														"src": "15423:6:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "15431:6:13",
														"nodeType": "YulTypedName",
														"src": "15431:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "15442:4:13",
														"nodeType": "YulTypedName",
														"src": "15442:4:13",
														"type": ""
													}
												],
												"src": "15321:332:13"
											},
											{
												"body": {
													"nativeSrc": "15687:152:13",
													"nodeType": "YulBlock",
													"src": "15687:152:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "15704:1:13",
																		"nodeType": "YulLiteral",
																		"src": "15704:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "15707:77:13",
																		"nodeType": "YulLiteral",
																		"src": "15707:77:13",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "15697:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "15697:6:13"
																},
																"nativeSrc": "15697:88:13",
																"nodeType": "YulFunctionCall",
																"src": "15697:88:13"
															},
															"nativeSrc": "15697:88:13",
															"nodeType": "YulExpressionStatement",
															"src": "15697:88:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "15801:1:13",
																		"nodeType": "YulLiteral",
																		"src": "15801:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "15804:4:13",
																		"nodeType": "YulLiteral",
																		"src": "15804:4:13",
																		"type": "",
																		"value": "0x21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "15794:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "15794:6:13"
																},
																"nativeSrc": "15794:15:13",
																"nodeType": "YulFunctionCall",
																"src": "15794:15:13"
															},
															"nativeSrc": "15794:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "15794:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "15825:1:13",
																		"nodeType": "YulLiteral",
																		"src": "15825:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "15828:4:13",
																		"nodeType": "YulLiteral",
																		"src": "15828:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "15818:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "15818:6:13"
																},
																"nativeSrc": "15818:15:13",
																"nodeType": "YulFunctionCall",
																"src": "15818:15:13"
															},
															"nativeSrc": "15818:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "15818:15:13"
														}
													]
												},
												"name": "panic_error_0x21",
												"nativeSrc": "15659:180:13",
												"nodeType": "YulFunctionDefinition",
												"src": "15659:180:13"
											},
											{
												"body": {
													"nativeSrc": "15877:138:13",
													"nodeType": "YulBlock",
													"src": "15877:138:13",
													"statements": [
														{
															"nativeSrc": "15887:23:13",
															"nodeType": "YulAssignment",
															"src": "15887:23:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "15908:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "15908:1:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nativeSrc": "15892:15:13",
																	"nodeType": "YulIdentifier",
																	"src": "15892:15:13"
																},
																"nativeSrc": "15892:18:13",
																"nodeType": "YulFunctionCall",
																"src": "15892:18:13"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "15887:1:13",
																	"nodeType": "YulIdentifier",
																	"src": "15887:1:13"
																}
															]
														},
														{
															"nativeSrc": "15919:23:13",
															"nodeType": "YulAssignment",
															"src": "15919:23:13",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "15940:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "15940:1:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nativeSrc": "15924:15:13",
																	"nodeType": "YulIdentifier",
																	"src": "15924:15:13"
																},
																"nativeSrc": "15924:18:13",
																"nodeType": "YulFunctionCall",
																"src": "15924:18:13"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "15919:1:13",
																	"nodeType": "YulIdentifier",
																	"src": "15919:1:13"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "15964:22:13",
																"nodeType": "YulBlock",
																"src": "15964:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nativeSrc": "15966:16:13",
																				"nodeType": "YulIdentifier",
																				"src": "15966:16:13"
																			},
																			"nativeSrc": "15966:18:13",
																			"nodeType": "YulFunctionCall",
																			"src": "15966:18:13"
																		},
																		"nativeSrc": "15966:18:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "15966:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "15961:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "15961:1:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "15954:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "15954:6:13"
																},
																"nativeSrc": "15954:9:13",
																"nodeType": "YulFunctionCall",
																"src": "15954:9:13"
															},
															"nativeSrc": "15951:35:13",
															"nodeType": "YulIf",
															"src": "15951:35:13"
														},
														{
															"nativeSrc": "15995:14:13",
															"nodeType": "YulAssignment",
															"src": "15995:14:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "16004:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "16004:1:13"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "16007:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "16007:1:13"
																	}
																],
																"functionName": {
																	"name": "mod",
																	"nativeSrc": "16000:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "16000:3:13"
																},
																"nativeSrc": "16000:9:13",
																"nodeType": "YulFunctionCall",
																"src": "16000:9:13"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nativeSrc": "15995:1:13",
																	"nodeType": "YulIdentifier",
																	"src": "15995:1:13"
																}
															]
														}
													]
												},
												"name": "mod_t_uint8",
												"nativeSrc": "15845:170:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "15866:1:13",
														"nodeType": "YulTypedName",
														"src": "15866:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "15869:1:13",
														"nodeType": "YulTypedName",
														"src": "15869:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nativeSrc": "15875:1:13",
														"nodeType": "YulTypedName",
														"src": "15875:1:13",
														"type": ""
													}
												],
												"src": "15845:170:13"
											},
											{
												"body": {
													"nativeSrc": "16061:76:13",
													"nodeType": "YulBlock",
													"src": "16061:76:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "16115:16:13",
																"nodeType": "YulBlock",
																"src": "16115:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "16124:1:13",
																					"nodeType": "YulLiteral",
																					"src": "16124:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "16127:1:13",
																					"nodeType": "YulLiteral",
																					"src": "16127:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "16117:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "16117:6:13"
																			},
																			"nativeSrc": "16117:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "16117:12:13"
																		},
																		"nativeSrc": "16117:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "16117:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "16084:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "16084:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "16106:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "16106:5:13"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nativeSrc": "16091:14:13",
																					"nodeType": "YulIdentifier",
																					"src": "16091:14:13"
																				},
																				"nativeSrc": "16091:21:13",
																				"nodeType": "YulFunctionCall",
																				"src": "16091:21:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "16081:2:13",
																			"nodeType": "YulIdentifier",
																			"src": "16081:2:13"
																		},
																		"nativeSrc": "16081:32:13",
																		"nodeType": "YulFunctionCall",
																		"src": "16081:32:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "16074:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "16074:6:13"
																},
																"nativeSrc": "16074:40:13",
																"nodeType": "YulFunctionCall",
																"src": "16074:40:13"
															},
															"nativeSrc": "16071:60:13",
															"nodeType": "YulIf",
															"src": "16071:60:13"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nativeSrc": "16021:116:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "16054:5:13",
														"nodeType": "YulTypedName",
														"src": "16054:5:13",
														"type": ""
													}
												],
												"src": "16021:116:13"
											},
											{
												"body": {
													"nativeSrc": "16203:77:13",
													"nodeType": "YulBlock",
													"src": "16203:77:13",
													"statements": [
														{
															"nativeSrc": "16213:22:13",
															"nodeType": "YulAssignment",
															"src": "16213:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "16228:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "16228:6:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "16222:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "16222:5:13"
																},
																"nativeSrc": "16222:13:13",
																"nodeType": "YulFunctionCall",
																"src": "16222:13:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "16213:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "16213:5:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "16268:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "16268:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nativeSrc": "16244:23:13",
																	"nodeType": "YulIdentifier",
																	"src": "16244:23:13"
																},
																"nativeSrc": "16244:30:13",
																"nodeType": "YulFunctionCall",
																"src": "16244:30:13"
															},
															"nativeSrc": "16244:30:13",
															"nodeType": "YulExpressionStatement",
															"src": "16244:30:13"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nativeSrc": "16143:137:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "16181:6:13",
														"nodeType": "YulTypedName",
														"src": "16181:6:13",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "16189:3:13",
														"nodeType": "YulTypedName",
														"src": "16189:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "16197:5:13",
														"nodeType": "YulTypedName",
														"src": "16197:5:13",
														"type": ""
													}
												],
												"src": "16143:137:13"
											},
											{
												"body": {
													"nativeSrc": "16360:271:13",
													"nodeType": "YulBlock",
													"src": "16360:271:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "16406:83:13",
																"nodeType": "YulBlock",
																"src": "16406:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "16408:77:13",
																				"nodeType": "YulIdentifier",
																				"src": "16408:77:13"
																			},
																			"nativeSrc": "16408:79:13",
																			"nodeType": "YulFunctionCall",
																			"src": "16408:79:13"
																		},
																		"nativeSrc": "16408:79:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "16408:79:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "16381:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "16381:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "16390:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "16390:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "16377:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "16377:3:13"
																		},
																		"nativeSrc": "16377:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "16377:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "16402:2:13",
																		"nodeType": "YulLiteral",
																		"src": "16402:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "16373:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "16373:3:13"
																},
																"nativeSrc": "16373:32:13",
																"nodeType": "YulFunctionCall",
																"src": "16373:32:13"
															},
															"nativeSrc": "16370:119:13",
															"nodeType": "YulIf",
															"src": "16370:119:13"
														},
														{
															"nativeSrc": "16499:125:13",
															"nodeType": "YulBlock",
															"src": "16499:125:13",
															"statements": [
																{
																	"nativeSrc": "16514:15:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "16514:15:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "16528:1:13",
																		"nodeType": "YulLiteral",
																		"src": "16528:1:13",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "16518:6:13",
																			"nodeType": "YulTypedName",
																			"src": "16518:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "16543:71:13",
																	"nodeType": "YulAssignment",
																	"src": "16543:71:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "16586:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "16586:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "16597:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "16597:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "16582:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "16582:3:13"
																				},
																				"nativeSrc": "16582:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "16582:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "16606:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "16606:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool_fromMemory",
																			"nativeSrc": "16553:28:13",
																			"nodeType": "YulIdentifier",
																			"src": "16553:28:13"
																		},
																		"nativeSrc": "16553:61:13",
																		"nodeType": "YulFunctionCall",
																		"src": "16553:61:13"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "16543:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "16543:6:13"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nativeSrc": "16286:345:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "16330:9:13",
														"nodeType": "YulTypedName",
														"src": "16330:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "16341:7:13",
														"nodeType": "YulTypedName",
														"src": "16341:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "16353:6:13",
														"nodeType": "YulTypedName",
														"src": "16353:6:13",
														"type": ""
													}
												],
												"src": "16286:345:13"
											},
											{
												"body": {
													"nativeSrc": "16695:40:13",
													"nodeType": "YulBlock",
													"src": "16695:40:13",
													"statements": [
														{
															"nativeSrc": "16706:22:13",
															"nodeType": "YulAssignment",
															"src": "16706:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "16722:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "16722:5:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "16716:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "16716:5:13"
																},
																"nativeSrc": "16716:12:13",
																"nodeType": "YulFunctionCall",
																"src": "16716:12:13"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "16706:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "16706:6:13"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nativeSrc": "16637:98:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "16678:5:13",
														"nodeType": "YulTypedName",
														"src": "16678:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "16688:6:13",
														"nodeType": "YulTypedName",
														"src": "16688:6:13",
														"type": ""
													}
												],
												"src": "16637:98:13"
											},
											{
												"body": {
													"nativeSrc": "16854:34:13",
													"nodeType": "YulBlock",
													"src": "16854:34:13",
													"statements": [
														{
															"nativeSrc": "16864:18:13",
															"nodeType": "YulAssignment",
															"src": "16864:18:13",
															"value": {
																"name": "pos",
																"nativeSrc": "16879:3:13",
																"nodeType": "YulIdentifier",
																"src": "16879:3:13"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "16864:11:13",
																	"nodeType": "YulIdentifier",
																	"src": "16864:11:13"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nativeSrc": "16741:147:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "16826:3:13",
														"nodeType": "YulTypedName",
														"src": "16826:3:13",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "16831:6:13",
														"nodeType": "YulTypedName",
														"src": "16831:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "16842:11:13",
														"nodeType": "YulTypedName",
														"src": "16842:11:13",
														"type": ""
													}
												],
												"src": "16741:147:13"
											},
											{
												"body": {
													"nativeSrc": "17002:278:13",
													"nodeType": "YulBlock",
													"src": "17002:278:13",
													"statements": [
														{
															"nativeSrc": "17012:52:13",
															"nodeType": "YulVariableDeclaration",
															"src": "17012:52:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "17058:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "17058:5:13"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nativeSrc": "17026:31:13",
																	"nodeType": "YulIdentifier",
																	"src": "17026:31:13"
																},
																"nativeSrc": "17026:38:13",
																"nodeType": "YulFunctionCall",
																"src": "17026:38:13"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "17016:6:13",
																	"nodeType": "YulTypedName",
																	"src": "17016:6:13",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "17073:95:13",
															"nodeType": "YulAssignment",
															"src": "17073:95:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "17156:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "17156:3:13"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "17161:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "17161:6:13"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nativeSrc": "17080:75:13",
																	"nodeType": "YulIdentifier",
																	"src": "17080:75:13"
																},
																"nativeSrc": "17080:88:13",
																"nodeType": "YulFunctionCall",
																"src": "17080:88:13"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "17073:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "17073:3:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "17216:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "17216:5:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "17223:4:13",
																				"nodeType": "YulLiteral",
																				"src": "17223:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "17212:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "17212:3:13"
																		},
																		"nativeSrc": "17212:16:13",
																		"nodeType": "YulFunctionCall",
																		"src": "17212:16:13"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "17230:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "17230:3:13"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "17235:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "17235:6:13"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nativeSrc": "17177:34:13",
																	"nodeType": "YulIdentifier",
																	"src": "17177:34:13"
																},
																"nativeSrc": "17177:65:13",
																"nodeType": "YulFunctionCall",
																"src": "17177:65:13"
															},
															"nativeSrc": "17177:65:13",
															"nodeType": "YulExpressionStatement",
															"src": "17177:65:13"
														},
														{
															"nativeSrc": "17251:23:13",
															"nodeType": "YulAssignment",
															"src": "17251:23:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "17262:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "17262:3:13"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "17267:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "17267:6:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "17258:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "17258:3:13"
																},
																"nativeSrc": "17258:16:13",
																"nodeType": "YulFunctionCall",
																"src": "17258:16:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "17251:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "17251:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nativeSrc": "16894:386:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "16983:5:13",
														"nodeType": "YulTypedName",
														"src": "16983:5:13",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "16990:3:13",
														"nodeType": "YulTypedName",
														"src": "16990:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "16998:3:13",
														"nodeType": "YulTypedName",
														"src": "16998:3:13",
														"type": ""
													}
												],
												"src": "16894:386:13"
											},
											{
												"body": {
													"nativeSrc": "17420:137:13",
													"nodeType": "YulBlock",
													"src": "17420:137:13",
													"statements": [
														{
															"nativeSrc": "17431:100:13",
															"nodeType": "YulAssignment",
															"src": "17431:100:13",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "17518:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "17518:6:13"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "17527:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "17527:3:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nativeSrc": "17438:79:13",
																	"nodeType": "YulIdentifier",
																	"src": "17438:79:13"
																},
																"nativeSrc": "17438:93:13",
																"nodeType": "YulFunctionCall",
																"src": "17438:93:13"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "17431:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "17431:3:13"
																}
															]
														},
														{
															"nativeSrc": "17541:10:13",
															"nodeType": "YulAssignment",
															"src": "17541:10:13",
															"value": {
																"name": "pos",
																"nativeSrc": "17548:3:13",
																"nodeType": "YulIdentifier",
																"src": "17548:3:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "17541:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "17541:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nativeSrc": "17286:271:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "17399:3:13",
														"nodeType": "YulTypedName",
														"src": "17399:3:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "17405:6:13",
														"nodeType": "YulTypedName",
														"src": "17405:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "17416:3:13",
														"nodeType": "YulTypedName",
														"src": "17416:3:13",
														"type": ""
													}
												],
												"src": "17286:271:13"
											}
										]
									},
									"contents": "{\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        mcopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_IERC20_$1047_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IERC20_$1047_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IERC20_$1047_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_IERC20_$1047__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IERC20_$1047_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256t_addresst_address(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint8(x, y) -> sum {\n        x := cleanup_t_uint8(x)\n        y := cleanup_t_uint8(y)\n        sum := add(x, y)\n\n        if gt(sum, 0xff) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_8bb8eaf1580515f96cb5013e54fb02bd0d2d1120f2636292a4ac84c518b1b5a3(memPtr) {\n\n        mstore(add(memPtr, 0), \"Sender is Not Vaults\")\n\n    }\n\n    function abi_encode_t_stringliteral_8bb8eaf1580515f96cb5013e54fb02bd0d2d1120f2636292a4ac84c518b1b5a3_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_8bb8eaf1580515f96cb5013e54fb02bd0d2d1120f2636292a4ac84c518b1b5a3(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8bb8eaf1580515f96cb5013e54fb02bd0d2d1120f2636292a4ac84c518b1b5a3__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8bb8eaf1580515f96cb5013e54fb02bd0d2d1120f2636292a4ac84c518b1b5a3_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3e76f273c719bb7d23db533a2dc9a822ae7d899fcd42eb8910272e24764e8296(memPtr) {\n\n        mstore(add(memPtr, 0), \"Amount must be greater than 0\")\n\n    }\n\n    function abi_encode_t_stringliteral_3e76f273c719bb7d23db533a2dc9a822ae7d899fcd42eb8910272e24764e8296_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3e76f273c719bb7d23db533a2dc9a822ae7d899fcd42eb8910272e24764e8296(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3e76f273c719bb7d23db533a2dc9a822ae7d899fcd42eb8910272e24764e8296__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3e76f273c719bb7d23db533a2dc9a822ae7d899fcd42eb8910272e24764e8296_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function shift_right_1_unsigned(value) -> newValue {\n        newValue :=\n\n        shr(1, value)\n\n    }\n\n    function checked_exp_helper(_power, _base, exponent, max) -> power, base {\n        power := _power\n        base  := _base\n        for { } gt(exponent, 1) {}\n        {\n            // overflow check for base * base\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1)\n            {\n                // No checks for power := mul(power, base) needed, because the check\n                // for base * base above is sufficient, since:\n                // |power| <= base (proof by induction) and thus:\n                // |power * base| <= base * base <= max <= |min| (for signed)\n                // (this is equally true for signed and unsigned exp)\n                power := mul(power, base)\n            }\n            base := mul(base, base)\n            exponent := shift_right_1_unsigned(exponent)\n        }\n    }\n\n    function checked_exp_unsigned(base, exponent, max) -> power {\n        // This function currently cannot be inlined because of the\n        // \"leave\" statements. We have to improve the optimizer.\n\n        // Note that 0**0 == 1\n        if iszero(exponent) { power := 1 leave }\n        if iszero(base) { power := 0 leave }\n\n        // Specializations for small bases\n        switch base\n        // 0 is handled above\n        case 1 { power := 1 leave }\n        case 2\n        {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := exp(2, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        if or(\n            and(lt(base, 11), lt(exponent, 78)),\n            and(lt(base, 307), lt(exponent, 32))\n        )\n        {\n            power := exp(base, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n\n        power, base := checked_exp_helper(1, base, exponent, max)\n\n        if gt(power, div(max, base)) { panic_error_0x11() }\n        power := mul(power, base)\n    }\n\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power {\n        base := cleanup_t_uint256(base)\n        exponent := cleanup_t_uint8(exponent)\n\n        power := checked_exp_unsigned(base, exponent, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function mod_t_uint8(x, y) -> r {\n        x := cleanup_t_uint8(x)\n        y := cleanup_t_uint8(y)\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n}\n",
									"id": 13,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"1070": [
									{
										"length": 32,
										"start": 1525
									},
									{
										"length": 32,
										"start": 2010
									},
									{
										"length": 32,
										"start": 4503
									}
								],
								"1072": [
									{
										"length": 32,
										"start": 1961
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b506004361061018c575f3560e01c8063866c99e2116100dc578063ba08765211610095578063ce96cb771161006f578063ce96cb7714610532578063d905777e14610562578063dd62ed3e14610592578063ef8b30f7146105c25761018c565b8063ba087652146104a2578063c63d75b6146104d2578063c6e6f592146105025761018c565b8063866c99e2146103a657806394bf804d146103c457806395d89b41146103f4578063a9059cbb14610412578063b3d7f6b914610442578063b460af94146104725761018c565b806323b872dd11610149578063402d267d11610123578063402d267d146102e65780634cdad506146103165780636e553f651461034657806370a08231146103765761018c565b806323b872dd1461027a578063313ce567146102aa57806338d52e0f146102c85761018c565b806301e1d1141461019057806306fdde03146101ae57806307a2d13a146101cc578063095ea7b3146101fc5780630a28a4771461022c57806318160ddd1461025c575b5f80fd5b6101986105f2565b6040516101a59190611a86565b60405180910390f35b6101b6610690565b6040516101c39190611b0f565b60405180910390f35b6101e660048036038101906101e19190611b5d565b610720565b6040516101f39190611a86565b60405180910390f35b61021660048036038101906102119190611be2565b610732565b6040516102239190611c3a565b60405180910390f35b61024660048036038101906102419190611b5d565b610754565b6040516102539190611a86565b60405180910390f35b610264610767565b6040516102719190611a86565b60405180910390f35b610294600480360381019061028f9190611c53565b610770565b6040516102a19190611c3a565b60405180910390f35b6102b261079e565b6040516102bf9190611cbe565b60405180910390f35b6102d06107d7565b6040516102dd9190611ce6565b60405180910390f35b61030060048036038101906102fb9190611cff565b6107fe565b60405161030d9190611a86565b60405180910390f35b610330600480360381019061032b9190611b5d565b610827565b60405161033d9190611a86565b60405180910390f35b610360600480360381019061035b9190611d2a565b610839565b60405161036d9190611a86565b60405180910390f35b610390600480360381019061038b9190611cff565b6109b6565b60405161039d9190611a86565b60405180910390f35b6103ae6109fb565b6040516103bb9190611dc3565b60405180910390f35b6103de60048036038101906103d99190611d2a565b610a20565b6040516103eb9190611a86565b60405180910390f35b6103fc610a53565b6040516104099190611b0f565b60405180910390f35b61042c60048036038101906104279190611be2565b610ae3565b6040516104399190611c3a565b60405180910390f35b61045c60048036038101906104579190611b5d565b610b05565b6040516104699190611a86565b60405180910390f35b61048c60048036038101906104879190611ddc565b610b18565b6040516104999190611a86565b60405180910390f35b6104bc60048036038101906104b79190611ddc565b610c1f565b6040516104c99190611a86565b60405180910390f35b6104ec60048036038101906104e79190611cff565b610ca1565b6040516104f99190611a86565b60405180910390f35b61051c60048036038101906105179190611b5d565b610cca565b6040516105299190611a86565b60405180910390f35b61054c60048036038101906105479190611cff565b610cdc565b6040516105599190611a86565b60405180910390f35b61057c60048036038101906105779190611cff565b610cf6565b6040516105899190611a86565b60405180910390f35b6105ac60048036038101906105a79190611e2c565b610d07565b6040516105b99190611a86565b60405180910390f35b6105dc60048036038101906105d79190611b5d565b610d89565b6040516105e99190611a86565b60405180910390f35b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161064c9190611ce6565b602060405180830381865afa158015610667573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061068b9190611e7e565b905090565b60606003805461069f90611ed6565b80601f01602080910402602001604051908101604052809291908181526020018280546106cb90611ed6565b80156107165780601f106106ed57610100808354040283529160200191610716565b820191905f5260205f20905b8154815290600101906020018083116106f957829003601f168201915b5050505050905090565b5f61072b825f610d9b565b9050919050565b5f8061073c610df3565b9050610749818585610dfa565b600191505092915050565b5f610760826001610e0c565b9050919050565b5f600254905090565b5f8061077a610df3565b9050610787858285610ec5565b610792858585610f57565b60019150509392505050565b5f6107a7611047565b7f00000000000000000000000000000000000000000000000000000000000000006107d29190611f33565b905090565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050919050565b5f610832825f610d9b565b9050919050565b5f3373ffffffffffffffffffffffffffffffffffffffff1660055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c090611fb1565b60405180910390fd5b6001600560146101000a81548160ff0219169083151502179055505f8311610926576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091d90612019565b60405180910390fd5b5f610930836107fe565b90508084111561097b578284826040517f79012fb200000000000000000000000000000000000000000000000000000000815260040161097293929190612037565b60405180910390fd5b5f61098585610d89565b9050610991848261104b565b5f600560146101000a81548160ff021916908315150217905550809250505092915050565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f6040517fa9a2322b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606060048054610a6290611ed6565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8e90611ed6565b8015610ad95780601f10610ab057610100808354040283529160200191610ad9565b820191905f5260205f20905b815481529060010190602001808311610abc57829003601f168201915b5050505050905090565b5f80610aed610df3565b9050610afa818585610f57565b600191505092915050565b5f610b11826001610d9b565b9050919050565b5f3373ffffffffffffffffffffffffffffffffffffffff1660055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ba8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9f90611fb1565b60405180910390fd5b5f610bb283610cdc565b905080851115610bfd578285826040517ffe9cceec000000000000000000000000000000000000000000000000000000008152600401610bf493929190612037565b60405180910390fd5b5f610c0786610754565b9050610c1384826110ca565b81925050509392505050565b5f80610c2a83610cf6565b905080851115610c75578285826040517fb94abeec000000000000000000000000000000000000000000000000000000008152600401610c6c93929190612037565b60405180910390fd5b5f610c7f86610827565b9050610c95610c8c610df3565b8686848a611149565b80925050509392505050565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050919050565b5f610cd5825f610e0c565b9050919050565b5f610cef610ce9836109b6565b5f610d9b565b9050919050565b5f610d00826109b6565b9050919050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f610d94825f610e0c565b9050919050565b5f610deb6001610da96105f2565b610db3919061206c565b610dbb611047565b600a610dc791906121ce565b610dcf610767565b610dd9919061206c565b8486611242909392919063ffffffff16565b905092915050565b5f33905090565b610e078383836001611297565b505050565b5f600560149054906101000a900460ff1615610e7857610e7183610e2e611047565b600a610e3a91906121ce565b610e42610767565b610e4c919061206c565b600186610e576105f2565b610e619190612218565b610e6b919061206c565b85611242565b9050610ebf565b610ebc83610e84611047565b600a610e9091906121ce565b610e98610767565b610ea2919061206c565b6001610eac6105f2565b610eb6919061206c565b85611242565b90505b92915050565b5f610ed08484610d07565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610f515781811015610f42578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610f3993929190612037565b60405180910390fd5b610f5084848484035f611297565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610fc7575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610fbe9190611ce6565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611037575f6040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161102e9190611ce6565b60405180910390fd5b611042838383611466565b505050565b5f90565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110bb575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016110b29190611ce6565b60405180910390fd5b6110c65f8383611466565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361113a575f6040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016111319190611ce6565b60405180910390fd5b611145825f83611466565b5050565b8273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461118857611187838683610ec5565b5b61119283826110ca565b6111bd7f0000000000000000000000000000000000000000000000000000000000000000858461167f565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db858560405161123392919061224b565b60405180910390a45050505050565b5f8061124f8686866116fe565b905061125a836117fd565b801561127657505f848061127157611270612272565b5b868809115b1561128b57600181611288919061206c565b90505b80915050949350505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611307575f6040517fe602df050000000000000000000000000000000000000000000000000000000081526004016112fe9190611ce6565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611377575f6040517f94280d6200000000000000000000000000000000000000000000000000000000815260040161136e9190611ce6565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015611460578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516114579190611a86565b60405180910390a35b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036114b6578060025f8282546114aa919061206c565b92505081905550611584565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490508181101561153f578381836040517fe450d38c00000000000000000000000000000000000000000000000000000000815260040161153693929190612037565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115cb578060025f8282540392505081905550611615565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516116729190611a86565b60405180910390a3505050565b6116f9838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016116b292919061229f565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061182a565b505050565b5f8083850290505f8019858709828110838203039150505f81036117365783828161172c5761172b612272565b5b04925050506117f6565b80841161176f576040517f227bc15300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8486880990508281118203915080830392505f855f038616905080860495508084049350600181825f0304019050808302841793505f600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b5f60016002836003811115611815576118146122c6565b5b61181f91906122f3565b60ff16149050919050565b5f611854828473ffffffffffffffffffffffffffffffffffffffff166118bf90919063ffffffff16565b90505f815114158015611878575080806020019051810190611876919061234d565b155b156118ba57826040517f5274afe70000000000000000000000000000000000000000000000000000000081526004016118b19190611ce6565b60405180910390fd5b505050565b60606118cc83835f6118d4565b905092915050565b60608147101561191b57306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016119129190611ce6565b60405180910390fd5b5f808573ffffffffffffffffffffffffffffffffffffffff16848660405161194391906123bc565b5f6040518083038185875af1925050503d805f811461197d576040519150601f19603f3d011682016040523d82523d5f602084013e611982565b606091505b509150915061199286838361199d565b925050509392505050565b6060826119b2576119ad82611a2a565b611a22565b5f82511480156119d857505f8473ffffffffffffffffffffffffffffffffffffffff163b145b15611a1a57836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401611a119190611ce6565b60405180910390fd5b819050611a23565b5b9392505050565b5f81511115611a3c5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f819050919050565b611a8081611a6e565b82525050565b5f602082019050611a995f830184611a77565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f611ae182611a9f565b611aeb8185611aa9565b9350611afb818560208601611ab9565b611b0481611ac7565b840191505092915050565b5f6020820190508181035f830152611b278184611ad7565b905092915050565b5f80fd5b611b3c81611a6e565b8114611b46575f80fd5b50565b5f81359050611b5781611b33565b92915050565b5f60208284031215611b7257611b71611b2f565b5b5f611b7f84828501611b49565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611bb182611b88565b9050919050565b611bc181611ba7565b8114611bcb575f80fd5b50565b5f81359050611bdc81611bb8565b92915050565b5f8060408385031215611bf857611bf7611b2f565b5b5f611c0585828601611bce565b9250506020611c1685828601611b49565b9150509250929050565b5f8115159050919050565b611c3481611c20565b82525050565b5f602082019050611c4d5f830184611c2b565b92915050565b5f805f60608486031215611c6a57611c69611b2f565b5b5f611c7786828701611bce565b9350506020611c8886828701611bce565b9250506040611c9986828701611b49565b9150509250925092565b5f60ff82169050919050565b611cb881611ca3565b82525050565b5f602082019050611cd15f830184611caf565b92915050565b611ce081611ba7565b82525050565b5f602082019050611cf95f830184611cd7565b92915050565b5f60208284031215611d1457611d13611b2f565b5b5f611d2184828501611bce565b91505092915050565b5f8060408385031215611d4057611d3f611b2f565b5b5f611d4d85828601611b49565b9250506020611d5e85828601611bce565b9150509250929050565b5f819050919050565b5f611d8b611d86611d8184611b88565b611d68565b611b88565b9050919050565b5f611d9c82611d71565b9050919050565b5f611dad82611d92565b9050919050565b611dbd81611da3565b82525050565b5f602082019050611dd65f830184611db4565b92915050565b5f805f60608486031215611df357611df2611b2f565b5b5f611e0086828701611b49565b9350506020611e1186828701611bce565b9250506040611e2286828701611bce565b9150509250925092565b5f8060408385031215611e4257611e41611b2f565b5b5f611e4f85828601611bce565b9250506020611e6085828601611bce565b9150509250929050565b5f81519050611e7881611b33565b92915050565b5f60208284031215611e9357611e92611b2f565b5b5f611ea084828501611e6a565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680611eed57607f821691505b602082108103611f0057611eff611ea9565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611f3d82611ca3565b9150611f4883611ca3565b9250828201905060ff811115611f6157611f60611f06565b5b92915050565b7f53656e646572206973204e6f74205661756c74730000000000000000000000005f82015250565b5f611f9b601483611aa9565b9150611fa682611f67565b602082019050919050565b5f6020820190508181035f830152611fc881611f8f565b9050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e20300000005f82015250565b5f612003601d83611aa9565b915061200e82611fcf565b602082019050919050565b5f6020820190508181035f83015261203081611ff7565b9050919050565b5f60608201905061204a5f830186611cd7565b6120576020830185611a77565b6120646040830184611a77565b949350505050565b5f61207682611a6e565b915061208183611a6e565b925082820190508082111561209957612098611f06565b5b92915050565b5f8160011c9050919050565b5f808291508390505b60018511156120f4578086048111156120d0576120cf611f06565b5b60018516156120df5780820291505b80810290506120ed8561209f565b94506120b4565b94509492505050565b5f8261210c57600190506121c7565b81612119575f90506121c7565b816001811461212f576002811461213957612168565b60019150506121c7565b60ff84111561214b5761214a611f06565b5b8360020a91508482111561216257612161611f06565b5b506121c7565b5060208310610133831016604e8410600b841016171561219d5782820a90508381111561219857612197611f06565b5b6121c7565b6121aa84848460016120ab565b925090508184048111156121c1576121c0611f06565b5b81810290505b9392505050565b5f6121d882611a6e565b91506121e383611ca3565b92506122107fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846120fd565b905092915050565b5f61222282611a6e565b915061222d83611a6e565b925082820390508181111561224557612244611f06565b5b92915050565b5f60408201905061225e5f830185611a77565b61226b6020830184611a77565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6040820190506122b25f830185611cd7565b6122bf6020830184611a77565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b5f6122fd82611ca3565b915061230883611ca3565b92508261231857612317612272565b5b828206905092915050565b61232c81611c20565b8114612336575f80fd5b50565b5f8151905061234781612323565b92915050565b5f6020828403121561236257612361611b2f565b5b5f61236f84828501612339565b91505092915050565b5f81519050919050565b5f81905092915050565b5f61239682612378565b6123a08185612382565b93506123b0818560208601611ab9565b80840191505092915050565b5f6123c7828461238c565b91508190509291505056fea264697066735822122003634230a2ae1b2e8a1dc9432523ae5c48734f5090ac093502859b70f72cf95564736f6c63430008190033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x18C JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x866C99E2 GT PUSH2 0xDC JUMPI DUP1 PUSH4 0xBA087652 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xCE96CB77 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xCE96CB77 EQ PUSH2 0x532 JUMPI DUP1 PUSH4 0xD905777E EQ PUSH2 0x562 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x592 JUMPI DUP1 PUSH4 0xEF8B30F7 EQ PUSH2 0x5C2 JUMPI PUSH2 0x18C JUMP JUMPDEST DUP1 PUSH4 0xBA087652 EQ PUSH2 0x4A2 JUMPI DUP1 PUSH4 0xC63D75B6 EQ PUSH2 0x4D2 JUMPI DUP1 PUSH4 0xC6E6F592 EQ PUSH2 0x502 JUMPI PUSH2 0x18C JUMP JUMPDEST DUP1 PUSH4 0x866C99E2 EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0x94BF804D EQ PUSH2 0x3C4 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3F4 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x412 JUMPI DUP1 PUSH4 0xB3D7F6B9 EQ PUSH2 0x442 JUMPI DUP1 PUSH4 0xB460AF94 EQ PUSH2 0x472 JUMPI PUSH2 0x18C JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x402D267D GT PUSH2 0x123 JUMPI DUP1 PUSH4 0x402D267D EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x4CDAD506 EQ PUSH2 0x316 JUMPI DUP1 PUSH4 0x6E553F65 EQ PUSH2 0x346 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x376 JUMPI PUSH2 0x18C JUMP JUMPDEST DUP1 PUSH4 0x23B872DD EQ PUSH2 0x27A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2AA JUMPI DUP1 PUSH4 0x38D52E0F EQ PUSH2 0x2C8 JUMPI PUSH2 0x18C JUMP JUMPDEST DUP1 PUSH4 0x1E1D114 EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0x7A2D13A EQ PUSH2 0x1CC JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0xA28A477 EQ PUSH2 0x22C JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x25C JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x198 PUSH2 0x5F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A5 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B6 PUSH2 0x690 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C3 SWAP2 SWAP1 PUSH2 0x1B0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E1 SWAP2 SWAP1 PUSH2 0x1B5D JUMP JUMPDEST PUSH2 0x720 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x216 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x211 SWAP2 SWAP1 PUSH2 0x1BE2 JUMP JUMPDEST PUSH2 0x732 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x223 SWAP2 SWAP1 PUSH2 0x1C3A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x246 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x241 SWAP2 SWAP1 PUSH2 0x1B5D JUMP JUMPDEST PUSH2 0x754 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x253 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x264 PUSH2 0x767 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x294 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x28F SWAP2 SWAP1 PUSH2 0x1C53 JUMP JUMPDEST PUSH2 0x770 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x1C3A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B2 PUSH2 0x79E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BF SWAP2 SWAP1 PUSH2 0x1CBE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2D0 PUSH2 0x7D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2DD SWAP2 SWAP1 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x300 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2FB SWAP2 SWAP1 PUSH2 0x1CFF JUMP JUMPDEST PUSH2 0x7FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30D SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x330 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x32B SWAP2 SWAP1 PUSH2 0x1B5D JUMP JUMPDEST PUSH2 0x827 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x33D SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x360 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x35B SWAP2 SWAP1 PUSH2 0x1D2A JUMP JUMPDEST PUSH2 0x839 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x36D SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x38B SWAP2 SWAP1 PUSH2 0x1CFF JUMP JUMPDEST PUSH2 0x9B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x39D SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3AE PUSH2 0x9FB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3BB SWAP2 SWAP1 PUSH2 0x1DC3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3DE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3D9 SWAP2 SWAP1 PUSH2 0x1D2A JUMP JUMPDEST PUSH2 0xA20 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3EB SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3FC PUSH2 0xA53 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x409 SWAP2 SWAP1 PUSH2 0x1B0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x42C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x427 SWAP2 SWAP1 PUSH2 0x1BE2 JUMP JUMPDEST PUSH2 0xAE3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x439 SWAP2 SWAP1 PUSH2 0x1C3A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x45C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x457 SWAP2 SWAP1 PUSH2 0x1B5D JUMP JUMPDEST PUSH2 0xB05 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x469 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x48C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x487 SWAP2 SWAP1 PUSH2 0x1DDC JUMP JUMPDEST PUSH2 0xB18 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x499 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4BC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4B7 SWAP2 SWAP1 PUSH2 0x1DDC JUMP JUMPDEST PUSH2 0xC1F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4C9 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4EC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4E7 SWAP2 SWAP1 PUSH2 0x1CFF JUMP JUMPDEST PUSH2 0xCA1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4F9 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x51C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x517 SWAP2 SWAP1 PUSH2 0x1B5D JUMP JUMPDEST PUSH2 0xCCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x529 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x54C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x547 SWAP2 SWAP1 PUSH2 0x1CFF JUMP JUMPDEST PUSH2 0xCDC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x559 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x57C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x577 SWAP2 SWAP1 PUSH2 0x1CFF JUMP JUMPDEST PUSH2 0xCF6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x589 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5AC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5A7 SWAP2 SWAP1 PUSH2 0x1E2C JUMP JUMPDEST PUSH2 0xD07 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B9 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5DC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5D7 SWAP2 SWAP1 PUSH2 0x1B5D JUMP JUMPDEST PUSH2 0xD89 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5E9 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64C SWAP2 SWAP1 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x667 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x68B SWAP2 SWAP1 PUSH2 0x1E7E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x69F SWAP1 PUSH2 0x1ED6 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6CB SWAP1 PUSH2 0x1ED6 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x716 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6ED JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x716 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x6F9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x72B DUP3 PUSH0 PUSH2 0xD9B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x73C PUSH2 0xDF3 JUMP JUMPDEST SWAP1 POP PUSH2 0x749 DUP2 DUP6 DUP6 PUSH2 0xDFA JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x760 DUP3 PUSH1 0x1 PUSH2 0xE0C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x77A PUSH2 0xDF3 JUMP JUMPDEST SWAP1 POP PUSH2 0x787 DUP6 DUP3 DUP6 PUSH2 0xEC5 JUMP JUMPDEST PUSH2 0x792 DUP6 DUP6 DUP6 PUSH2 0xF57 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x7A7 PUSH2 0x1047 JUMP JUMPDEST PUSH32 0x0 PUSH2 0x7D2 SWAP2 SWAP1 PUSH2 0x1F33 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x832 DUP3 PUSH0 PUSH2 0xD9B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x8C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8C0 SWAP1 PUSH2 0x1FB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x5 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH0 DUP4 GT PUSH2 0x926 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x91D SWAP1 PUSH2 0x2019 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x930 DUP4 PUSH2 0x7FE JUMP JUMPDEST SWAP1 POP DUP1 DUP5 GT ISZERO PUSH2 0x97B JUMPI DUP3 DUP5 DUP3 PUSH1 0x40 MLOAD PUSH32 0x79012FB200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x972 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x985 DUP6 PUSH2 0xD89 JUMP JUMPDEST SWAP1 POP PUSH2 0x991 DUP5 DUP3 PUSH2 0x104B JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD PUSH32 0xA9A2322B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0xA62 SWAP1 PUSH2 0x1ED6 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA8E SWAP1 PUSH2 0x1ED6 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xAD9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xAB0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xAD9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xABC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xAED PUSH2 0xDF3 JUMP JUMPDEST SWAP1 POP PUSH2 0xAFA DUP2 DUP6 DUP6 PUSH2 0xF57 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xB11 DUP3 PUSH1 0x1 PUSH2 0xD9B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBA8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB9F SWAP1 PUSH2 0x1FB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0xBB2 DUP4 PUSH2 0xCDC JUMP JUMPDEST SWAP1 POP DUP1 DUP6 GT ISZERO PUSH2 0xBFD JUMPI DUP3 DUP6 DUP3 PUSH1 0x40 MLOAD PUSH32 0xFE9CCEEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBF4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0xC07 DUP7 PUSH2 0x754 JUMP JUMPDEST SWAP1 POP PUSH2 0xC13 DUP5 DUP3 PUSH2 0x10CA JUMP JUMPDEST DUP2 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xC2A DUP4 PUSH2 0xCF6 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 GT ISZERO PUSH2 0xC75 JUMPI DUP3 DUP6 DUP3 PUSH1 0x40 MLOAD PUSH32 0xB94ABEEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC6C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0xC7F DUP7 PUSH2 0x827 JUMP JUMPDEST SWAP1 POP PUSH2 0xC95 PUSH2 0xC8C PUSH2 0xDF3 JUMP JUMPDEST DUP7 DUP7 DUP5 DUP11 PUSH2 0x1149 JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xCD5 DUP3 PUSH0 PUSH2 0xE0C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xCEF PUSH2 0xCE9 DUP4 PUSH2 0x9B6 JUMP JUMPDEST PUSH0 PUSH2 0xD9B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xD00 DUP3 PUSH2 0x9B6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xD94 DUP3 PUSH0 PUSH2 0xE0C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xDEB PUSH1 0x1 PUSH2 0xDA9 PUSH2 0x5F2 JUMP JUMPDEST PUSH2 0xDB3 SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST PUSH2 0xDBB PUSH2 0x1047 JUMP JUMPDEST PUSH1 0xA PUSH2 0xDC7 SWAP2 SWAP1 PUSH2 0x21CE JUMP JUMPDEST PUSH2 0xDCF PUSH2 0x767 JUMP JUMPDEST PUSH2 0xDD9 SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST DUP5 DUP7 PUSH2 0x1242 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xE07 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1297 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xE78 JUMPI PUSH2 0xE71 DUP4 PUSH2 0xE2E PUSH2 0x1047 JUMP JUMPDEST PUSH1 0xA PUSH2 0xE3A SWAP2 SWAP1 PUSH2 0x21CE JUMP JUMPDEST PUSH2 0xE42 PUSH2 0x767 JUMP JUMPDEST PUSH2 0xE4C SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST PUSH1 0x1 DUP7 PUSH2 0xE57 PUSH2 0x5F2 JUMP JUMPDEST PUSH2 0xE61 SWAP2 SWAP1 PUSH2 0x2218 JUMP JUMPDEST PUSH2 0xE6B SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST DUP6 PUSH2 0x1242 JUMP JUMPDEST SWAP1 POP PUSH2 0xEBF JUMP JUMPDEST PUSH2 0xEBC DUP4 PUSH2 0xE84 PUSH2 0x1047 JUMP JUMPDEST PUSH1 0xA PUSH2 0xE90 SWAP2 SWAP1 PUSH2 0x21CE JUMP JUMPDEST PUSH2 0xE98 PUSH2 0x767 JUMP JUMPDEST PUSH2 0xEA2 SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST PUSH1 0x1 PUSH2 0xEAC PUSH2 0x5F2 JUMP JUMPDEST PUSH2 0xEB6 SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST DUP6 PUSH2 0x1242 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xED0 DUP5 DUP5 PUSH2 0xD07 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0xF51 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xF42 JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF39 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF50 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x1297 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xFC7 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFBE SWAP2 SWAP1 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1037 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x102E SWAP2 SWAP1 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1042 DUP4 DUP4 DUP4 PUSH2 0x1466 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x10BB JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10B2 SWAP2 SWAP1 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x10C6 PUSH0 DUP4 DUP4 PUSH2 0x1466 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x113A JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1131 SWAP2 SWAP1 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1145 DUP3 PUSH0 DUP4 PUSH2 0x1466 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1188 JUMPI PUSH2 0x1187 DUP4 DUP7 DUP4 PUSH2 0xEC5 JUMP JUMPDEST JUMPDEST PUSH2 0x1192 DUP4 DUP3 PUSH2 0x10CA JUMP JUMPDEST PUSH2 0x11BD PUSH32 0x0 DUP6 DUP5 PUSH2 0x167F JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFBDE797D201C681B91056529119E0B02407C7BB96A4A2C75C01FC9667232C8DB DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1233 SWAP3 SWAP2 SWAP1 PUSH2 0x224B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x124F DUP7 DUP7 DUP7 PUSH2 0x16FE JUMP JUMPDEST SWAP1 POP PUSH2 0x125A DUP4 PUSH2 0x17FD JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1276 JUMPI POP PUSH0 DUP5 DUP1 PUSH2 0x1271 JUMPI PUSH2 0x1270 PUSH2 0x2272 JUMP JUMPDEST JUMPDEST DUP7 DUP9 MULMOD GT JUMPDEST ISZERO PUSH2 0x128B JUMPI PUSH1 0x1 DUP2 PUSH2 0x1288 SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1307 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12FE SWAP2 SWAP1 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1377 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x136E SWAP2 SWAP1 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1460 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1457 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x14B6 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x14AA SWAP2 SWAP1 PUSH2 0x206C JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1584 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x153F JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1536 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x15CB JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1615 JUMP JUMPDEST DUP1 PUSH0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x1672 SWAP2 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x16F9 DUP4 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x16B2 SWAP3 SWAP2 SWAP1 PUSH2 0x229F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x182A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP1 DUP4 DUP6 MUL SWAP1 POP PUSH0 DUP1 NOT DUP6 DUP8 MULMOD DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP PUSH0 DUP2 SUB PUSH2 0x1736 JUMPI DUP4 DUP3 DUP2 PUSH2 0x172C JUMPI PUSH2 0x172B PUSH2 0x2272 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP POP POP PUSH2 0x17F6 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x176F JUMPI PUSH1 0x40 MLOAD PUSH32 0x227BC15300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP5 DUP7 DUP9 MULMOD SWAP1 POP DUP3 DUP2 GT DUP3 SUB SWAP2 POP DUP1 DUP4 SUB SWAP3 POP PUSH0 DUP6 PUSH0 SUB DUP7 AND SWAP1 POP DUP1 DUP7 DIV SWAP6 POP DUP1 DUP5 DIV SWAP4 POP PUSH1 0x1 DUP2 DUP3 PUSH0 SUB DIV ADD SWAP1 POP DUP1 DUP4 MUL DUP5 OR SWAP4 POP PUSH0 PUSH1 0x2 DUP8 PUSH1 0x3 MUL XOR SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP6 MUL SWAP6 POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x2 DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1815 JUMPI PUSH2 0x1814 PUSH2 0x22C6 JUMP JUMPDEST JUMPDEST PUSH2 0x181F SWAP2 SWAP1 PUSH2 0x22F3 JUMP JUMPDEST PUSH1 0xFF AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1854 DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x18BF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 MLOAD EQ ISZERO DUP1 ISZERO PUSH2 0x1878 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1876 SWAP2 SWAP1 PUSH2 0x234D JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x18BA JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18B1 SWAP2 SWAP1 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x18CC DUP4 DUP4 PUSH0 PUSH2 0x18D4 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 SELFBALANCE LT ISZERO PUSH2 0x191B JUMPI ADDRESS PUSH1 0x40 MLOAD PUSH32 0xCD78605900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1912 SWAP2 SWAP1 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP7 PUSH1 0x40 MLOAD PUSH2 0x1943 SWAP2 SWAP1 PUSH2 0x23BC JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x197D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1982 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1992 DUP7 DUP4 DUP4 PUSH2 0x199D JUMP JUMPDEST SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x19B2 JUMPI PUSH2 0x19AD DUP3 PUSH2 0x1A2A JUMP JUMPDEST PUSH2 0x1A22 JUMP JUMPDEST PUSH0 DUP3 MLOAD EQ DUP1 ISZERO PUSH2 0x19D8 JUMPI POP PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST ISZERO PUSH2 0x1A1A JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x9996B31500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A11 SWAP2 SWAP1 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP PUSH2 0x1A23 JUMP JUMPDEST JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD GT ISZERO PUSH2 0x1A3C JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1425EA4200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A80 DUP2 PUSH2 0x1A6E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1A99 PUSH0 DUP4 ADD DUP5 PUSH2 0x1A77 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1AE1 DUP3 PUSH2 0x1A9F JUMP JUMPDEST PUSH2 0x1AEB DUP2 DUP6 PUSH2 0x1AA9 JUMP JUMPDEST SWAP4 POP PUSH2 0x1AFB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1AB9 JUMP JUMPDEST PUSH2 0x1B04 DUP2 PUSH2 0x1AC7 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1B27 DUP2 DUP5 PUSH2 0x1AD7 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1B3C DUP2 PUSH2 0x1A6E JUMP JUMPDEST DUP2 EQ PUSH2 0x1B46 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1B57 DUP2 PUSH2 0x1B33 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B72 JUMPI PUSH2 0x1B71 PUSH2 0x1B2F JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1B7F DUP5 DUP3 DUP6 ADD PUSH2 0x1B49 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1BB1 DUP3 PUSH2 0x1B88 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BC1 DUP2 PUSH2 0x1BA7 JUMP JUMPDEST DUP2 EQ PUSH2 0x1BCB JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1BDC DUP2 PUSH2 0x1BB8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BF8 JUMPI PUSH2 0x1BF7 PUSH2 0x1B2F JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1C05 DUP6 DUP3 DUP7 ADD PUSH2 0x1BCE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1C16 DUP6 DUP3 DUP7 ADD PUSH2 0x1B49 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C34 DUP2 PUSH2 0x1C20 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1C4D PUSH0 DUP4 ADD DUP5 PUSH2 0x1C2B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1C6A JUMPI PUSH2 0x1C69 PUSH2 0x1B2F JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1C77 DUP7 DUP3 DUP8 ADD PUSH2 0x1BCE JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1C88 DUP7 DUP3 DUP8 ADD PUSH2 0x1BCE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1C99 DUP7 DUP3 DUP8 ADD PUSH2 0x1B49 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1CB8 DUP2 PUSH2 0x1CA3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1CD1 PUSH0 DUP4 ADD DUP5 PUSH2 0x1CAF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1CE0 DUP2 PUSH2 0x1BA7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1CF9 PUSH0 DUP4 ADD DUP5 PUSH2 0x1CD7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D14 JUMPI PUSH2 0x1D13 PUSH2 0x1B2F JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1D21 DUP5 DUP3 DUP6 ADD PUSH2 0x1BCE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D40 JUMPI PUSH2 0x1D3F PUSH2 0x1B2F JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1D4D DUP6 DUP3 DUP7 ADD PUSH2 0x1B49 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1D5E DUP6 DUP3 DUP7 ADD PUSH2 0x1BCE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1D8B PUSH2 0x1D86 PUSH2 0x1D81 DUP5 PUSH2 0x1B88 JUMP JUMPDEST PUSH2 0x1D68 JUMP JUMPDEST PUSH2 0x1B88 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1D9C DUP3 PUSH2 0x1D71 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1DAD DUP3 PUSH2 0x1D92 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1DBD DUP2 PUSH2 0x1DA3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1DD6 PUSH0 DUP4 ADD DUP5 PUSH2 0x1DB4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1DF3 JUMPI PUSH2 0x1DF2 PUSH2 0x1B2F JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1E00 DUP7 DUP3 DUP8 ADD PUSH2 0x1B49 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1E11 DUP7 DUP3 DUP8 ADD PUSH2 0x1BCE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1E22 DUP7 DUP3 DUP8 ADD PUSH2 0x1BCE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E42 JUMPI PUSH2 0x1E41 PUSH2 0x1B2F JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1E4F DUP6 DUP3 DUP7 ADD PUSH2 0x1BCE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1E60 DUP6 DUP3 DUP7 ADD PUSH2 0x1BCE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x1E78 DUP2 PUSH2 0x1B33 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E93 JUMPI PUSH2 0x1E92 PUSH2 0x1B2F JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1EA0 DUP5 DUP3 DUP6 ADD PUSH2 0x1E6A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1EED JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1F00 JUMPI PUSH2 0x1EFF PUSH2 0x1EA9 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x1F3D DUP3 PUSH2 0x1CA3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F48 DUP4 PUSH2 0x1CA3 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH1 0xFF DUP2 GT ISZERO PUSH2 0x1F61 JUMPI PUSH2 0x1F60 PUSH2 0x1F06 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x53656E646572206973204E6F74205661756C7473000000000000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x1F9B PUSH1 0x14 DUP4 PUSH2 0x1AA9 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FA6 DUP3 PUSH2 0x1F67 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1FC8 DUP2 PUSH2 0x1F8F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416D6F756E74206D7573742062652067726561746572207468616E2030000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x2003 PUSH1 0x1D DUP4 PUSH2 0x1AA9 JUMP JUMPDEST SWAP2 POP PUSH2 0x200E DUP3 PUSH2 0x1FCF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x2030 DUP2 PUSH2 0x1FF7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x204A PUSH0 DUP4 ADD DUP7 PUSH2 0x1CD7 JUMP JUMPDEST PUSH2 0x2057 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1A77 JUMP JUMPDEST PUSH2 0x2064 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1A77 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2076 DUP3 PUSH2 0x1A6E JUMP JUMPDEST SWAP2 POP PUSH2 0x2081 DUP4 PUSH2 0x1A6E JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x2099 JUMPI PUSH2 0x2098 PUSH2 0x1F06 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH2 0x20F4 JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 0x20D0 JUMPI PUSH2 0x20CF PUSH2 0x1F06 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x20DF JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 0x20ED DUP6 PUSH2 0x209F JUMP JUMPDEST SWAP5 POP PUSH2 0x20B4 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x210C JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x21C7 JUMP JUMPDEST DUP2 PUSH2 0x2119 JUMPI PUSH0 SWAP1 POP PUSH2 0x21C7 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x212F JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x2139 JUMPI PUSH2 0x2168 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x21C7 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x214B JUMPI PUSH2 0x214A PUSH2 0x1F06 JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0x2162 JUMPI PUSH2 0x2161 PUSH2 0x1F06 JUMP JUMPDEST JUMPDEST POP PUSH2 0x21C7 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x219D JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x2198 JUMPI PUSH2 0x2197 PUSH2 0x1F06 JUMP JUMPDEST JUMPDEST PUSH2 0x21C7 JUMP JUMPDEST PUSH2 0x21AA DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x20AB JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 0x21C1 JUMPI PUSH2 0x21C0 PUSH2 0x1F06 JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x21D8 DUP3 PUSH2 0x1A6E JUMP JUMPDEST SWAP2 POP PUSH2 0x21E3 DUP4 PUSH2 0x1CA3 JUMP JUMPDEST SWAP3 POP PUSH2 0x2210 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH2 0x20FD JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2222 DUP3 PUSH2 0x1A6E JUMP JUMPDEST SWAP2 POP PUSH2 0x222D DUP4 PUSH2 0x1A6E JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2245 JUMPI PUSH2 0x2244 PUSH2 0x1F06 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x225E PUSH0 DUP4 ADD DUP6 PUSH2 0x1A77 JUMP JUMPDEST PUSH2 0x226B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1A77 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x22B2 PUSH0 DUP4 ADD DUP6 PUSH2 0x1CD7 JUMP JUMPDEST PUSH2 0x22BF PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1A77 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x22FD DUP3 PUSH2 0x1CA3 JUMP JUMPDEST SWAP2 POP PUSH2 0x2308 DUP4 PUSH2 0x1CA3 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2318 JUMPI PUSH2 0x2317 PUSH2 0x2272 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x232C DUP2 PUSH2 0x1C20 JUMP JUMPDEST DUP2 EQ PUSH2 0x2336 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x2347 DUP2 PUSH2 0x2323 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2362 JUMPI PUSH2 0x2361 PUSH2 0x1B2F JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x236F DUP5 DUP3 DUP6 ADD PUSH2 0x2339 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2396 DUP3 PUSH2 0x2378 JUMP JUMPDEST PUSH2 0x23A0 DUP2 DUP6 PUSH2 0x2382 JUMP JUMPDEST SWAP4 POP PUSH2 0x23B0 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1AB9 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x23C7 DUP3 DUP5 PUSH2 0x238C JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SUB PUSH4 0x4230A2AE SHL 0x2E DUP11 SAR 0xC9 NUMBER 0x25 0x23 0xAE TLOAD BASEFEE PUSH20 0x4F5090AC093502859B70F72CF95564736F6C6343 STOP ADDMOD NOT STOP CALLER ",
							"sourceMap": "254:1970:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5780:116:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2074:89:3;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6152:148:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4293:186:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7418:147:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3144:97:3;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5039:244;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5441:151:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5636:94;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6349:108;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7617:146;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;635:496:12;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3299:116:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;285:21:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1572:127;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2276:93:3;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3610:178;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7221:143:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1178:386:12;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9353:405:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6503:105;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5950:148;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6658:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6859:112;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3846:140:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7024:147:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5780:116;5832:7;5858:6;:16;;;5883:4;5858:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5851:38;;5780:116;:::o;2074:89:3:-;2119:13;2151:5;2144:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89;:::o;6152:148:5:-;6222:7;6248:45;6265:6;6273:19;6248:16;:45::i;:::-;6241:52;;6152:148;;;:::o;4293:186:3:-;4366:4;4382:13;4398:12;:10;:12::i;:::-;4382:28;;4420:31;4429:5;4436:7;4445:5;4420:8;:31::i;:::-;4468:4;4461:11;;;4293:186;;;;:::o;7418:147:5:-;7488:7;7514:44;7531:6;7539:18;7514:16;:44::i;:::-;7507:51;;7418:147;;;:::o;3144:97:3:-;3196:7;3222:12;;3215:19;;3144:97;:::o;5039:244::-;5126:4;5142:15;5160:12;:10;:12::i;:::-;5142:30;;5182:37;5198:4;5204:7;5213:5;5182:15;:37::i;:::-;5229:26;5239:4;5245:2;5249:5;5229:9;:26::i;:::-;5272:4;5265:11;;;5039:244;;;;;:::o;5441:151:5:-;5522:5;5568:17;:15;:17::i;:::-;5546:19;:39;;;;:::i;:::-;5539:46;;5441:151;:::o;5636:94::-;5682:7;5716:6;5701:22;;5636:94;:::o;6349:108::-;6407:7;6433:17;6426:24;;6349:108;;;:::o;7617:146::-;7685:7;7711:45;7728:6;7736:19;7711:16;:45::i;:::-;7704:52;;7617:146;;;:::o;635:496:12:-;716:7;437:10;417:30;;425:7;;;;;;;;;;;417:30;;;409:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;747:4:::1;735:9;;:16;;;;;;;;;;;;;;;;;;779:1;770:6;:10;762:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;824:17;844:20;855:8;844:10;:20::i;:::-;824:40;;887:9;878:6;:18;874:110;;;945:8;955:6;963:9;919:54;;;;;;;;;;;;;:::i;:::-;;;;;;;;874:110;1002:14;1019:22;1034:6;1019:14;:22::i;:::-;1002:39;;1051:23;1057:8;1067:6;1051:5;:23::i;:::-;1096:5;1084:9;;:17;;;;;;;;;;;;;;;;;;1118:6;1111:13;;;;635:496:::0;;;;:::o;3299:116:3:-;3364:7;3390:9;:18;3400:7;3390:18;;;;;;;;;;;;;;;;3383:25;;3299:116;;;:::o;285:21:12:-;;;;;;;;;;;;;:::o;1572:127::-;1645:7;1671:21;;;;;;;;;;;;;;2276:93:3;2323:13;2355:7;2348:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2276:93;:::o;3610:178::-;3679:4;3695:13;3711:12;:10;:12::i;:::-;3695:28;;3733:27;3743:5;3750:2;3754:5;3733:9;:27::i;:::-;3777:4;3770:11;;;3610:178;;;;:::o;7221:143:5:-;7287:7;7313:44;7330:6;7338:18;7313:16;:44::i;:::-;7306:51;;7221:143;;;:::o;1178:386:12:-;1275:7;437:10;417:30;;425:7;;;;;;;;;;;417:30;;;409:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1294:17:::1;1314:18;1326:5;1314:11;:18::i;:::-;1294:38;;1355:9;1346:6;:18;1342:108;;;1414:5;1421:6;1429:9;1387:52;;;;;;;;;;;;;:::i;:::-;;;;;;;;1342:108;1460:14;1477:23;1493:6;1477:15;:23::i;:::-;1460:40;;1510:20;1516:5;1523:6;1510:5;:20::i;:::-;1548:9;1541:16;;;;1178:386:::0;;;;;:::o;9353:405:5:-;9442:7;9461:17;9481:16;9491:5;9481:9;:16::i;:::-;9461:36;;9520:9;9511:6;:18;9507:106;;;9577:5;9584:6;9592:9;9552:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;9507:106;9623:14;9640:21;9654:6;9640:13;:21::i;:::-;9623:38;;9671:56;9681:12;:10;:12::i;:::-;9695:8;9705:5;9712:6;9720;9671:9;:56::i;:::-;9745:6;9738:13;;;;9353:405;;;;;:::o;6503:105::-;6558:7;6584:17;6577:24;;6503:105;;;:::o;5950:148::-;6020:7;6046:45;6063:6;6071:19;6046:16;:45::i;:::-;6039:52;;5950:148;;;:::o;6658:153::-;6723:7;6749:55;6766:16;6776:5;6766:9;:16::i;:::-;6784:19;6749:16;:55::i;:::-;6742:62;;6658:153;;;:::o;6859:112::-;6922:7;6948:16;6958:5;6948:9;:16::i;:::-;6941:23;;6859:112;;;:::o;3846:140:3:-;3926:7;3952:11;:18;3964:5;3952:18;;;;;;;;;;;;;;;:27;3971:7;3952:27;;;;;;;;;;;;;;;;3945:34;;3846:140;;;;:::o;7024:147:5:-;7093:7;7119:45;7136:6;7144:19;7119:16;:45::i;:::-;7112:52;;7024:147;;;:::o;10219:213::-;10316:7;10342:83;10372:1;10356:13;:11;:13::i;:::-;:17;;;;:::i;:::-;10397;:15;:17::i;:::-;10391:2;:23;;;;:::i;:::-;10375:13;:11;:13::i;:::-;:39;;;;:::i;:::-;10416:8;10342:6;:13;;:83;;;;;;:::i;:::-;10335:90;;10219:213;;;;:::o;656:96:10:-;709:7;735:10;728:17;;656:96;:::o;8989:128:3:-;9073:37;9082:5;9089:7;9098:5;9105:4;9073:8;:37::i;:::-;8989:128;;;:::o;1823:398:12:-;1921:7;1944:9;;;;;;;;;;;1940:272;;;1976:98;1988:6;2018:17;:15;:17::i;:::-;2012:2;:23;;;;:::i;:::-;1996:13;:11;:13::i;:::-;:39;;;;:::i;:::-;2062:1;2053:6;2037:13;:11;:13::i;:::-;:22;;;;:::i;:::-;:26;;;;:::i;:::-;2065:8;1976:11;:98::i;:::-;1969:105;;;;1940:272;2112:89;2124:6;2154:17;:15;:17::i;:::-;2148:2;:23;;;;:::i;:::-;2132:13;:11;:13::i;:::-;:39;;;;:::i;:::-;2189:1;2173:13;:11;:13::i;:::-;:17;;;;:::i;:::-;2192:8;2112:11;:89::i;:::-;2105:96;;1823:398;;;;;:::o;10663:477:3:-;10762:24;10789:25;10799:5;10806:7;10789:9;:25::i;:::-;10762:52;;10848:17;10828:16;:37;10824:310;;10904:5;10885:16;:24;10881:130;;;10963:7;10972:16;10990:5;10936:60;;;;;;;;;;;;;:::i;:::-;;;;;;;;10881:130;11052:57;11061:5;11068:7;11096:5;11077:16;:24;11103:5;11052:8;:57::i;:::-;10824:310;10752:388;10663:477;;;:::o;5656:300::-;5755:1;5739:18;;:4;:18;;;5735:86;;5807:1;5780:30;;;;;;;;;;;:::i;:::-;;;;;;;;5735:86;5848:1;5834:16;;:2;:16;;;5830:86;;5902:1;5873:32;;;;;;;;;;;:::i;:::-;;;;;;;;5830:86;5925:24;5933:4;5939:2;5943:5;5925:7;:24::i;:::-;5656:300;;;:::o;12313:90:5:-;12371:5;12313:90;:::o;7721:208:3:-;7810:1;7791:21;;:7;:21;;;7787:91;;7864:1;7835:32;;;;;;;;;;;:::i;:::-;;;;;;;;7787:91;7887:35;7903:1;7907:7;7916:5;7887:7;:35::i;:::-;7721:208;;:::o;8247:206::-;8336:1;8317:21;;:7;:21;;;8313:89;;8388:1;8361:30;;;;;;;;;;;:::i;:::-;;;;;;;;8313:89;8411:35;8419:7;8436:1;8440:5;8411:7;:35::i;:::-;8247:206;;:::o;11393:914:5:-;11580:5;11570:15;;:6;:15;;;11566:84;;11601:38;11617:5;11624:6;11632;11601:15;:38::i;:::-;11566:84;12157:20;12163:5;12170:6;12157:5;:20::i;:::-;12187:48;12210:6;12218:8;12228:6;12187:22;:48::i;:::-;12278:5;12251:49;;12268:8;12251:49;;12260:6;12251:49;;;12285:6;12293;12251:49;;;;;;;:::i;:::-;;;;;;;;11393:914;;;;;:::o;8051:302:11:-;8152:7;8171:14;8188:25;8195:1;8198;8201:11;8188:6;:25::i;:::-;8171:42;;8227:26;8244:8;8227:16;:26::i;:::-;:59;;;;;8285:1;8270:11;8257:25;;;;;:::i;:::-;;8267:1;8264;8257:25;:29;8227:59;8223:101;;;8312:1;8302:11;;;;;:::i;:::-;;;8223:101;8340:6;8333:13;;;8051:302;;;;;;:::o;9949:432:3:-;10078:1;10061:19;;:5;:19;;;10057:89;;10132:1;10103:32;;;;;;;;;;;:::i;:::-;;;;;;;;10057:89;10178:1;10159:21;;:7;:21;;;10155:90;;10231:1;10203:31;;;;;;;;;;;:::i;:::-;;;;;;;;10155:90;10284:5;10254:11;:18;10266:5;10254:18;;;;;;;;;;;;;;;:27;10273:7;10254:27;;;;;;;;;;;;;;;:35;;;;10303:9;10299:76;;;10349:7;10333:31;;10342:5;10333:31;;;10358:5;10333:31;;;;;;:::i;:::-;;;;;;;;10299:76;9949:432;;;;:::o;6271:1107::-;6376:1;6360:18;;:4;:18;;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;;;;;6356:540;;;6548:19;6570:9;:15;6580:4;6570:15;;;;;;;;;;;;;;;;6548:37;;6617:5;6603:11;:19;6599:115;;;6674:4;6680:11;6693:5;6649:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;6599:115;6866:5;6852:11;:19;6834:9;:15;6844:4;6834:15;;;;;;;;;;;;;;;:37;;;;6534:362;6356:540;6924:1;6910:16;;:2;:16;;;6906:425;;7089:5;7073:12;;:21;;;;;;;;;;;6906:425;;;7301:5;7284:9;:13;7294:2;7284:13;;;;;;;;;;;;;;;;:22;;;;;;;;;;;6906:425;7361:2;7346:25;;7355:4;7346:25;;;7365:5;7346:25;;;;;;:::i;:::-;;;;;;;;6271:1107;;;:::o;1303:160:8:-;1385:71;1405:5;1427;:14;;;1444:2;1448:5;1412:43;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1385:19;:71::i;:::-;1303:160;;;:::o;3803:4116:11:-;3885:14;4232:13;4252:1;4248;:5;4232:21;;4312:13;4437:1;4433:6;4430:1;4427;4420:20;4493:5;4489:2;4486:13;4478:5;4474:2;4470:14;4466:34;4457:43;;4392:122;4604:1;4595:5;:10;4591:368;;4933:11;4925:5;:19;;;;;:::i;:::-;;;4918:26;;;;;;4591:368;5080:5;5065:11;:20;5061:88;;5112:22;;;;;;;;;;;;;;5061:88;5404:17;5539:11;5536:1;5533;5526:25;5513:38;;5667:5;5656:9;5653:20;5646:5;5642:32;5633:41;;5711:9;5704:5;5700:21;5691:30;;5939:12;5973:11;5969:1;:15;5954:11;:31;5939:46;;6105:4;6092:11;6088:22;6073:37;;6197:4;6190:5;6186:16;6177:25;;6354:1;6347:4;6340;6337:1;6333:12;6329:23;6325:31;6317:39;;6453:4;6445:5;:12;6436:21;;;;6775:15;6813:1;6798:11;6794:1;:15;6793:21;6775:39;;7060:7;7046:11;:21;7042:1;:25;7031:36;;;;7129:7;7115:11;:21;7111:1;:25;7100:36;;;;7199:7;7185:11;:21;7181:1;:25;7170:36;;;;7269:7;7255:11;:21;7251:1;:25;7240:36;;;;7339:7;7325:11;:21;7321:1;:25;7310:36;;;;7410:7;7396:11;:21;7392:1;:25;7381:36;;;;7868:7;7860:5;:15;7851:24;;7889:13;;;;;3803:4116;;;;;;:::o;14993:122::-;15061:4;15107:1;15102;15090:8;15084:15;;;;;;;;:::i;:::-;;:19;;;;:::i;:::-;:24;;;15077:31;;14993:122;;;:::o;4059:629:8:-;4478:23;4504:33;4532:4;4512:5;4504:27;;;;:33;;;;:::i;:::-;4478:59;;4572:1;4551:10;:17;:22;;:57;;;;;4589:10;4578:30;;;;;;;;;;;;:::i;:::-;4577:31;4551:57;4547:135;;;4664:5;4631:40;;;;;;;;;;;:::i;:::-;;;;;;;;4547:135;4129:559;4059:629;;:::o;2705:151:9:-;2780:12;2811:38;2833:6;2841:4;2847:1;2811:21;:38::i;:::-;2804:45;;2705:151;;;;:::o;3180:392::-;3279:12;3331:5;3307:21;:29;3303:108;;;3394:4;3359:41;;;;;;;;;;;:::i;:::-;;;;;;;;3303:108;3421:12;3435:23;3462:6;:11;;3481:5;3488:4;3462:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3420:73;;;;3510:55;3537:6;3545:7;3554:10;3510:26;:55::i;:::-;3503:62;;;;3180:392;;;;;:::o;4625:582::-;4769:12;4798:7;4793:408;;4821:19;4829:10;4821:7;:19::i;:::-;4793:408;;;5066:1;5045:10;:17;:22;:49;;;;;5093:1;5071:6;:18;;;:23;5045:49;5041:119;;;5138:6;5121:24;;;;;;;;;;;:::i;:::-;;;;;;;;5041:119;5180:10;5173:17;;;;4793:408;4625:582;;;;;;:::o;5743:516::-;5894:1;5874:10;:17;:21;5870:383;;;6102:10;6096:17;6158:15;6145:10;6141:2;6137:19;6130:44;5870:383;6225:17;;;;;;;;;;;;;;7:77:13;44:7;73:5;62:16;;7:77;;;:::o;90:118::-;177:24;195:5;177:24;:::i;:::-;172:3;165:37;90:118;;:::o;214:222::-;307:4;345:2;334:9;330:18;322:26;;358:71;426:1;415:9;411:17;402:6;358:71;:::i;:::-;214:222;;;;:::o;442:99::-;494:6;528:5;522:12;512:22;;442:99;;;:::o;547:169::-;631:11;665:6;660:3;653:19;705:4;700:3;696:14;681:29;;547:169;;;;:::o;722:139::-;811:6;806:3;801;795:23;852:1;843:6;838:3;834:16;827:27;722:139;;;:::o;867:102::-;908:6;959:2;955:7;950:2;943:5;939:14;935:28;925:38;;867:102;;;:::o;975:377::-;1063:3;1091:39;1124:5;1091:39;:::i;:::-;1146:71;1210:6;1205:3;1146:71;:::i;:::-;1139:78;;1226:65;1284:6;1279:3;1272:4;1265:5;1261:16;1226:65;:::i;:::-;1316:29;1338:6;1316:29;:::i;:::-;1311:3;1307:39;1300:46;;1067:285;975:377;;;;:::o;1358:313::-;1471:4;1509:2;1498:9;1494:18;1486:26;;1558:9;1552:4;1548:20;1544:1;1533:9;1529:17;1522:47;1586:78;1659:4;1650:6;1586:78;:::i;:::-;1578:86;;1358:313;;;;:::o;1758:117::-;1867:1;1864;1857:12;2004:122;2077:24;2095:5;2077:24;:::i;:::-;2070:5;2067:35;2057:63;;2116:1;2113;2106:12;2057:63;2004:122;:::o;2132:139::-;2178:5;2216:6;2203:20;2194:29;;2232:33;2259:5;2232:33;:::i;:::-;2132:139;;;;:::o;2277:329::-;2336:6;2385:2;2373:9;2364:7;2360:23;2356:32;2353:119;;;2391:79;;:::i;:::-;2353:119;2511:1;2536:53;2581:7;2572:6;2561:9;2557:22;2536:53;:::i;:::-;2526:63;;2482:117;2277:329;;;;:::o;2612:126::-;2649:7;2689:42;2682:5;2678:54;2667:65;;2612:126;;;:::o;2744:96::-;2781:7;2810:24;2828:5;2810:24;:::i;:::-;2799:35;;2744:96;;;:::o;2846:122::-;2919:24;2937:5;2919:24;:::i;:::-;2912:5;2909:35;2899:63;;2958:1;2955;2948:12;2899:63;2846:122;:::o;2974:139::-;3020:5;3058:6;3045:20;3036:29;;3074:33;3101:5;3074:33;:::i;:::-;2974:139;;;;:::o;3119:474::-;3187:6;3195;3244:2;3232:9;3223:7;3219:23;3215:32;3212:119;;;3250:79;;:::i;:::-;3212:119;3370:1;3395:53;3440:7;3431:6;3420:9;3416:22;3395:53;:::i;:::-;3385:63;;3341:117;3497:2;3523:53;3568:7;3559:6;3548:9;3544:22;3523:53;:::i;:::-;3513:63;;3468:118;3119:474;;;;;:::o;3599:90::-;3633:7;3676:5;3669:13;3662:21;3651:32;;3599:90;;;:::o;3695:109::-;3776:21;3791:5;3776:21;:::i;:::-;3771:3;3764:34;3695:109;;:::o;3810:210::-;3897:4;3935:2;3924:9;3920:18;3912:26;;3948:65;4010:1;3999:9;3995:17;3986:6;3948:65;:::i;:::-;3810:210;;;;:::o;4026:619::-;4103:6;4111;4119;4168:2;4156:9;4147:7;4143:23;4139:32;4136:119;;;4174:79;;:::i;:::-;4136:119;4294:1;4319:53;4364:7;4355:6;4344:9;4340:22;4319:53;:::i;:::-;4309:63;;4265:117;4421:2;4447:53;4492:7;4483:6;4472:9;4468:22;4447:53;:::i;:::-;4437:63;;4392:118;4549:2;4575:53;4620:7;4611:6;4600:9;4596:22;4575:53;:::i;:::-;4565:63;;4520:118;4026:619;;;;;:::o;4651:86::-;4686:7;4726:4;4719:5;4715:16;4704:27;;4651:86;;;:::o;4743:112::-;4826:22;4842:5;4826:22;:::i;:::-;4821:3;4814:35;4743:112;;:::o;4861:214::-;4950:4;4988:2;4977:9;4973:18;4965:26;;5001:67;5065:1;5054:9;5050:17;5041:6;5001:67;:::i;:::-;4861:214;;;;:::o;5081:118::-;5168:24;5186:5;5168:24;:::i;:::-;5163:3;5156:37;5081:118;;:::o;5205:222::-;5298:4;5336:2;5325:9;5321:18;5313:26;;5349:71;5417:1;5406:9;5402:17;5393:6;5349:71;:::i;:::-;5205:222;;;;:::o;5433:329::-;5492:6;5541:2;5529:9;5520:7;5516:23;5512:32;5509:119;;;5547:79;;:::i;:::-;5509:119;5667:1;5692:53;5737:7;5728:6;5717:9;5713:22;5692:53;:::i;:::-;5682:63;;5638:117;5433:329;;;;:::o;5768:474::-;5836:6;5844;5893:2;5881:9;5872:7;5868:23;5864:32;5861:119;;;5899:79;;:::i;:::-;5861:119;6019:1;6044:53;6089:7;6080:6;6069:9;6065:22;6044:53;:::i;:::-;6034:63;;5990:117;6146:2;6172:53;6217:7;6208:6;6197:9;6193:22;6172:53;:::i;:::-;6162:63;;6117:118;5768:474;;;;;:::o;6248:60::-;6276:3;6297:5;6290:12;;6248:60;;;:::o;6314:142::-;6364:9;6397:53;6415:34;6424:24;6442:5;6424:24;:::i;:::-;6415:34;:::i;:::-;6397:53;:::i;:::-;6384:66;;6314:142;;;:::o;6462:126::-;6512:9;6545:37;6576:5;6545:37;:::i;:::-;6532:50;;6462:126;;;:::o;6594:141::-;6659:9;6692:37;6723:5;6692:37;:::i;:::-;6679:50;;6594:141;;;:::o;6741:161::-;6843:52;6889:5;6843:52;:::i;:::-;6838:3;6831:65;6741:161;;:::o;6908:252::-;7016:4;7054:2;7043:9;7039:18;7031:26;;7067:86;7150:1;7139:9;7135:17;7126:6;7067:86;:::i;:::-;6908:252;;;;:::o;7166:619::-;7243:6;7251;7259;7308:2;7296:9;7287:7;7283:23;7279:32;7276:119;;;7314:79;;:::i;:::-;7276:119;7434:1;7459:53;7504:7;7495:6;7484:9;7480:22;7459:53;:::i;:::-;7449:63;;7405:117;7561:2;7587:53;7632:7;7623:6;7612:9;7608:22;7587:53;:::i;:::-;7577:63;;7532:118;7689:2;7715:53;7760:7;7751:6;7740:9;7736:22;7715:53;:::i;:::-;7705:63;;7660:118;7166:619;;;;;:::o;7791:474::-;7859:6;7867;7916:2;7904:9;7895:7;7891:23;7887:32;7884:119;;;7922:79;;:::i;:::-;7884:119;8042:1;8067:53;8112:7;8103:6;8092:9;8088:22;8067:53;:::i;:::-;8057:63;;8013:117;8169:2;8195:53;8240:7;8231:6;8220:9;8216:22;8195:53;:::i;:::-;8185:63;;8140:118;7791:474;;;;;:::o;8271:143::-;8328:5;8359:6;8353:13;8344:22;;8375:33;8402:5;8375:33;:::i;:::-;8271:143;;;;:::o;8420:351::-;8490:6;8539:2;8527:9;8518:7;8514:23;8510:32;8507:119;;;8545:79;;:::i;:::-;8507:119;8665:1;8690:64;8746:7;8737:6;8726:9;8722:22;8690:64;:::i;:::-;8680:74;;8636:128;8420:351;;;;:::o;8777:180::-;8825:77;8822:1;8815:88;8922:4;8919:1;8912:15;8946:4;8943:1;8936:15;8963:320;9007:6;9044:1;9038:4;9034:12;9024:22;;9091:1;9085:4;9081:12;9112:18;9102:81;;9168:4;9160:6;9156:17;9146:27;;9102:81;9230:2;9222:6;9219:14;9199:18;9196:38;9193:84;;9249:18;;:::i;:::-;9193:84;9014:269;8963:320;;;:::o;9289:180::-;9337:77;9334:1;9327:88;9434:4;9431:1;9424:15;9458:4;9455:1;9448:15;9475:188;9513:3;9532:18;9548:1;9532:18;:::i;:::-;9527:23;;9564:18;9580:1;9564:18;:::i;:::-;9559:23;;9605:1;9602;9598:9;9591:16;;9628:4;9623:3;9620:13;9617:39;;;9636:18;;:::i;:::-;9617:39;9475:188;;;;:::o;9669:170::-;9809:22;9805:1;9797:6;9793:14;9786:46;9669:170;:::o;9845:366::-;9987:3;10008:67;10072:2;10067:3;10008:67;:::i;:::-;10001:74;;10084:93;10173:3;10084:93;:::i;:::-;10202:2;10197:3;10193:12;10186:19;;9845:366;;;:::o;10217:419::-;10383:4;10421:2;10410:9;10406:18;10398:26;;10470:9;10464:4;10460:20;10456:1;10445:9;10441:17;10434:47;10498:131;10624:4;10498:131;:::i;:::-;10490:139;;10217:419;;;:::o;10642:179::-;10782:31;10778:1;10770:6;10766:14;10759:55;10642:179;:::o;10827:366::-;10969:3;10990:67;11054:2;11049:3;10990:67;:::i;:::-;10983:74;;11066:93;11155:3;11066:93;:::i;:::-;11184:2;11179:3;11175:12;11168:19;;10827:366;;;:::o;11199:419::-;11365:4;11403:2;11392:9;11388:18;11380:26;;11452:9;11446:4;11442:20;11438:1;11427:9;11423:17;11416:47;11480:131;11606:4;11480:131;:::i;:::-;11472:139;;11199:419;;;:::o;11624:442::-;11773:4;11811:2;11800:9;11796:18;11788:26;;11824:71;11892:1;11881:9;11877:17;11868:6;11824:71;:::i;:::-;11905:72;11973:2;11962:9;11958:18;11949:6;11905:72;:::i;:::-;11987;12055:2;12044:9;12040:18;12031:6;11987:72;:::i;:::-;11624:442;;;;;;:::o;12072:191::-;12112:3;12131:20;12149:1;12131:20;:::i;:::-;12126:25;;12165:20;12183:1;12165:20;:::i;:::-;12160:25;;12208:1;12205;12201:9;12194:16;;12229:3;12226:1;12223:10;12220:36;;;12236:18;;:::i;:::-;12220:36;12072:191;;;;:::o;12269:102::-;12311:8;12358:5;12355:1;12351:13;12330:34;;12269:102;;;:::o;12377:848::-;12438:5;12445:4;12469:6;12460:15;;12493:5;12484:14;;12507:712;12528:1;12518:8;12515:15;12507:712;;;12623:4;12618:3;12614:14;12608:4;12605:24;12602:50;;;12632:18;;:::i;:::-;12602:50;12682:1;12672:8;12668:16;12665:451;;;13097:4;13090:5;13086:16;13077:25;;12665:451;13147:4;13141;13137:15;13129:23;;13177:32;13200:8;13177:32;:::i;:::-;13165:44;;12507:712;;;12377:848;;;;;;;:::o;13231:1073::-;13285:5;13476:8;13466:40;;13497:1;13488:10;;13499:5;;13466:40;13525:4;13515:36;;13542:1;13533:10;;13544:5;;13515:36;13611:4;13659:1;13654:27;;;;13695:1;13690:191;;;;13604:277;;13654:27;13672:1;13663:10;;13674:5;;;13690:191;13735:3;13725:8;13722:17;13719:43;;;13742:18;;:::i;:::-;13719:43;13791:8;13788:1;13784:16;13775:25;;13826:3;13819:5;13816:14;13813:40;;;13833:18;;:::i;:::-;13813:40;13866:5;;;13604:277;;13990:2;13980:8;13977:16;13971:3;13965:4;13962:13;13958:36;13940:2;13930:8;13927:16;13922:2;13916:4;13913:12;13909:35;13893:111;13890:246;;;14046:8;14040:4;14036:19;14027:28;;14081:3;14074:5;14071:14;14068:40;;;14088:18;;:::i;:::-;14068:40;14121:5;;13890:246;14161:42;14199:3;14189:8;14183:4;14180:1;14161:42;:::i;:::-;14146:57;;;;14235:4;14230:3;14226:14;14219:5;14216:25;14213:51;;;14244:18;;:::i;:::-;14213:51;14293:4;14286:5;14282:16;14273:25;;13231:1073;;;;;;:::o;14310:281::-;14368:5;14392:23;14410:4;14392:23;:::i;:::-;14384:31;;14436:25;14452:8;14436:25;:::i;:::-;14424:37;;14480:104;14517:66;14507:8;14501:4;14480:104;:::i;:::-;14471:113;;14310:281;;;;:::o;14597:194::-;14637:4;14657:20;14675:1;14657:20;:::i;:::-;14652:25;;14691:20;14709:1;14691:20;:::i;:::-;14686:25;;14735:1;14732;14728:9;14720:17;;14759:1;14753:4;14750:11;14747:37;;;14764:18;;:::i;:::-;14747:37;14597:194;;;;:::o;14797:332::-;14918:4;14956:2;14945:9;14941:18;14933:26;;14969:71;15037:1;15026:9;15022:17;15013:6;14969:71;:::i;:::-;15050:72;15118:2;15107:9;15103:18;15094:6;15050:72;:::i;:::-;14797:332;;;;;:::o;15135:180::-;15183:77;15180:1;15173:88;15280:4;15277:1;15270:15;15304:4;15301:1;15294:15;15321:332;15442:4;15480:2;15469:9;15465:18;15457:26;;15493:71;15561:1;15550:9;15546:17;15537:6;15493:71;:::i;:::-;15574:72;15642:2;15631:9;15627:18;15618:6;15574:72;:::i;:::-;15321:332;;;;;:::o;15659:180::-;15707:77;15704:1;15697:88;15804:4;15801:1;15794:15;15828:4;15825:1;15818:15;15845:170;15875:1;15892:18;15908:1;15892:18;:::i;:::-;15887:23;;15924:18;15940:1;15924:18;:::i;:::-;15919:23;;15961:1;15951:35;;15966:18;;:::i;:::-;15951:35;16007:1;16004;16000:9;15995:14;;15845:170;;;;:::o;16021:116::-;16091:21;16106:5;16091:21;:::i;:::-;16084:5;16081:32;16071:60;;16127:1;16124;16117:12;16071:60;16021:116;:::o;16143:137::-;16197:5;16228:6;16222:13;16213:22;;16244:30;16268:5;16244:30;:::i;:::-;16143:137;;;;:::o;16286:345::-;16353:6;16402:2;16390:9;16381:7;16377:23;16373:32;16370:119;;;16408:79;;:::i;:::-;16370:119;16528:1;16553:61;16606:7;16597:6;16586:9;16582:22;16553:61;:::i;:::-;16543:71;;16499:125;16286:345;;;;:::o;16637:98::-;16688:6;16722:5;16716:12;16706:22;;16637:98;;;:::o;16741:147::-;16842:11;16879:3;16864:18;;16741:147;;;;:::o;16894:386::-;16998:3;17026:38;17058:5;17026:38;:::i;:::-;17080:88;17161:6;17156:3;17080:88;:::i;:::-;17073:95;;17177:65;17235:6;17230:3;17223:4;17216:5;17212:16;17177:65;:::i;:::-;17267:6;17262:3;17258:16;17251:23;;17002:278;16894:386;;;;:::o;17286:271::-;17416:3;17438:93;17527:3;17518:6;17438:93;:::i;:::-;17431:100;;17548:3;17541:10;;17286:271;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1844800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "infinite",
								"asset()": "infinite",
								"balanceOf(address)": "2940",
								"convertToAssets(uint256)": "infinite",
								"convertToShares(uint256)": "infinite",
								"decimals()": "infinite",
								"deposit(uint256,address)": "infinite",
								"maxDeposit(address)": "686",
								"maxMint(address)": "708",
								"maxRedeem(address)": "2937",
								"maxWithdraw(address)": "infinite",
								"mint(uint256,address)": "699",
								"name()": "infinite",
								"previewDeposit(uint256)": "infinite",
								"previewMint(uint256)": "infinite",
								"previewRedeem(uint256)": "infinite",
								"previewWithdraw(uint256)": "infinite",
								"redeem(uint256,address,address)": "infinite",
								"satoken()": "infinite",
								"symbol()": "infinite",
								"totalAssets()": "infinite",
								"totalSupply()": "2566",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite",
								"withdraw(uint256,address,address)": "infinite"
							},
							"internal": {
								"_convertToShares(uint256,enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 254,
									"end": 2224,
									"name": "PUSH",
									"source": 12,
									"value": "C0"
								},
								{
									"begin": 254,
									"end": 2224,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 254,
									"end": 2224,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 337,
									"end": 342,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 312,
									"end": 342,
									"name": "PUSH",
									"source": 12,
									"value": "5"
								},
								{
									"begin": 312,
									"end": 342,
									"name": "PUSH",
									"source": 12,
									"value": "14"
								},
								{
									"begin": 312,
									"end": 342,
									"name": "PUSH",
									"source": 12,
									"value": "100"
								},
								{
									"begin": 312,
									"end": 342,
									"name": "EXP",
									"source": 12
								},
								{
									"begin": 312,
									"end": 342,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 312,
									"end": 342,
									"name": "SLOAD",
									"source": 12
								},
								{
									"begin": 312,
									"end": 342,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 312,
									"end": 342,
									"name": "PUSH",
									"source": 12,
									"value": "FF"
								},
								{
									"begin": 312,
									"end": 342,
									"name": "MUL",
									"source": 12
								},
								{
									"begin": 312,
									"end": 342,
									"name": "NOT",
									"source": 12
								},
								{
									"begin": 312,
									"end": 342,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 312,
									"end": 342,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 312,
									"end": 342,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 312,
									"end": 342,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 312,
									"end": 342,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 312,
									"end": 342,
									"name": "MUL",
									"source": 12
								},
								{
									"begin": 312,
									"end": 342,
									"name": "OR",
									"source": 12
								},
								{
									"begin": 312,
									"end": 342,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 312,
									"end": 342,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 312,
									"end": 342,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "CALLVALUE",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 496,
									"end": 629,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 496,
									"end": 629,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 496,
									"end": 629,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 496,
									"end": 629,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "PUSHSIZE",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "CODESIZE",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "PUSHSIZE",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 496,
									"end": 629,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 496,
									"end": 629,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 496,
									"end": 629,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "tag",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 496,
									"end": 629,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 541,
									"end": 549,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "E"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "522D736861726564206155534443000000000000000000000000000000000000"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "7"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "7273615553444300000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1970,
									"end": 1975,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1967,
									"name": "PUSH",
									"source": 3,
									"value": "3"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "8"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "9"
								},
								{
									"begin": 1962,
									"end": 1975,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "tag",
									"source": 3,
									"value": "8"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1995,
									"end": 2002,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 1992,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "10"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "9"
								},
								{
									"begin": 1985,
									"end": 2002,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "tag",
									"source": 3,
									"value": "10"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 4203,
									"end": 4215,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 4217,
									"end": 4236,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4240,
									"end": 4268,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "12"
								},
								{
									"begin": 4261,
									"end": 4267,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 4240,
									"end": 4260,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "13"
								},
								{
									"begin": 4240,
									"end": 4260,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 4240,
									"end": 4260,
									"name": "SHL",
									"source": 5
								},
								{
									"begin": 4240,
									"end": 4268,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 4240,
									"end": 4268,
									"name": "SHR",
									"source": 5
								},
								{
									"begin": 4240,
									"end": 4268,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 4240,
									"end": 4268,
									"name": "tag",
									"source": 5,
									"value": "12"
								},
								{
									"begin": 4240,
									"end": 4268,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4202,
									"end": 4268,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4202,
									"end": 4268,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4202,
									"end": 4268,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4202,
									"end": 4268,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4300,
									"end": 4307,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "14"
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 4326,
									"end": 4328,
									"name": "PUSH",
									"source": 5,
									"value": "12"
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "15"
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "tag",
									"source": 5,
									"value": "14"
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4310,
									"end": 4323,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "tag",
									"source": 5,
									"value": "15"
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "PUSH",
									"source": 5,
									"value": "FF"
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "PUSH",
									"source": 5,
									"value": "A0"
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "PUSH",
									"source": 5,
									"value": "FF"
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4347,
									"end": 4353,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "PUSH",
									"source": 5,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "PUSH",
									"source": 5,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4192,
									"end": 4360,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4192,
									"end": 4360,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4165,
									"end": 4360,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 613,
									"end": 621,
									"modifierDepth": 2,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 596,
									"end": 603,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 12,
									"value": "5"
								},
								{
									"begin": 596,
									"end": 603,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 596,
									"end": 622,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 12,
									"value": "100"
								},
								{
									"begin": 596,
									"end": 622,
									"modifierDepth": 2,
									"name": "EXP",
									"source": 12
								},
								{
									"begin": 596,
									"end": 622,
									"modifierDepth": 2,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 596,
									"end": 622,
									"modifierDepth": 2,
									"name": "SLOAD",
									"source": 12
								},
								{
									"begin": 596,
									"end": 622,
									"modifierDepth": 2,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 596,
									"end": 622,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 12,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 596,
									"end": 622,
									"modifierDepth": 2,
									"name": "MUL",
									"source": 12
								},
								{
									"begin": 596,
									"end": 622,
									"modifierDepth": 2,
									"name": "NOT",
									"source": 12
								},
								{
									"begin": 596,
									"end": 622,
									"modifierDepth": 2,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 596,
									"end": 622,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 596,
									"end": 622,
									"modifierDepth": 2,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 596,
									"end": 622,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 12,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 596,
									"end": 622,
									"modifierDepth": 2,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 596,
									"end": 622,
									"modifierDepth": 2,
									"name": "MUL",
									"source": 12
								},
								{
									"begin": 596,
									"end": 622,
									"modifierDepth": 2,
									"name": "OR",
									"source": 12
								},
								{
									"begin": 596,
									"end": 622,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 596,
									"end": 622,
									"modifierDepth": 2,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 596,
									"end": 622,
									"modifierDepth": 2,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 496,
									"end": 629,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 254,
									"end": 2224,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "17"
								},
								{
									"begin": 254,
									"end": 2224,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "tag",
									"source": 5,
									"value": "13"
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4570,
									"end": 4574,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 4576,
									"end": 4581,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4594,
									"end": 4606,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 4608,
									"end": 4636,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4648,
									"end": 4654,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4666,
									"name": "PUSH",
									"source": 5,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 4640,
									"end": 4666,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "SUB",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "SUB",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "313CE567"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "E0"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "SHL",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "OR",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "19"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 4640,
									"end": 4733,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "tag",
									"source": 5,
									"value": "19"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "SUB",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP6",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "GAS",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "STATICCALL",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "RETURNDATASIZE",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "23"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 5,
									"value": "1F"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "NOT",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 5,
									"value": "3F"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "RETURNDATASIZE",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "RETURNDATASIZE",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "RETURNDATASIZE",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "RETURNDATACOPY",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "22"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "tag",
									"source": 5,
									"value": "23"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 5,
									"value": "60"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "tag",
									"source": 5,
									"value": "22"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4593,
									"end": 4733,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4593,
									"end": 4733,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4593,
									"end": 4733,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4593,
									"end": 4733,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4747,
									"end": 4754,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4784,
									"end": 4786,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 4758,
									"end": 4773,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4758,
									"end": 4780,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 4758,
									"end": 4786,
									"name": "LT",
									"source": 5
								},
								{
									"begin": 4758,
									"end": 4786,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "tag",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4743,
									"end": 5003,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 4743,
									"end": 5003,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "25"
								},
								{
									"begin": 4743,
									"end": 5003,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 4802,
									"end": 4826,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 4840,
									"end": 4855,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "26"
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "27"
								},
								{
									"begin": 4829,
									"end": 4867,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "tag",
									"source": 5,
									"value": "26"
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4802,
									"end": 4867,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 4802,
									"end": 4867,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4905,
									"end": 4920,
									"name": "PUSH",
									"source": 5,
									"value": "FF"
								},
								{
									"begin": 4885,
									"end": 4920,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4885,
									"end": 4920,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 4885,
									"end": 4901,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4885,
									"end": 4920,
									"name": "GT",
									"source": 5
								},
								{
									"begin": 4881,
									"end": 4993,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "28"
								},
								{
									"begin": 4881,
									"end": 4993,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 4948,
									"end": 4952,
									"name": "PUSH",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 4960,
									"end": 4976,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "SWAP5",
									"source": 5
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "SWAP5",
									"source": 5
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "18"
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 4881,
									"end": 4993,
									"name": "tag",
									"source": 5,
									"value": "28"
								},
								{
									"begin": 4881,
									"end": 4993,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4788,
									"end": 5003,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4743,
									"end": 5003,
									"name": "tag",
									"source": 5,
									"value": "25"
								},
								{
									"begin": 4743,
									"end": 5003,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 5020,
									"end": 5025,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 5027,
									"end": 5028,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 5012,
									"end": 5029,
									"name": "SWAP4",
									"source": 5
								},
								{
									"begin": 5012,
									"end": 5029,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 5012,
									"end": 5029,
									"name": "SWAP4",
									"source": 5
								},
								{
									"begin": 5012,
									"end": 5029,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 5012,
									"end": 5029,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 5012,
									"end": 5029,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "tag",
									"source": 5,
									"value": "18"
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4503,
									"end": 5036,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 88,
									"end": 205,
									"name": "tag",
									"source": 13,
									"value": "30"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 197,
									"end": 198,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 195,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 187,
									"end": 199,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 334,
									"end": 460,
									"name": "tag",
									"source": 13,
									"value": "32"
								},
								{
									"begin": 334,
									"end": 460,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 371,
									"end": 378,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 453,
									"name": "PUSH",
									"source": 13,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 404,
									"end": 409,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 400,
									"end": 454,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 389,
									"end": 454,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 389,
									"end": 454,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 334,
									"end": 460,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 334,
									"end": 460,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 466,
									"end": 562,
									"name": "tag",
									"source": 13,
									"value": "33"
								},
								{
									"begin": 466,
									"end": 562,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 503,
									"end": 510,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "68"
								},
								{
									"begin": 550,
									"end": 555,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "32"
								},
								{
									"begin": 532,
									"end": 556,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 532,
									"end": 556,
									"name": "tag",
									"source": 13,
									"value": "68"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 521,
									"end": 556,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 521,
									"end": 556,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 466,
									"end": 562,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 466,
									"end": 562,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 568,
									"end": 690,
									"name": "tag",
									"source": 13,
									"value": "34"
								},
								{
									"begin": 568,
									"end": 690,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "70"
								},
								{
									"begin": 659,
									"end": 664,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "33"
								},
								{
									"begin": 641,
									"end": 665,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 641,
									"end": 665,
									"name": "tag",
									"source": 13,
									"value": "70"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 634,
									"end": 639,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 631,
									"end": 666,
									"name": "EQ",
									"source": 13
								},
								{
									"begin": 621,
									"end": 684,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "71"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 680,
									"end": 681,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 677,
									"end": 678,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 670,
									"end": 682,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 621,
									"end": 684,
									"name": "tag",
									"source": 13,
									"value": "71"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 568,
									"end": 690,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 568,
									"end": 690,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 696,
									"end": 839,
									"name": "tag",
									"source": 13,
									"value": "35"
								},
								{
									"begin": 696,
									"end": 839,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 753,
									"end": 758,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 784,
									"end": 790,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 778,
									"end": 791,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 769,
									"end": 791,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 769,
									"end": 791,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "73"
								},
								{
									"begin": 827,
									"end": 832,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "34"
								},
								{
									"begin": 800,
									"end": 833,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 800,
									"end": 833,
									"name": "tag",
									"source": 13,
									"value": "73"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 696,
									"end": 839,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "tag",
									"source": 13,
									"value": "3"
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 915,
									"end": 921,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 964,
									"end": 966,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 952,
									"end": 961,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 943,
									"end": 950,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 939,
									"end": 962,
									"name": "SUB",
									"source": 13
								},
								{
									"begin": 935,
									"end": 967,
									"name": "SLT",
									"source": 13
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "75"
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "76"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "30"
								},
								{
									"begin": 970,
									"end": 1049,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "tag",
									"source": 13,
									"value": "76"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "tag",
									"source": 13,
									"value": "75"
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1090,
									"end": 1091,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "77"
								},
								{
									"begin": 1171,
									"end": 1178,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 1162,
									"end": 1168,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1151,
									"end": 1160,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 1147,
									"end": 1169,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "35"
								},
								{
									"begin": 1115,
									"end": 1179,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "tag",
									"source": 13,
									"value": "77"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1105,
									"end": 1179,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1105,
									"end": 1179,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1061,
									"end": 1189,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 845,
									"end": 1196,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1202,
									"end": 1301,
									"name": "tag",
									"source": 13,
									"value": "36"
								},
								{
									"begin": 1202,
									"end": 1301,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1254,
									"end": 1260,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1288,
									"end": 1293,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1282,
									"end": 1294,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1272,
									"end": 1294,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1272,
									"end": 1294,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1202,
									"end": 1301,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1202,
									"end": 1301,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1202,
									"end": 1301,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1202,
									"end": 1301,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1307,
									"end": 1487,
									"name": "tag",
									"source": 13,
									"value": "37"
								},
								{
									"begin": 1307,
									"end": 1487,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1355,
									"end": 1432,
									"name": "PUSH",
									"source": 13,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1352,
									"end": 1353,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1345,
									"end": 1433,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1452,
									"end": 1456,
									"name": "PUSH",
									"source": 13,
									"value": "41"
								},
								{
									"begin": 1449,
									"end": 1450,
									"name": "PUSH",
									"source": 13,
									"value": "4"
								},
								{
									"begin": 1442,
									"end": 1457,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1476,
									"end": 1480,
									"name": "PUSH",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 1473,
									"end": 1474,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1466,
									"end": 1481,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 1493,
									"end": 1673,
									"name": "tag",
									"source": 13,
									"value": "38"
								},
								{
									"begin": 1493,
									"end": 1673,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1541,
									"end": 1618,
									"name": "PUSH",
									"source": 13,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1538,
									"end": 1539,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1531,
									"end": 1619,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1638,
									"end": 1642,
									"name": "PUSH",
									"source": 13,
									"value": "22"
								},
								{
									"begin": 1635,
									"end": 1636,
									"name": "PUSH",
									"source": 13,
									"value": "4"
								},
								{
									"begin": 1628,
									"end": 1643,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1662,
									"end": 1666,
									"name": "PUSH",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 1659,
									"end": 1660,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1652,
									"end": 1667,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 1679,
									"end": 1999,
									"name": "tag",
									"source": 13,
									"value": "39"
								},
								{
									"begin": 1679,
									"end": 1999,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1723,
									"end": 1729,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1760,
									"end": 1761,
									"name": "PUSH",
									"source": 13,
									"value": "2"
								},
								{
									"begin": 1754,
									"end": 1758,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1750,
									"end": 1762,
									"name": "DIV",
									"source": 13
								},
								{
									"begin": 1740,
									"end": 1762,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1740,
									"end": 1762,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1807,
									"end": 1808,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 1801,
									"end": 1805,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1797,
									"end": 1809,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 1828,
									"end": 1846,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1818,
									"end": 1899,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "82"
								},
								{
									"begin": 1818,
									"end": 1899,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1884,
									"end": 1888,
									"name": "PUSH",
									"source": 13,
									"value": "7F"
								},
								{
									"begin": 1876,
									"end": 1882,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1872,
									"end": 1889,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 1862,
									"end": 1889,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1862,
									"end": 1889,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1818,
									"end": 1899,
									"name": "tag",
									"source": 13,
									"value": "82"
								},
								{
									"begin": 1818,
									"end": 1899,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1946,
									"end": 1948,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 1938,
									"end": 1944,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1935,
									"end": 1949,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 1915,
									"end": 1933,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1912,
									"end": 1950,
									"name": "SUB",
									"source": 13
								},
								{
									"begin": 1909,
									"end": 1993,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "83"
								},
								{
									"begin": 1909,
									"end": 1993,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1965,
									"end": 1983,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "84"
								},
								{
									"begin": 1965,
									"end": 1983,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "38"
								},
								{
									"begin": 1965,
									"end": 1983,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1965,
									"end": 1983,
									"name": "tag",
									"source": 13,
									"value": "84"
								},
								{
									"begin": 1965,
									"end": 1983,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1909,
									"end": 1993,
									"name": "tag",
									"source": 13,
									"value": "83"
								},
								{
									"begin": 1909,
									"end": 1993,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1730,
									"end": 1999,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1679,
									"end": 1999,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1679,
									"end": 1999,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1679,
									"end": 1999,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1679,
									"end": 1999,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 2005,
									"end": 2146,
									"name": "tag",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 2005,
									"end": 2146,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2054,
									"end": 2058,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 2077,
									"end": 2080,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 2069,
									"end": 2080,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 2069,
									"end": 2080,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2100,
									"end": 2103,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 2097,
									"end": 2098,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 2090,
									"end": 2104,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 2134,
									"end": 2138,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 2131,
									"end": 2132,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 2121,
									"end": 2139,
									"name": "KECCAK256",
									"source": 13
								},
								{
									"begin": 2113,
									"end": 2139,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 2113,
									"end": 2139,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2005,
									"end": 2146,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 2005,
									"end": 2146,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 2005,
									"end": 2146,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2005,
									"end": 2146,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 2152,
									"end": 2245,
									"name": "tag",
									"source": 13,
									"value": "41"
								},
								{
									"begin": 2152,
									"end": 2245,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2189,
									"end": 2195,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 2236,
									"end": 2238,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 2231,
									"end": 2233,
									"name": "PUSH",
									"source": 13,
									"value": "1F"
								},
								{
									"begin": 2224,
									"end": 2229,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 2220,
									"end": 2234,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 2216,
									"end": 2239,
									"name": "DIV",
									"source": 13
								},
								{
									"begin": 2206,
									"end": 2239,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 2206,
									"end": 2239,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2152,
									"end": 2245,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 2152,
									"end": 2245,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 2152,
									"end": 2245,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2152,
									"end": 2245,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "tag",
									"source": 13,
									"value": "42"
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2295,
									"end": 2303,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 2345,
									"end": 2350,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 2339,
									"end": 2343,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 2335,
									"end": 2351,
									"name": "SHL",
									"source": 13
								},
								{
									"begin": 2314,
									"end": 2351,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 2314,
									"end": 2351,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2251,
									"end": 2358,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "tag",
									"source": 13,
									"value": "43"
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2433,
									"end": 2439,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 2483,
									"end": 2484,
									"name": "PUSH",
									"source": 13,
									"value": "8"
								},
								{
									"begin": 2471,
									"end": 2481,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 2467,
									"end": 2485,
									"name": "MUL",
									"source": 13
								},
								{
									"begin": 2506,
									"end": 2603,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "89"
								},
								{
									"begin": 2536,
									"end": 2602,
									"name": "PUSH",
									"source": 13,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2525,
									"end": 2534,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 2506,
									"end": 2603,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "42"
								},
								{
									"begin": 2506,
									"end": 2603,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 2506,
									"end": 2603,
									"name": "tag",
									"source": 13,
									"value": "89"
								},
								{
									"begin": 2506,
									"end": 2603,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2624,
									"end": 2663,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "90"
								},
								{
									"begin": 2654,
									"end": 2662,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 2643,
									"end": 2652,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 2624,
									"end": 2663,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "42"
								},
								{
									"begin": 2624,
									"end": 2663,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 2624,
									"end": 2663,
									"name": "tag",
									"source": 13,
									"value": "90"
								},
								{
									"begin": 2624,
									"end": 2663,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2612,
									"end": 2663,
									"name": "SWAP6",
									"source": 13
								},
								{
									"begin": 2612,
									"end": 2663,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2696,
									"end": 2700,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 2692,
									"end": 2701,
									"name": "NOT",
									"source": 13
								},
								{
									"begin": 2685,
									"end": 2690,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 2681,
									"end": 2702,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 2672,
									"end": 2702,
									"name": "SWAP4",
									"source": 13
								},
								{
									"begin": 2672,
									"end": 2702,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2745,
									"end": 2749,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 2735,
									"end": 2743,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 2731,
									"end": 2750,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 2724,
									"end": 2729,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 2721,
									"end": 2751,
									"name": "OR",
									"source": 13
								},
								{
									"begin": 2711,
									"end": 2751,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 2711,
									"end": 2751,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2440,
									"end": 2757,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2440,
									"end": 2757,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "SWAP4",
									"source": 13
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2364,
									"end": 2757,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 2763,
									"end": 2840,
									"name": "tag",
									"source": 13,
									"value": "44"
								},
								{
									"begin": 2763,
									"end": 2840,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2800,
									"end": 2807,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 2829,
									"end": 2834,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 2818,
									"end": 2834,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 2818,
									"end": 2834,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2763,
									"end": 2840,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 2763,
									"end": 2840,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 2763,
									"end": 2840,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2763,
									"end": 2840,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 2846,
									"end": 2906,
									"name": "tag",
									"source": 13,
									"value": "45"
								},
								{
									"begin": 2846,
									"end": 2906,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2874,
									"end": 2877,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 2895,
									"end": 2900,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 2888,
									"end": 2900,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 2888,
									"end": 2900,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2846,
									"end": 2906,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 2846,
									"end": 2906,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 2846,
									"end": 2906,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2846,
									"end": 2906,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 2912,
									"end": 3054,
									"name": "tag",
									"source": 13,
									"value": "46"
								},
								{
									"begin": 2912,
									"end": 3054,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2962,
									"end": 2971,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 2995,
									"end": 3048,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "94"
								},
								{
									"begin": 3013,
									"end": 3047,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "95"
								},
								{
									"begin": 3022,
									"end": 3046,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "96"
								},
								{
									"begin": 3040,
									"end": 3045,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 3022,
									"end": 3046,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "44"
								},
								{
									"begin": 3022,
									"end": 3046,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3022,
									"end": 3046,
									"name": "tag",
									"source": 13,
									"value": "96"
								},
								{
									"begin": 3022,
									"end": 3046,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3013,
									"end": 3047,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "45"
								},
								{
									"begin": 3013,
									"end": 3047,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3013,
									"end": 3047,
									"name": "tag",
									"source": 13,
									"value": "95"
								},
								{
									"begin": 3013,
									"end": 3047,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2995,
									"end": 3048,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "44"
								},
								{
									"begin": 2995,
									"end": 3048,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 2995,
									"end": 3048,
									"name": "tag",
									"source": 13,
									"value": "94"
								},
								{
									"begin": 2995,
									"end": 3048,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2982,
									"end": 3048,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 2982,
									"end": 3048,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2912,
									"end": 3054,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 2912,
									"end": 3054,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 2912,
									"end": 3054,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2912,
									"end": 3054,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3060,
									"end": 3135,
									"name": "tag",
									"source": 13,
									"value": "47"
								},
								{
									"begin": 3060,
									"end": 3135,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3103,
									"end": 3106,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 3124,
									"end": 3129,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 3117,
									"end": 3129,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3117,
									"end": 3129,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3060,
									"end": 3135,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 3060,
									"end": 3135,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3060,
									"end": 3135,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3060,
									"end": 3135,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3141,
									"end": 3410,
									"name": "tag",
									"source": 13,
									"value": "48"
								},
								{
									"begin": 3141,
									"end": 3410,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3251,
									"end": 3290,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "99"
								},
								{
									"begin": 3282,
									"end": 3289,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 3251,
									"end": 3290,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "46"
								},
								{
									"begin": 3251,
									"end": 3290,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3251,
									"end": 3290,
									"name": "tag",
									"source": 13,
									"value": "99"
								},
								{
									"begin": 3251,
									"end": 3290,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3312,
									"end": 3403,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "100"
								},
								{
									"begin": 3361,
									"end": 3402,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "101"
								},
								{
									"begin": 3385,
									"end": 3401,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 3361,
									"end": 3402,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "47"
								},
								{
									"begin": 3361,
									"end": 3402,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3361,
									"end": 3402,
									"name": "tag",
									"source": 13,
									"value": "101"
								},
								{
									"begin": 3361,
									"end": 3402,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3353,
									"end": 3359,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 3346,
									"end": 3350,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 3340,
									"end": 3351,
									"name": "SLOAD",
									"source": 13
								},
								{
									"begin": 3312,
									"end": 3403,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "43"
								},
								{
									"begin": 3312,
									"end": 3403,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3312,
									"end": 3403,
									"name": "tag",
									"source": 13,
									"value": "100"
								},
								{
									"begin": 3312,
									"end": 3403,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3306,
									"end": 3310,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 3299,
									"end": 3404,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 3217,
									"end": 3410,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3141,
									"end": 3410,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3141,
									"end": 3410,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3141,
									"end": 3410,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3141,
									"end": 3410,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3416,
									"end": 3489,
									"name": "tag",
									"source": 13,
									"value": "49"
								},
								{
									"begin": 3416,
									"end": 3489,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3461,
									"end": 3464,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 3416,
									"end": 3489,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3416,
									"end": 3489,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3495,
									"end": 3684,
									"name": "tag",
									"source": 13,
									"value": "50"
								},
								{
									"begin": 3495,
									"end": 3684,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3572,
									"end": 3604,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "104"
								},
								{
									"begin": 3572,
									"end": 3604,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "49"
								},
								{
									"begin": 3572,
									"end": 3604,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3572,
									"end": 3604,
									"name": "tag",
									"source": 13,
									"value": "104"
								},
								{
									"begin": 3572,
									"end": 3604,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3613,
									"end": 3678,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "105"
								},
								{
									"begin": 3671,
									"end": 3677,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 3663,
									"end": 3669,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 3657,
									"end": 3661,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 3613,
									"end": 3678,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "48"
								},
								{
									"begin": 3613,
									"end": 3678,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3613,
									"end": 3678,
									"name": "tag",
									"source": 13,
									"value": "105"
								},
								{
									"begin": 3613,
									"end": 3678,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3548,
									"end": 3684,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3495,
									"end": 3684,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3495,
									"end": 3684,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3495,
									"end": 3684,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3690,
									"end": 3876,
									"name": "tag",
									"source": 13,
									"value": "51"
								},
								{
									"begin": 3690,
									"end": 3876,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "tag",
									"source": 13,
									"value": "107"
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3767,
									"end": 3770,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 3760,
									"end": 3765,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 3757,
									"end": 3771,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "109"
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 3821,
									"end": 3860,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "110"
								},
								{
									"begin": 3858,
									"end": 3859,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 3851,
									"end": 3856,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 3821,
									"end": 3860,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "50"
								},
								{
									"begin": 3821,
									"end": 3860,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3821,
									"end": 3860,
									"name": "tag",
									"source": 13,
									"value": "110"
								},
								{
									"begin": 3821,
									"end": 3860,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3794,
									"end": 3795,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 3787,
									"end": 3792,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 3783,
									"end": 3796,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 3774,
									"end": 3796,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3774,
									"end": 3796,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "107"
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "tag",
									"source": 13,
									"value": "109"
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3690,
									"end": 3876,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3690,
									"end": 3876,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3690,
									"end": 3876,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3882,
									"end": 4425,
									"name": "tag",
									"source": 13,
									"value": "52"
								},
								{
									"begin": 3882,
									"end": 4425,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3983,
									"end": 3985,
									"name": "PUSH",
									"source": 13,
									"value": "1F"
								},
								{
									"begin": 3978,
									"end": 3981,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 3975,
									"end": 3986,
									"name": "GT",
									"source": 13
								},
								{
									"begin": 3972,
									"end": 4418,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 3972,
									"end": 4418,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "112"
								},
								{
									"begin": 3972,
									"end": 4418,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 4017,
									"end": 4055,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "113"
								},
								{
									"begin": 4049,
									"end": 4054,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 4017,
									"end": 4055,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 4017,
									"end": 4055,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 4017,
									"end": 4055,
									"name": "tag",
									"source": 13,
									"value": "113"
								},
								{
									"begin": 4017,
									"end": 4055,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4101,
									"end": 4130,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "114"
								},
								{
									"begin": 4119,
									"end": 4129,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 4101,
									"end": 4130,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "41"
								},
								{
									"begin": 4101,
									"end": 4130,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 4101,
									"end": 4130,
									"name": "tag",
									"source": 13,
									"value": "114"
								},
								{
									"begin": 4101,
									"end": 4130,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4091,
									"end": 4099,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 4087,
									"end": 4131,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 4284,
									"end": 4286,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 4272,
									"end": 4282,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 4269,
									"end": 4287,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 4266,
									"end": 4315,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 4266,
									"end": 4315,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "115"
								},
								{
									"begin": 4266,
									"end": 4315,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 4305,
									"end": 4313,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 4290,
									"end": 4313,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 4290,
									"end": 4313,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4266,
									"end": 4315,
									"name": "tag",
									"source": 13,
									"value": "115"
								},
								{
									"begin": 4266,
									"end": 4315,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4328,
									"end": 4408,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "116"
								},
								{
									"begin": 4384,
									"end": 4406,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "117"
								},
								{
									"begin": 4402,
									"end": 4405,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 4384,
									"end": 4406,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "41"
								},
								{
									"begin": 4384,
									"end": 4406,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 4384,
									"end": 4406,
									"name": "tag",
									"source": 13,
									"value": "117"
								},
								{
									"begin": 4384,
									"end": 4406,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4374,
									"end": 4382,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 4370,
									"end": 4407,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 4357,
									"end": 4368,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 4328,
									"end": 4408,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "51"
								},
								{
									"begin": 4328,
									"end": 4408,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 4328,
									"end": 4408,
									"name": "tag",
									"source": 13,
									"value": "116"
								},
								{
									"begin": 4328,
									"end": 4408,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3987,
									"end": 4418,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3987,
									"end": 4418,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3972,
									"end": 4418,
									"name": "tag",
									"source": 13,
									"value": "112"
								},
								{
									"begin": 3972,
									"end": 4418,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3882,
									"end": 4425,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3882,
									"end": 4425,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3882,
									"end": 4425,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3882,
									"end": 4425,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "tag",
									"source": 13,
									"value": "53"
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4485,
									"end": 4493,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 4535,
									"end": 4540,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 4529,
									"end": 4533,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 4525,
									"end": 4541,
									"name": "SHR",
									"source": 13
								},
								{
									"begin": 4504,
									"end": 4541,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 4504,
									"end": 4541,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4431,
									"end": 4548,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "tag",
									"source": 13,
									"value": "54"
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4598,
									"end": 4604,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 4631,
									"end": 4682,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "120"
								},
								{
									"begin": 4679,
									"end": 4680,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 4675,
									"end": 4681,
									"name": "NOT",
									"source": 13
								},
								{
									"begin": 4667,
									"end": 4672,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 4664,
									"end": 4665,
									"name": "PUSH",
									"source": 13,
									"value": "8"
								},
								{
									"begin": 4660,
									"end": 4673,
									"name": "MUL",
									"source": 13
								},
								{
									"begin": 4631,
									"end": 4682,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "53"
								},
								{
									"begin": 4631,
									"end": 4682,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 4631,
									"end": 4682,
									"name": "tag",
									"source": 13,
									"value": "120"
								},
								{
									"begin": 4631,
									"end": 4682,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4627,
									"end": 4683,
									"name": "NOT",
									"source": 13
								},
								{
									"begin": 4712,
									"end": 4716,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 4706,
									"end": 4710,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 4702,
									"end": 4717,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 4692,
									"end": 4717,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 4692,
									"end": 4717,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4605,
									"end": 4723,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4554,
									"end": 4723,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "tag",
									"source": 13,
									"value": "55"
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4804,
									"end": 4808,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 4950,
									"end": 4979,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "122"
								},
								{
									"begin": 4975,
									"end": 4978,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 4969,
									"end": 4973,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 4950,
									"end": 4979,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "54"
								},
								{
									"begin": 4950,
									"end": 4979,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 4950,
									"end": 4979,
									"name": "tag",
									"source": 13,
									"value": "122"
								},
								{
									"begin": 4950,
									"end": 4979,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4942,
									"end": 4979,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 4942,
									"end": 4979,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5012,
									"end": 5015,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 5009,
									"end": 5010,
									"name": "PUSH",
									"source": 13,
									"value": "2"
								},
								{
									"begin": 5005,
									"end": 5016,
									"name": "MUL",
									"source": 13
								},
								{
									"begin": 4999,
									"end": 5003,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 4996,
									"end": 5017,
									"name": "OR",
									"source": 13
								},
								{
									"begin": 4988,
									"end": 5017,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 4988,
									"end": 5017,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4728,
									"end": 5023,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 5028,
									"end": 6423,
									"name": "tag",
									"source": 13,
									"value": "9"
								},
								{
									"begin": 5028,
									"end": 6423,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 5145,
									"end": 5182,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "124"
								},
								{
									"begin": 5178,
									"end": 5181,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 5145,
									"end": 5182,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "36"
								},
								{
									"begin": 5145,
									"end": 5182,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 5145,
									"end": 5182,
									"name": "tag",
									"source": 13,
									"value": "124"
								},
								{
									"begin": 5145,
									"end": 5182,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 5247,
									"end": 5265,
									"name": "PUSH",
									"source": 13,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 5239,
									"end": 5245,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 5236,
									"end": 5266,
									"name": "GT",
									"source": 13
								},
								{
									"begin": 5233,
									"end": 5289,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 5233,
									"end": 5289,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "125"
								},
								{
									"begin": 5233,
									"end": 5289,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 5269,
									"end": 5287,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "126"
								},
								{
									"begin": 5269,
									"end": 5287,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "37"
								},
								{
									"begin": 5269,
									"end": 5287,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 5269,
									"end": 5287,
									"name": "tag",
									"source": 13,
									"value": "126"
								},
								{
									"begin": 5269,
									"end": 5287,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 5233,
									"end": 5289,
									"name": "tag",
									"source": 13,
									"value": "125"
								},
								{
									"begin": 5233,
									"end": 5289,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 5313,
									"end": 5351,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "127"
								},
								{
									"begin": 5345,
									"end": 5349,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 5339,
									"end": 5350,
									"name": "SLOAD",
									"source": 13
								},
								{
									"begin": 5313,
									"end": 5351,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "39"
								},
								{
									"begin": 5313,
									"end": 5351,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 5313,
									"end": 5351,
									"name": "tag",
									"source": 13,
									"value": "127"
								},
								{
									"begin": 5313,
									"end": 5351,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 5398,
									"end": 5465,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "128"
								},
								{
									"begin": 5458,
									"end": 5464,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 5450,
									"end": 5456,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 5444,
									"end": 5448,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 5398,
									"end": 5465,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "52"
								},
								{
									"begin": 5398,
									"end": 5465,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 5398,
									"end": 5465,
									"name": "tag",
									"source": 13,
									"value": "128"
								},
								{
									"begin": 5398,
									"end": 5465,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 5492,
									"end": 5493,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 5516,
									"end": 5520,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 5503,
									"end": 5520,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 5503,
									"end": 5520,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5548,
									"end": 5550,
									"name": "PUSH",
									"source": 13,
									"value": "1F"
								},
								{
									"begin": 5540,
									"end": 5546,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 5537,
									"end": 5551,
									"name": "GT",
									"source": 13
								},
								{
									"begin": 5565,
									"end": 5566,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "EQ",
									"source": 13
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "130"
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 6222,
									"end": 6223,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 6239,
									"end": 6245,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 6236,
									"end": 6313,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 6236,
									"end": 6313,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "131"
								},
								{
									"begin": 6236,
									"end": 6313,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 6288,
									"end": 6297,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 6283,
									"end": 6286,
									"name": "DUP8",
									"source": 13
								},
								{
									"begin": 6279,
									"end": 6298,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 6273,
									"end": 6299,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 6264,
									"end": 6299,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 6264,
									"end": 6299,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6236,
									"end": 6313,
									"name": "tag",
									"source": 13,
									"value": "131"
								},
								{
									"begin": 6236,
									"end": 6313,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 6339,
									"end": 6406,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "132"
								},
								{
									"begin": 6399,
									"end": 6405,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 6392,
									"end": 6397,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 6339,
									"end": 6406,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "55"
								},
								{
									"begin": 6339,
									"end": 6406,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 6339,
									"end": 6406,
									"name": "tag",
									"source": 13,
									"value": "132"
								},
								{
									"begin": 6339,
									"end": 6406,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 6333,
									"end": 6337,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 6326,
									"end": 6407,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 6195,
									"end": 6417,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5530,
									"end": 6417,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "129"
								},
								{
									"begin": 5530,
									"end": 6417,
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "tag",
									"source": 13,
									"value": "130"
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 5612,
									"end": 5616,
									"name": "PUSH",
									"source": 13,
									"value": "1F"
								},
								{
									"begin": 5608,
									"end": 5617,
									"name": "NOT",
									"source": 13
								},
								{
									"begin": 5600,
									"end": 5606,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 5596,
									"end": 5618,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 5646,
									"end": 5683,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "133"
								},
								{
									"begin": 5678,
									"end": 5682,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 5646,
									"end": 5683,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 5646,
									"end": 5683,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 5646,
									"end": 5683,
									"name": "tag",
									"source": 13,
									"value": "133"
								},
								{
									"begin": 5646,
									"end": 5683,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 5705,
									"end": 5706,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "tag",
									"source": 13,
									"value": "134"
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 5733,
									"end": 5740,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 5730,
									"end": 5731,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 5727,
									"end": 5741,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "136"
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 5812,
									"end": 5821,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 5807,
									"end": 5810,
									"name": "DUP10",
									"source": 13
								},
								{
									"begin": 5803,
									"end": 5822,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 5797,
									"end": 5823,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 5789,
									"end": 5795,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 5782,
									"end": 5824,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 5863,
									"end": 5864,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 5855,
									"end": 5861,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 5851,
									"end": 5865,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 5841,
									"end": 5865,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 5841,
									"end": 5865,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5910,
									"end": 5912,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 5899,
									"end": 5908,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 5895,
									"end": 5913,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 5882,
									"end": 5913,
									"name": "SWAP5",
									"source": 13
								},
								{
									"begin": 5882,
									"end": 5913,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5756,
									"end": 5760,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 5753,
									"end": 5754,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 5749,
									"end": 5761,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 5744,
									"end": 5761,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 5744,
									"end": 5761,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "134"
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "tag",
									"source": 13,
									"value": "136"
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 5955,
									"end": 5961,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 5946,
									"end": 5953,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 5943,
									"end": 5962,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 5940,
									"end": 6119,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 5940,
									"end": 6119,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "137"
								},
								{
									"begin": 5940,
									"end": 6119,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 6013,
									"end": 6022,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 6008,
									"end": 6011,
									"name": "DUP10",
									"source": 13
								},
								{
									"begin": 6004,
									"end": 6023,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 5998,
									"end": 6024,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 6056,
									"end": 6104,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "138"
								},
								{
									"begin": 6098,
									"end": 6102,
									"name": "PUSH",
									"source": 13,
									"value": "1F"
								},
								{
									"begin": 6090,
									"end": 6096,
									"name": "DUP10",
									"source": 13
								},
								{
									"begin": 6086,
									"end": 6103,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 6075,
									"end": 6084,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 6056,
									"end": 6104,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "54"
								},
								{
									"begin": 6056,
									"end": 6104,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 6056,
									"end": 6104,
									"name": "tag",
									"source": 13,
									"value": "138"
								},
								{
									"begin": 6056,
									"end": 6104,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 6048,
									"end": 6054,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 6041,
									"end": 6105,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 5963,
									"end": 6119,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5940,
									"end": 6119,
									"name": "tag",
									"source": 13,
									"value": "137"
								},
								{
									"begin": 5940,
									"end": 6119,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 6165,
									"end": 6166,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 6161,
									"end": 6162,
									"name": "PUSH",
									"source": 13,
									"value": "2"
								},
								{
									"begin": 6153,
									"end": 6159,
									"name": "DUP9",
									"source": 13
								},
								{
									"begin": 6149,
									"end": 6163,
									"name": "MUL",
									"source": 13
								},
								{
									"begin": 6145,
									"end": 6167,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 6139,
									"end": 6143,
									"name": "DUP9",
									"source": 13
								},
								{
									"begin": 6132,
									"end": 6168,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 5567,
									"end": 6178,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5567,
									"end": 6178,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5567,
									"end": 6178,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5530,
									"end": 6417,
									"name": "tag",
									"source": 13,
									"value": "129"
								},
								{
									"begin": 5530,
									"end": 6417,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 5530,
									"end": 6417,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5120,
									"end": 6423,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5120,
									"end": 6423,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5120,
									"end": 6423,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5028,
									"end": 6423,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5028,
									"end": 6423,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5028,
									"end": 6423,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 6429,
									"end": 6527,
									"name": "tag",
									"source": 13,
									"value": "56"
								},
								{
									"begin": 6429,
									"end": 6527,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 6480,
									"end": 6486,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 6514,
									"end": 6519,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 6508,
									"end": 6520,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 6498,
									"end": 6520,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 6498,
									"end": 6520,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6429,
									"end": 6527,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 6429,
									"end": 6527,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 6429,
									"end": 6527,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6429,
									"end": 6527,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 6533,
									"end": 6680,
									"name": "tag",
									"source": 13,
									"value": "57"
								},
								{
									"begin": 6533,
									"end": 6680,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 6634,
									"end": 6645,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 6671,
									"end": 6674,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 6656,
									"end": 6674,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 6656,
									"end": 6674,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6533,
									"end": 6680,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 6533,
									"end": 6680,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 6533,
									"end": 6680,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6533,
									"end": 6680,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6533,
									"end": 6680,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 6686,
									"end": 6825,
									"name": "tag",
									"source": 13,
									"value": "58"
								},
								{
									"begin": 6686,
									"end": 6825,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 6775,
									"end": 6781,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 6770,
									"end": 6773,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 6765,
									"end": 6768,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 6759,
									"end": 6782,
									"name": "MCOPY",
									"source": 13
								},
								{
									"begin": 6816,
									"end": 6817,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 6807,
									"end": 6813,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 6802,
									"end": 6805,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 6798,
									"end": 6814,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 6791,
									"end": 6818,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 6686,
									"end": 6825,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6686,
									"end": 6825,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6686,
									"end": 6825,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6686,
									"end": 6825,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 6831,
									"end": 7217,
									"name": "tag",
									"source": 13,
									"value": "59"
								},
								{
									"begin": 6831,
									"end": 7217,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 6935,
									"end": 6938,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 6963,
									"end": 7001,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "143"
								},
								{
									"begin": 6995,
									"end": 7000,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 6963,
									"end": 7001,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "56"
								},
								{
									"begin": 6963,
									"end": 7001,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 6963,
									"end": 7001,
									"name": "tag",
									"source": 13,
									"value": "143"
								},
								{
									"begin": 6963,
									"end": 7001,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 7017,
									"end": 7105,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "144"
								},
								{
									"begin": 7098,
									"end": 7104,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 7093,
									"end": 7096,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 7017,
									"end": 7105,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "57"
								},
								{
									"begin": 7017,
									"end": 7105,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 7017,
									"end": 7105,
									"name": "tag",
									"source": 13,
									"value": "144"
								},
								{
									"begin": 7017,
									"end": 7105,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 7010,
									"end": 7105,
									"name": "SWAP4",
									"source": 13
								},
								{
									"begin": 7010,
									"end": 7105,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7114,
									"end": 7179,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "145"
								},
								{
									"begin": 7172,
									"end": 7178,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 7167,
									"end": 7170,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 7160,
									"end": 7164,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 7153,
									"end": 7158,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 7149,
									"end": 7165,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 7114,
									"end": 7179,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "58"
								},
								{
									"begin": 7114,
									"end": 7179,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 7114,
									"end": 7179,
									"name": "tag",
									"source": 13,
									"value": "145"
								},
								{
									"begin": 7114,
									"end": 7179,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 7204,
									"end": 7210,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 7199,
									"end": 7202,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 7195,
									"end": 7211,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 7188,
									"end": 7211,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 7188,
									"end": 7211,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6939,
									"end": 7217,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6831,
									"end": 7217,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 6831,
									"end": 7217,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 6831,
									"end": 7217,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6831,
									"end": 7217,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6831,
									"end": 7217,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 7223,
									"end": 7494,
									"name": "tag",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 7223,
									"end": 7494,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 7353,
									"end": 7356,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 7375,
									"end": 7468,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "147"
								},
								{
									"begin": 7464,
									"end": 7467,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 7455,
									"end": 7461,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 7375,
									"end": 7468,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "59"
								},
								{
									"begin": 7375,
									"end": 7468,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 7375,
									"end": 7468,
									"name": "tag",
									"source": 13,
									"value": "147"
								},
								{
									"begin": 7375,
									"end": 7468,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 7368,
									"end": 7468,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 7368,
									"end": 7468,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7485,
									"end": 7488,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 7478,
									"end": 7488,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 7478,
									"end": 7488,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7223,
									"end": 7494,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 7223,
									"end": 7494,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 7223,
									"end": 7494,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7223,
									"end": 7494,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7223,
									"end": 7494,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 7500,
									"end": 7622,
									"name": "tag",
									"source": 13,
									"value": "60"
								},
								{
									"begin": 7500,
									"end": 7622,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 7573,
									"end": 7597,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "149"
								},
								{
									"begin": 7591,
									"end": 7596,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 7573,
									"end": 7597,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "44"
								},
								{
									"begin": 7573,
									"end": 7597,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 7573,
									"end": 7597,
									"name": "tag",
									"source": 13,
									"value": "149"
								},
								{
									"begin": 7573,
									"end": 7597,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 7566,
									"end": 7571,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 7563,
									"end": 7598,
									"name": "EQ",
									"source": 13
								},
								{
									"begin": 7553,
									"end": 7616,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "150"
								},
								{
									"begin": 7553,
									"end": 7616,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 7612,
									"end": 7613,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 7609,
									"end": 7610,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 7602,
									"end": 7614,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 7553,
									"end": 7616,
									"name": "tag",
									"source": 13,
									"value": "150"
								},
								{
									"begin": 7553,
									"end": 7616,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 7500,
									"end": 7622,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7500,
									"end": 7622,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 7628,
									"end": 7771,
									"name": "tag",
									"source": 13,
									"value": "61"
								},
								{
									"begin": 7628,
									"end": 7771,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 7685,
									"end": 7690,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 7716,
									"end": 7722,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 7710,
									"end": 7723,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 7701,
									"end": 7723,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 7701,
									"end": 7723,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7732,
									"end": 7765,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "152"
								},
								{
									"begin": 7759,
									"end": 7764,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 7732,
									"end": 7765,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "60"
								},
								{
									"begin": 7732,
									"end": 7765,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 7732,
									"end": 7765,
									"name": "tag",
									"source": 13,
									"value": "152"
								},
								{
									"begin": 7732,
									"end": 7765,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 7628,
									"end": 7771,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 7628,
									"end": 7771,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 7628,
									"end": 7771,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7628,
									"end": 7771,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7628,
									"end": 7771,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 7777,
									"end": 8128,
									"name": "tag",
									"source": 13,
									"value": "27"
								},
								{
									"begin": 7777,
									"end": 8128,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 7847,
									"end": 7853,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 7896,
									"end": 7898,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 7884,
									"end": 7893,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 7875,
									"end": 7882,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 7871,
									"end": 7894,
									"name": "SUB",
									"source": 13
								},
								{
									"begin": 7867,
									"end": 7899,
									"name": "SLT",
									"source": 13
								},
								{
									"begin": 7864,
									"end": 7983,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 7864,
									"end": 7983,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "154"
								},
								{
									"begin": 7864,
									"end": 7983,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 7902,
									"end": 7981,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "155"
								},
								{
									"begin": 7902,
									"end": 7981,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "30"
								},
								{
									"begin": 7902,
									"end": 7981,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 7902,
									"end": 7981,
									"name": "tag",
									"source": 13,
									"value": "155"
								},
								{
									"begin": 7902,
									"end": 7981,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 7864,
									"end": 7983,
									"name": "tag",
									"source": 13,
									"value": "154"
								},
								{
									"begin": 7864,
									"end": 7983,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 8022,
									"end": 8023,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 8047,
									"end": 8111,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "156"
								},
								{
									"begin": 8103,
									"end": 8110,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 8094,
									"end": 8100,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 8083,
									"end": 8092,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 8079,
									"end": 8101,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 8047,
									"end": 8111,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "61"
								},
								{
									"begin": 8047,
									"end": 8111,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 8047,
									"end": 8111,
									"name": "tag",
									"source": 13,
									"value": "156"
								},
								{
									"begin": 8047,
									"end": 8111,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 8037,
									"end": 8111,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 8037,
									"end": 8111,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7993,
									"end": 8121,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7777,
									"end": 8128,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 7777,
									"end": 8128,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 7777,
									"end": 8128,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7777,
									"end": 8128,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7777,
									"end": 8128,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 254,
									"end": 2224,
									"name": "tag",
									"source": 12,
									"value": "17"
								},
								{
									"begin": 254,
									"end": 2224,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 254,
									"end": 2224,
									"name": "PUSH",
									"source": 12,
									"value": "80"
								},
								{
									"begin": 254,
									"end": 2224,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 254,
									"end": 2224,
									"name": "PUSH",
									"source": 12,
									"value": "A0"
								},
								{
									"begin": 254,
									"end": 2224,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 254,
									"end": 2224,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 254,
									"end": 2224,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 254,
									"end": 2224,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 254,
									"end": 2224,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 254,
									"end": 2224,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 254,
									"end": 2224,
									"name": "ASSIGNIMMUTABLE",
									"source": 12,
									"value": "1072"
								},
								{
									"begin": 254,
									"end": 2224,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 254,
									"end": 2224,
									"name": "ASSIGNIMMUTABLE",
									"source": 12,
									"value": "1070"
								},
								{
									"begin": 254,
									"end": 2224,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 254,
									"end": 2224,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 254,
									"end": 2224,
									"name": "RETURN",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122003634230a2ae1b2e8a1dc9432523ae5c48734f5090ac093502859b70f72cf95564736f6c63430008190033",
									".code": [
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "tag",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "SHR",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "866C99E2"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "BA087652"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "CE96CB77"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "CE96CB77"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "25"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "D905777E"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "DD62ED3E"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "27"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "EF8B30F7"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "28"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "tag",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "BA087652"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "C63D75B6"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "23"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "C6E6F592"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "tag",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "866C99E2"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "16"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "94BF804D"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "95D89B41"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "18"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "A9059CBB"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "B3D7F6B9"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "B460AF94"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "tag",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "23B872DD"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "402D267D"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "402D267D"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "4CDAD506"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "13"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "6E553F65"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "70A08231"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "15"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "tag",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "23B872DD"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "9"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "313CE567"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "10"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "38D52E0F"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "tag",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "1E1D114"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "6FDDE03"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "7A2D13A"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "95EA7B3"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "A28A477"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "18160DDD"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "8"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "tag",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 254,
											"end": 2224,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "tag",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "34"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "35"
										},
										{
											"begin": 5780,
											"end": 5896,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "tag",
											"source": 5,
											"value": "34"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "36"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 5780,
											"end": 5896,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "tag",
											"source": 5,
											"value": "36"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "tag",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "42"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "43"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 6152,
											"end": 6300,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "tag",
											"source": 5,
											"value": "43"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "45"
										},
										{
											"begin": 6152,
											"end": 6300,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "tag",
											"source": 5,
											"value": "42"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "46"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 6152,
											"end": 6300,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "tag",
											"source": 5,
											"value": "46"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "52"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "tag",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "53"
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "54"
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 7418,
											"end": 7565,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "tag",
											"source": 5,
											"value": "54"
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 7418,
											"end": 7565,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "tag",
											"source": 5,
											"value": "53"
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "56"
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 7418,
											"end": 7565,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "tag",
											"source": 5,
											"value": "56"
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "57"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 3144,
											"end": 3241,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 3,
											"value": "57"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 3144,
											"end": 3241,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "61"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "62"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 3,
											"value": "61"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "63"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "52"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "tag",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "65"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 5441,
											"end": 5592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "tag",
											"source": 5,
											"value": "65"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "68"
										},
										{
											"begin": 5441,
											"end": 5592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "tag",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "tag",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "69"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "70"
										},
										{
											"begin": 5636,
											"end": 5730,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "tag",
											"source": 5,
											"value": "69"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "71"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 5636,
											"end": 5730,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "tag",
											"source": 5,
											"value": "71"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "tag",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "73"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 6349,
											"end": 6457,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "tag",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 6349,
											"end": 6457,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "tag",
											"source": 5,
											"value": "73"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "77"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 6349,
											"end": 6457,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "tag",
											"source": 5,
											"value": "77"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "tag",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "79"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 7617,
											"end": 7763,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "tag",
											"source": 5,
											"value": "79"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 7617,
											"end": 7763,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "tag",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "81"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 7617,
											"end": 7763,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "tag",
											"source": 5,
											"value": "81"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "tag",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "82"
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "83"
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "84"
										},
										{
											"begin": 635,
											"end": 1131,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "tag",
											"source": 12,
											"value": "83"
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "85"
										},
										{
											"begin": 635,
											"end": 1131,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "tag",
											"source": 12,
											"value": "82"
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "86"
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "37"
										},
										{
											"begin": 635,
											"end": 1131,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "tag",
											"source": 12,
											"value": "86"
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "87"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "88"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "75"
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 3,
											"value": "88"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "89"
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 3,
											"value": "87"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "90"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 3,
											"value": "90"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 285,
											"end": 306,
											"name": "tag",
											"source": 12,
											"value": "16"
										},
										{
											"begin": 285,
											"end": 306,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 285,
											"end": 306,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "91"
										},
										{
											"begin": 285,
											"end": 306,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "92"
										},
										{
											"begin": 285,
											"end": 306,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 285,
											"end": 306,
											"name": "tag",
											"source": 12,
											"value": "91"
										},
										{
											"begin": 285,
											"end": 306,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 285,
											"end": 306,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 285,
											"end": 306,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 285,
											"end": 306,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "93"
										},
										{
											"begin": 285,
											"end": 306,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 285,
											"end": 306,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 285,
											"end": 306,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "94"
										},
										{
											"begin": 285,
											"end": 306,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 285,
											"end": 306,
											"name": "tag",
											"source": 12,
											"value": "93"
										},
										{
											"begin": 285,
											"end": 306,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 285,
											"end": 306,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 285,
											"end": 306,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 285,
											"end": 306,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 285,
											"end": 306,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 285,
											"end": 306,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 285,
											"end": 306,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 285,
											"end": 306,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "tag",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "95"
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "96"
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "84"
										},
										{
											"begin": 1572,
											"end": 1699,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "tag",
											"source": 12,
											"value": "96"
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "97"
										},
										{
											"begin": 1572,
											"end": 1699,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "tag",
											"source": 12,
											"value": "95"
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "98"
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "37"
										},
										{
											"begin": 1572,
											"end": 1699,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "tag",
											"source": 12,
											"value": "98"
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "99"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2276,
											"end": 2369,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 3,
											"value": "99"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "101"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 2276,
											"end": 2369,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 3,
											"value": "101"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "103"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 3,
											"value": "103"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "104"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "105"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "52"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 3,
											"value": "105"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "tag",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "106"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "107"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 7221,
											"end": 7364,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "tag",
											"source": 5,
											"value": "107"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "108"
										},
										{
											"begin": 7221,
											"end": 7364,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "tag",
											"source": 5,
											"value": "106"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "109"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 7221,
											"end": 7364,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "tag",
											"source": 5,
											"value": "109"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "tag",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "110"
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "111"
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "112"
										},
										{
											"begin": 1178,
											"end": 1564,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "tag",
											"source": 12,
											"value": "111"
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "113"
										},
										{
											"begin": 1178,
											"end": 1564,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "tag",
											"source": 12,
											"value": "110"
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "114"
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "37"
										},
										{
											"begin": 1178,
											"end": 1564,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "tag",
											"source": 12,
											"value": "114"
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "tag",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "115"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "116"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "112"
										},
										{
											"begin": 9353,
											"end": 9758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "tag",
											"source": 5,
											"value": "116"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "117"
										},
										{
											"begin": 9353,
											"end": 9758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "tag",
											"source": 5,
											"value": "115"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "118"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 9353,
											"end": 9758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "tag",
											"source": 5,
											"value": "118"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "tag",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "119"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "120"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 6503,
											"end": 6608,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "tag",
											"source": 5,
											"value": "120"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "121"
										},
										{
											"begin": 6503,
											"end": 6608,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "tag",
											"source": 5,
											"value": "119"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "122"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 6503,
											"end": 6608,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "tag",
											"source": 5,
											"value": "122"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "tag",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "123"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "124"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 5950,
											"end": 6098,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "tag",
											"source": 5,
											"value": "124"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "125"
										},
										{
											"begin": 5950,
											"end": 6098,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "tag",
											"source": 5,
											"value": "123"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "126"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 5950,
											"end": 6098,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "tag",
											"source": 5,
											"value": "126"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "tag",
											"source": 5,
											"value": "25"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "127"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "128"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 6658,
											"end": 6811,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "tag",
											"source": 5,
											"value": "128"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "129"
										},
										{
											"begin": 6658,
											"end": 6811,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "tag",
											"source": 5,
											"value": "127"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "130"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 6658,
											"end": 6811,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "tag",
											"source": 5,
											"value": "130"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "tag",
											"source": 5,
											"value": "26"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "131"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "132"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 6859,
											"end": 6971,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "tag",
											"source": 5,
											"value": "132"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 6859,
											"end": 6971,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "tag",
											"source": 5,
											"value": "131"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "134"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 6859,
											"end": 6971,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "tag",
											"source": 5,
											"value": "134"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "135"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "136"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "137"
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 3,
											"value": "136"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "138"
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 3,
											"value": "135"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "139"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 3,
											"value": "139"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "tag",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "140"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "141"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 7024,
											"end": 7171,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "tag",
											"source": 5,
											"value": "141"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "142"
										},
										{
											"begin": 7024,
											"end": 7171,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "tag",
											"source": 5,
											"value": "140"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "143"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 7024,
											"end": 7171,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "tag",
											"source": 5,
											"value": "143"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "tag",
											"source": 5,
											"value": "35"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5832,
											"end": 5839,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5858,
											"end": 5864,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "1070"
										},
										{
											"begin": 5858,
											"end": 5874,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5858,
											"end": 5874,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5874,
											"name": "PUSH",
											"source": 5,
											"value": "70A08231"
										},
										{
											"begin": 5883,
											"end": 5887,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "145"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 5858,
											"end": 5889,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "tag",
											"source": 5,
											"value": "145"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "STATICCALL",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "147"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "tag",
											"source": 5,
											"value": "147"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "148"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "149"
										},
										{
											"begin": 5858,
											"end": 5889,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "tag",
											"source": 5,
											"value": "148"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5851,
											"end": 5889,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5851,
											"end": 5889,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2119,
											"end": 2132,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2151,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "151"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "152"
										},
										{
											"begin": 2144,
											"end": 2156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "151"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "153"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "152"
										},
										{
											"begin": 2144,
											"end": 2156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "153"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "154"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "155"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "154"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "155"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "156"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "156"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "154"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "tag",
											"source": 5,
											"value": "45"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6222,
											"end": 6229,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6248,
											"end": 6293,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "158"
										},
										{
											"begin": 6265,
											"end": 6271,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6273,
											"end": 6292,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6248,
											"end": 6264,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "159"
										},
										{
											"begin": 6248,
											"end": 6293,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6248,
											"end": 6293,
											"name": "tag",
											"source": 5,
											"value": "158"
										},
										{
											"begin": 6248,
											"end": 6293,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6241,
											"end": 6293,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6241,
											"end": 6293,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4366,
											"end": 4370,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4382,
											"end": 4395,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4398,
											"end": 4410,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "161"
										},
										{
											"begin": 4398,
											"end": 4408,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "162"
										},
										{
											"begin": 4398,
											"end": 4410,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4398,
											"end": 4410,
											"name": "tag",
											"source": 3,
											"value": "161"
										},
										{
											"begin": 4398,
											"end": 4410,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4382,
											"end": 4410,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4382,
											"end": 4410,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "163"
										},
										{
											"begin": 4429,
											"end": 4434,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4436,
											"end": 4443,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4445,
											"end": 4450,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4420,
											"end": 4428,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "164"
										},
										{
											"begin": 4420,
											"end": 4451,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "tag",
											"source": 3,
											"value": "163"
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4468,
											"end": 4472,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "tag",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7488,
											"end": 7495,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7514,
											"end": 7558,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "166"
										},
										{
											"begin": 7531,
											"end": 7537,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7539,
											"end": 7557,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 7514,
											"end": 7530,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "167"
										},
										{
											"begin": 7514,
											"end": 7558,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7514,
											"end": 7558,
											"name": "tag",
											"source": 5,
											"value": "166"
										},
										{
											"begin": 7514,
											"end": 7558,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7507,
											"end": 7558,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7507,
											"end": 7558,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3196,
											"end": 3203,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3215,
											"end": 3234,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3215,
											"end": 3234,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 3,
											"value": "63"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5126,
											"end": 5130,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5142,
											"end": 5157,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5160,
											"end": 5172,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "170"
										},
										{
											"begin": 5160,
											"end": 5170,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "162"
										},
										{
											"begin": 5160,
											"end": 5172,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5160,
											"end": 5172,
											"name": "tag",
											"source": 3,
											"value": "170"
										},
										{
											"begin": 5160,
											"end": 5172,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5142,
											"end": 5172,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5142,
											"end": 5172,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "171"
										},
										{
											"begin": 5198,
											"end": 5202,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5204,
											"end": 5211,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5213,
											"end": 5218,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5182,
											"end": 5197,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "172"
										},
										{
											"begin": 5182,
											"end": 5219,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "tag",
											"source": 3,
											"value": "171"
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "173"
										},
										{
											"begin": 5239,
											"end": 5243,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5245,
											"end": 5247,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5249,
											"end": 5254,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5229,
											"end": 5238,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "174"
										},
										{
											"begin": 5229,
											"end": 5255,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "tag",
											"source": 3,
											"value": "173"
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5272,
											"end": 5276,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 5265,
											"end": 5276,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5265,
											"end": 5276,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5265,
											"end": 5276,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "tag",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5522,
											"end": 5527,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5568,
											"end": 5585,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "176"
										},
										{
											"begin": 5568,
											"end": 5583,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "177"
										},
										{
											"begin": 5568,
											"end": 5585,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5568,
											"end": 5585,
											"name": "tag",
											"source": 5,
											"value": "176"
										},
										{
											"begin": 5568,
											"end": 5585,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5546,
											"end": 5565,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "1072"
										},
										{
											"begin": 5546,
											"end": 5585,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "178"
										},
										{
											"begin": 5546,
											"end": 5585,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5546,
											"end": 5585,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5546,
											"end": 5585,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "179"
										},
										{
											"begin": 5546,
											"end": 5585,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5546,
											"end": 5585,
											"name": "tag",
											"source": 5,
											"value": "178"
										},
										{
											"begin": 5546,
											"end": 5585,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5539,
											"end": 5585,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5539,
											"end": 5585,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "tag",
											"source": 5,
											"value": "70"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5682,
											"end": 5689,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5716,
											"end": 5722,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "1070"
										},
										{
											"begin": 5701,
											"end": 5723,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5701,
											"end": 5723,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "tag",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6407,
											"end": 6414,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6433,
											"end": 6450,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6426,
											"end": 6450,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6426,
											"end": 6450,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "tag",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7685,
											"end": 7692,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7711,
											"end": 7756,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "183"
										},
										{
											"begin": 7728,
											"end": 7734,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7736,
											"end": 7755,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7711,
											"end": 7727,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "159"
										},
										{
											"begin": 7711,
											"end": 7756,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7711,
											"end": 7756,
											"name": "tag",
											"source": 5,
											"value": "183"
										},
										{
											"begin": 7711,
											"end": 7756,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7704,
											"end": 7756,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7704,
											"end": 7756,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "tag",
											"source": 12,
											"value": "85"
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 716,
											"end": 723,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 437,
											"end": 447,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 417,
											"end": 447,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 417,
											"end": 447,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 425,
											"end": 432,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 425,
											"end": 432,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 425,
											"end": 432,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 425,
											"end": 432,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 425,
											"end": 432,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 425,
											"end": 432,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 425,
											"end": 432,
											"name": "EXP",
											"source": 12
										},
										{
											"begin": 425,
											"end": 432,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 425,
											"end": 432,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 425,
											"end": 432,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 425,
											"end": 432,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 417,
											"end": 447,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 417,
											"end": 447,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 417,
											"end": 447,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "185"
										},
										{
											"begin": 409,
											"end": 472,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 409,
											"end": 472,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "PUSH",
											"source": 12,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 409,
											"end": 472,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 409,
											"end": 472,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "186"
										},
										{
											"begin": 409,
											"end": 472,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "187"
										},
										{
											"begin": 409,
											"end": 472,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "tag",
											"source": 12,
											"value": "186"
										},
										{
											"begin": 409,
											"end": 472,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 409,
											"end": 472,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "tag",
											"source": 12,
											"value": "185"
										},
										{
											"begin": 409,
											"end": 472,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 747,
											"end": 751,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 735,
											"end": 744,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 735,
											"end": 744,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 735,
											"end": 751,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 735,
											"end": 751,
											"modifierDepth": 1,
											"name": "EXP",
											"source": 12
										},
										{
											"begin": 735,
											"end": 751,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 735,
											"end": 751,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 735,
											"end": 751,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 735,
											"end": 751,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 735,
											"end": 751,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 735,
											"end": 751,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 735,
											"end": 751,
											"modifierDepth": 1,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 735,
											"end": 751,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 751,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 735,
											"end": 751,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 735,
											"end": 751,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 735,
											"end": 751,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 735,
											"end": 751,
											"modifierDepth": 1,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 735,
											"end": 751,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 751,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 735,
											"end": 751,
											"modifierDepth": 1,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 779,
											"end": 780,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 770,
											"end": 776,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 770,
											"end": 780,
											"modifierDepth": 1,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "189"
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "190"
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "191"
										},
										{
											"begin": 762,
											"end": 814,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "tag",
											"source": 12,
											"value": "190"
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "tag",
											"source": 12,
											"value": "189"
										},
										{
											"begin": 762,
											"end": 814,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 824,
											"end": 841,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 844,
											"end": 864,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "192"
										},
										{
											"begin": 855,
											"end": 863,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 844,
											"end": 854,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "76"
										},
										{
											"begin": 844,
											"end": 864,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 844,
											"end": 864,
											"modifierDepth": 1,
											"name": "tag",
											"source": 12,
											"value": "192"
										},
										{
											"begin": 844,
											"end": 864,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 824,
											"end": 864,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 824,
											"end": 864,
											"modifierDepth": 1,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 887,
											"end": 896,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 878,
											"end": 884,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 878,
											"end": 896,
											"modifierDepth": 1,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 874,
											"end": 984,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 874,
											"end": 984,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "193"
										},
										{
											"begin": 874,
											"end": 984,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 945,
											"end": 953,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 955,
											"end": 961,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 963,
											"end": 972,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 919,
											"end": 973,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 919,
											"end": 973,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 919,
											"end": 973,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "79012FB200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 919,
											"end": 973,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 919,
											"end": 973,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 919,
											"end": 973,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 919,
											"end": 973,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 919,
											"end": 973,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "194"
										},
										{
											"begin": 919,
											"end": 973,
											"modifierDepth": 1,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 919,
											"end": 973,
											"modifierDepth": 1,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 919,
											"end": 973,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 919,
											"end": 973,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 919,
											"end": 973,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "195"
										},
										{
											"begin": 919,
											"end": 973,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 919,
											"end": 973,
											"modifierDepth": 1,
											"name": "tag",
											"source": 12,
											"value": "194"
										},
										{
											"begin": 919,
											"end": 973,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 919,
											"end": 973,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 919,
											"end": 973,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 919,
											"end": 973,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 919,
											"end": 973,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 919,
											"end": 973,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 919,
											"end": 973,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 919,
											"end": 973,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 874,
											"end": 984,
											"modifierDepth": 1,
											"name": "tag",
											"source": 12,
											"value": "193"
										},
										{
											"begin": 874,
											"end": 984,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1002,
											"end": 1016,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1019,
											"end": 1041,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "196"
										},
										{
											"begin": 1034,
											"end": 1040,
											"modifierDepth": 1,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 1019,
											"end": 1033,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "142"
										},
										{
											"begin": 1019,
											"end": 1041,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1019,
											"end": 1041,
											"modifierDepth": 1,
											"name": "tag",
											"source": 12,
											"value": "196"
										},
										{
											"begin": 1019,
											"end": 1041,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1002,
											"end": 1041,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1002,
											"end": 1041,
											"modifierDepth": 1,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1051,
											"end": 1074,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "197"
										},
										{
											"begin": 1057,
											"end": 1065,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1067,
											"end": 1073,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1051,
											"end": 1056,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "198"
										},
										{
											"begin": 1051,
											"end": 1074,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1051,
											"end": 1074,
											"modifierDepth": 1,
											"name": "tag",
											"source": 12,
											"value": "197"
										},
										{
											"begin": 1051,
											"end": 1074,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1096,
											"end": 1101,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1084,
											"end": 1093,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 1084,
											"end": 1093,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 1084,
											"end": 1101,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 1084,
											"end": 1101,
											"modifierDepth": 1,
											"name": "EXP",
											"source": 12
										},
										{
											"begin": 1084,
											"end": 1101,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1084,
											"end": 1101,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 1084,
											"end": 1101,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1084,
											"end": 1101,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 1084,
											"end": 1101,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 1084,
											"end": 1101,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 1084,
											"end": 1101,
											"modifierDepth": 1,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1084,
											"end": 1101,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1084,
											"end": 1101,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1084,
											"end": 1101,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1084,
											"end": 1101,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1084,
											"end": 1101,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 1084,
											"end": 1101,
											"modifierDepth": 1,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 1084,
											"end": 1101,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1084,
											"end": 1101,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 1084,
											"end": 1101,
											"modifierDepth": 1,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1118,
											"end": 1124,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1111,
											"end": 1124,
											"modifierDepth": 1,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1111,
											"end": 1124,
											"modifierDepth": 1,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1111,
											"end": 1124,
											"modifierDepth": 1,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1111,
											"end": 1124,
											"modifierDepth": 1,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 635,
											"end": 1131,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 3,
											"value": "89"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3364,
											"end": 3371,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3400,
											"end": 3407,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 285,
											"end": 306,
											"name": "tag",
											"source": 12,
											"value": "92"
										},
										{
											"begin": 285,
											"end": 306,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 285,
											"end": 306,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 285,
											"end": 306,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 285,
											"end": 306,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 285,
											"end": 306,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 285,
											"end": 306,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 285,
											"end": 306,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 285,
											"end": 306,
											"name": "EXP",
											"source": 12
										},
										{
											"begin": 285,
											"end": 306,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 285,
											"end": 306,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 285,
											"end": 306,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 285,
											"end": 306,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 285,
											"end": 306,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 285,
											"end": 306,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "tag",
											"source": 12,
											"value": "97"
										},
										{
											"begin": 1572,
											"end": 1699,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1645,
											"end": 1652,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1671,
											"end": 1692,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1671,
											"end": 1692,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1671,
											"end": 1692,
											"name": "PUSH",
											"source": 12,
											"value": "A9A2322B00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1671,
											"end": 1692,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1671,
											"end": 1692,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1671,
											"end": 1692,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1671,
											"end": 1692,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1671,
											"end": 1692,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1671,
											"end": 1692,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1671,
											"end": 1692,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1671,
											"end": 1692,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1671,
											"end": 1692,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1671,
											"end": 1692,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1671,
											"end": 1692,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2323,
											"end": 2336,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2355,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "202"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "152"
										},
										{
											"begin": 2348,
											"end": 2362,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 3,
											"value": "202"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "203"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "152"
										},
										{
											"begin": 2348,
											"end": 2362,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 3,
											"value": "203"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "204"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "205"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "204"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 3,
											"value": "205"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 3,
											"value": "206"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "206"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 3,
											"value": "204"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 3,
											"value": "104"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3679,
											"end": 3683,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3695,
											"end": 3708,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3711,
											"end": 3723,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "208"
										},
										{
											"begin": 3711,
											"end": 3721,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "162"
										},
										{
											"begin": 3711,
											"end": 3723,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3711,
											"end": 3723,
											"name": "tag",
											"source": 3,
											"value": "208"
										},
										{
											"begin": 3711,
											"end": 3723,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3695,
											"end": 3723,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3695,
											"end": 3723,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3733,
											"end": 3760,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "209"
										},
										{
											"begin": 3743,
											"end": 3748,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3750,
											"end": 3752,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 3754,
											"end": 3759,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 3733,
											"end": 3742,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "174"
										},
										{
											"begin": 3733,
											"end": 3760,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3733,
											"end": 3760,
											"name": "tag",
											"source": 3,
											"value": "209"
										},
										{
											"begin": 3733,
											"end": 3760,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3777,
											"end": 3781,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 3770,
											"end": 3781,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3770,
											"end": 3781,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3770,
											"end": 3781,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "tag",
											"source": 5,
											"value": "108"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7287,
											"end": 7294,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7313,
											"end": 7357,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "211"
										},
										{
											"begin": 7330,
											"end": 7336,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7338,
											"end": 7356,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 7313,
											"end": 7329,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "159"
										},
										{
											"begin": 7313,
											"end": 7357,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7313,
											"end": 7357,
											"name": "tag",
											"source": 5,
											"value": "211"
										},
										{
											"begin": 7313,
											"end": 7357,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7306,
											"end": 7357,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7306,
											"end": 7357,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "tag",
											"source": 12,
											"value": "113"
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1275,
											"end": 1282,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 437,
											"end": 447,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 417,
											"end": 447,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 417,
											"end": 447,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 425,
											"end": 432,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 425,
											"end": 432,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 425,
											"end": 432,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 425,
											"end": 432,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 425,
											"end": 432,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 425,
											"end": 432,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 425,
											"end": 432,
											"name": "EXP",
											"source": 12
										},
										{
											"begin": 425,
											"end": 432,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 425,
											"end": 432,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 425,
											"end": 432,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 425,
											"end": 432,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 417,
											"end": 447,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 417,
											"end": 447,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 417,
											"end": 447,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "213"
										},
										{
											"begin": 409,
											"end": 472,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 409,
											"end": 472,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "PUSH",
											"source": 12,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 409,
											"end": 472,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 409,
											"end": 472,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "214"
										},
										{
											"begin": 409,
											"end": 472,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "187"
										},
										{
											"begin": 409,
											"end": 472,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "tag",
											"source": 12,
											"value": "214"
										},
										{
											"begin": 409,
											"end": 472,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 409,
											"end": 472,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 409,
											"end": 472,
											"name": "tag",
											"source": 12,
											"value": "213"
										},
										{
											"begin": 409,
											"end": 472,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1294,
											"end": 1311,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1314,
											"end": 1332,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "216"
										},
										{
											"begin": 1326,
											"end": 1331,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1314,
											"end": 1325,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "129"
										},
										{
											"begin": 1314,
											"end": 1332,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1314,
											"end": 1332,
											"modifierDepth": 1,
											"name": "tag",
											"source": 12,
											"value": "216"
										},
										{
											"begin": 1314,
											"end": 1332,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1294,
											"end": 1332,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1294,
											"end": 1332,
											"modifierDepth": 1,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1355,
											"end": 1364,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1346,
											"end": 1352,
											"modifierDepth": 1,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 1346,
											"end": 1364,
											"modifierDepth": 1,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 1342,
											"end": 1450,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1342,
											"end": 1450,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "217"
										},
										{
											"begin": 1342,
											"end": 1450,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1414,
											"end": 1419,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1421,
											"end": 1427,
											"modifierDepth": 1,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 1429,
											"end": 1438,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1387,
											"end": 1439,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1387,
											"end": 1439,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1387,
											"end": 1439,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "FE9CCEEC00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1387,
											"end": 1439,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1387,
											"end": 1439,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1387,
											"end": 1439,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1387,
											"end": 1439,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1387,
											"end": 1439,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "218"
										},
										{
											"begin": 1387,
											"end": 1439,
											"modifierDepth": 1,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 1387,
											"end": 1439,
											"modifierDepth": 1,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1387,
											"end": 1439,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1387,
											"end": 1439,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1387,
											"end": 1439,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "195"
										},
										{
											"begin": 1387,
											"end": 1439,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1387,
											"end": 1439,
											"modifierDepth": 1,
											"name": "tag",
											"source": 12,
											"value": "218"
										},
										{
											"begin": 1387,
											"end": 1439,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1387,
											"end": 1439,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1387,
											"end": 1439,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1387,
											"end": 1439,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1387,
											"end": 1439,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1387,
											"end": 1439,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1387,
											"end": 1439,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1387,
											"end": 1439,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1342,
											"end": 1450,
											"modifierDepth": 1,
											"name": "tag",
											"source": 12,
											"value": "217"
										},
										{
											"begin": 1342,
											"end": 1450,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1460,
											"end": 1474,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1477,
											"end": 1500,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "219"
										},
										{
											"begin": 1493,
											"end": 1499,
											"modifierDepth": 1,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1492,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "55"
										},
										{
											"begin": 1477,
											"end": 1500,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1500,
											"modifierDepth": 1,
											"name": "tag",
											"source": 12,
											"value": "219"
										},
										{
											"begin": 1477,
											"end": 1500,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1460,
											"end": 1500,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1460,
											"end": 1500,
											"modifierDepth": 1,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1510,
											"end": 1530,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "220"
										},
										{
											"begin": 1516,
											"end": 1521,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1523,
											"end": 1529,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1510,
											"end": 1515,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "221"
										},
										{
											"begin": 1510,
											"end": 1530,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1510,
											"end": 1530,
											"modifierDepth": 1,
											"name": "tag",
											"source": 12,
											"value": "220"
										},
										{
											"begin": 1510,
											"end": 1530,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1548,
											"end": 1557,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1541,
											"end": 1557,
											"modifierDepth": 1,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1541,
											"end": 1557,
											"modifierDepth": 1,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1541,
											"end": 1557,
											"modifierDepth": 1,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1541,
											"end": 1557,
											"modifierDepth": 1,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1178,
											"end": 1564,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "tag",
											"source": 5,
											"value": "117"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9442,
											"end": 9449,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 9461,
											"end": 9478,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9481,
											"end": 9497,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "223"
										},
										{
											"begin": 9491,
											"end": 9496,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 9481,
											"end": 9490,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 9481,
											"end": 9497,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9481,
											"end": 9497,
											"name": "tag",
											"source": 5,
											"value": "223"
										},
										{
											"begin": 9481,
											"end": 9497,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9461,
											"end": 9497,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9461,
											"end": 9497,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9520,
											"end": 9529,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9511,
											"end": 9517,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 9511,
											"end": 9529,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 9507,
											"end": 9613,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 9507,
											"end": 9613,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "224"
										},
										{
											"begin": 9507,
											"end": 9613,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 9577,
											"end": 9582,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 9584,
											"end": 9590,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 9592,
											"end": 9601,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "PUSH",
											"source": 5,
											"value": "B94ABEEC00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "225"
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "195"
										},
										{
											"begin": 9552,
											"end": 9602,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "tag",
											"source": 5,
											"value": "225"
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 9507,
											"end": 9613,
											"name": "tag",
											"source": 5,
											"value": "224"
										},
										{
											"begin": 9507,
											"end": 9613,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9623,
											"end": 9637,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 9640,
											"end": 9661,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "226"
										},
										{
											"begin": 9654,
											"end": 9660,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 9640,
											"end": 9653,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 9640,
											"end": 9661,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9640,
											"end": 9661,
											"name": "tag",
											"source": 5,
											"value": "226"
										},
										{
											"begin": 9640,
											"end": 9661,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9623,
											"end": 9661,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9623,
											"end": 9661,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9671,
											"end": 9727,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "227"
										},
										{
											"begin": 9681,
											"end": 9693,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "228"
										},
										{
											"begin": 9681,
											"end": 9691,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "162"
										},
										{
											"begin": 9681,
											"end": 9693,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9681,
											"end": 9693,
											"name": "tag",
											"source": 5,
											"value": "228"
										},
										{
											"begin": 9681,
											"end": 9693,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9695,
											"end": 9703,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 9705,
											"end": 9710,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 9712,
											"end": 9718,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 9720,
											"end": 9726,
											"name": "DUP11",
											"source": 5
										},
										{
											"begin": 9671,
											"end": 9680,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "229"
										},
										{
											"begin": 9671,
											"end": 9727,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9671,
											"end": 9727,
											"name": "tag",
											"source": 5,
											"value": "227"
										},
										{
											"begin": 9671,
											"end": 9727,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9745,
											"end": 9751,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9738,
											"end": 9751,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 9738,
											"end": 9751,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9738,
											"end": 9751,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9738,
											"end": 9751,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "tag",
											"source": 5,
											"value": "121"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6558,
											"end": 6565,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6584,
											"end": 6601,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6577,
											"end": 6601,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6577,
											"end": 6601,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "tag",
											"source": 5,
											"value": "125"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6020,
											"end": 6027,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "232"
										},
										{
											"begin": 6063,
											"end": 6069,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6071,
											"end": 6090,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6046,
											"end": 6062,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "167"
										},
										{
											"begin": 6046,
											"end": 6091,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "tag",
											"source": 5,
											"value": "232"
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6039,
											"end": 6091,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6039,
											"end": 6091,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "tag",
											"source": 5,
											"value": "129"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6723,
											"end": 6730,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6749,
											"end": 6804,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "234"
										},
										{
											"begin": 6766,
											"end": 6782,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "235"
										},
										{
											"begin": 6776,
											"end": 6781,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 6766,
											"end": 6775,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "89"
										},
										{
											"begin": 6766,
											"end": 6782,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6766,
											"end": 6782,
											"name": "tag",
											"source": 5,
											"value": "235"
										},
										{
											"begin": 6766,
											"end": 6782,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6784,
											"end": 6803,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6749,
											"end": 6765,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "159"
										},
										{
											"begin": 6749,
											"end": 6804,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6749,
											"end": 6804,
											"name": "tag",
											"source": 5,
											"value": "234"
										},
										{
											"begin": 6749,
											"end": 6804,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6742,
											"end": 6804,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6742,
											"end": 6804,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "tag",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6922,
											"end": 6929,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6948,
											"end": 6964,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "237"
										},
										{
											"begin": 6958,
											"end": 6963,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6948,
											"end": 6957,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "89"
										},
										{
											"begin": 6948,
											"end": 6964,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6948,
											"end": 6964,
											"name": "tag",
											"source": 5,
											"value": "237"
										},
										{
											"begin": 6948,
											"end": 6964,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6941,
											"end": 6964,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6941,
											"end": 6964,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 3,
											"value": "138"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3926,
											"end": 3933,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3963,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3964,
											"end": 3969,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3971,
											"end": 3978,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3945,
											"end": 3979,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3945,
											"end": 3979,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "tag",
											"source": 5,
											"value": "142"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7093,
											"end": 7100,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7119,
											"end": 7164,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "240"
										},
										{
											"begin": 7136,
											"end": 7142,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7144,
											"end": 7163,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7119,
											"end": 7135,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "167"
										},
										{
											"begin": 7119,
											"end": 7164,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7119,
											"end": 7164,
											"name": "tag",
											"source": 5,
											"value": "240"
										},
										{
											"begin": 7119,
											"end": 7164,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7112,
											"end": 7164,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7112,
											"end": 7164,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "tag",
											"source": 5,
											"value": "159"
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10316,
											"end": 10323,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "242"
										},
										{
											"begin": 10372,
											"end": 10373,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 10356,
											"end": 10369,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "243"
										},
										{
											"begin": 10356,
											"end": 10367,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "35"
										},
										{
											"begin": 10356,
											"end": 10369,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10356,
											"end": 10369,
											"name": "tag",
											"source": 5,
											"value": "243"
										},
										{
											"begin": 10356,
											"end": 10369,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10356,
											"end": 10373,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "244"
										},
										{
											"begin": 10356,
											"end": 10373,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 10356,
											"end": 10373,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10356,
											"end": 10373,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "245"
										},
										{
											"begin": 10356,
											"end": 10373,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10356,
											"end": 10373,
											"name": "tag",
											"source": 5,
											"value": "244"
										},
										{
											"begin": 10356,
											"end": 10373,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10397,
											"end": 10414,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "246"
										},
										{
											"begin": 10397,
											"end": 10412,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "177"
										},
										{
											"begin": 10397,
											"end": 10414,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10397,
											"end": 10414,
											"name": "tag",
											"source": 5,
											"value": "246"
										},
										{
											"begin": 10397,
											"end": 10414,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10391,
											"end": 10393,
											"name": "PUSH",
											"source": 5,
											"value": "A"
										},
										{
											"begin": 10391,
											"end": 10414,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "247"
										},
										{
											"begin": 10391,
											"end": 10414,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 10391,
											"end": 10414,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10391,
											"end": 10414,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "248"
										},
										{
											"begin": 10391,
											"end": 10414,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10391,
											"end": 10414,
											"name": "tag",
											"source": 5,
											"value": "247"
										},
										{
											"begin": 10391,
											"end": 10414,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10375,
											"end": 10388,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "249"
										},
										{
											"begin": 10375,
											"end": 10386,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "58"
										},
										{
											"begin": 10375,
											"end": 10388,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10375,
											"end": 10388,
											"name": "tag",
											"source": 5,
											"value": "249"
										},
										{
											"begin": 10375,
											"end": 10388,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10375,
											"end": 10414,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "250"
										},
										{
											"begin": 10375,
											"end": 10414,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 10375,
											"end": 10414,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10375,
											"end": 10414,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "245"
										},
										{
											"begin": 10375,
											"end": 10414,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10375,
											"end": 10414,
											"name": "tag",
											"source": 5,
											"value": "250"
										},
										{
											"begin": 10375,
											"end": 10414,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10416,
											"end": 10424,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 10342,
											"end": 10348,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 10342,
											"end": 10355,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "251"
										},
										{
											"begin": 10342,
											"end": 10355,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFF"
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 10342,
											"end": 10425,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "tag",
											"source": 5,
											"value": "242"
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10335,
											"end": 10425,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10335,
											"end": 10425,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10219,
											"end": 10432,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 656,
											"end": 752,
											"name": "tag",
											"source": 10,
											"value": "162"
										},
										{
											"begin": 656,
											"end": 752,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 709,
											"end": 716,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 728,
											"end": 745,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 728,
											"end": 745,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 656,
											"end": 752,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 656,
											"end": 752,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "tag",
											"source": 3,
											"value": "164"
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "254"
										},
										{
											"begin": 9082,
											"end": 9087,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 9089,
											"end": 9096,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 9098,
											"end": 9103,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 9105,
											"end": 9109,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 9073,
											"end": 9081,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "255"
										},
										{
											"begin": 9073,
											"end": 9110,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "tag",
											"source": 3,
											"value": "254"
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8989,
											"end": 9117,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1823,
											"end": 2221,
											"name": "tag",
											"source": 12,
											"value": "167"
										},
										{
											"begin": 1823,
											"end": 2221,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1921,
											"end": 1928,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1944,
											"end": 1953,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 1944,
											"end": 1953,
											"name": "PUSH",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 1944,
											"end": 1953,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1944,
											"end": 1953,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 1944,
											"end": 1953,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1944,
											"end": 1953,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 1944,
											"end": 1953,
											"name": "EXP",
											"source": 12
										},
										{
											"begin": 1944,
											"end": 1953,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1944,
											"end": 1953,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 1944,
											"end": 1953,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 1944,
											"end": 1953,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1940,
											"end": 2212,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1940,
											"end": 2212,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "257"
										},
										{
											"begin": 1940,
											"end": 2212,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1976,
											"end": 2074,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "258"
										},
										{
											"begin": 1988,
											"end": 1994,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2018,
											"end": 2035,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "259"
										},
										{
											"begin": 2018,
											"end": 2033,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "177"
										},
										{
											"begin": 2018,
											"end": 2035,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2018,
											"end": 2035,
											"name": "tag",
											"source": 12,
											"value": "259"
										},
										{
											"begin": 2018,
											"end": 2035,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2012,
											"end": 2014,
											"name": "PUSH",
											"source": 12,
											"value": "A"
										},
										{
											"begin": 2012,
											"end": 2035,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "260"
										},
										{
											"begin": 2012,
											"end": 2035,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2012,
											"end": 2035,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2012,
											"end": 2035,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "248"
										},
										{
											"begin": 2012,
											"end": 2035,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2012,
											"end": 2035,
											"name": "tag",
											"source": 12,
											"value": "260"
										},
										{
											"begin": 2012,
											"end": 2035,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1996,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "261"
										},
										{
											"begin": 1996,
											"end": 2007,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "58"
										},
										{
											"begin": 1996,
											"end": 2009,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1996,
											"end": 2009,
											"name": "tag",
											"source": 12,
											"value": "261"
										},
										{
											"begin": 1996,
											"end": 2009,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1996,
											"end": 2035,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "262"
										},
										{
											"begin": 1996,
											"end": 2035,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1996,
											"end": 2035,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1996,
											"end": 2035,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "245"
										},
										{
											"begin": 1996,
											"end": 2035,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1996,
											"end": 2035,
											"name": "tag",
											"source": 12,
											"value": "262"
										},
										{
											"begin": 1996,
											"end": 2035,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2062,
											"end": 2063,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 2053,
											"end": 2059,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 2037,
											"end": 2050,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "263"
										},
										{
											"begin": 2037,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "35"
										},
										{
											"begin": 2037,
											"end": 2050,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2037,
											"end": 2050,
											"name": "tag",
											"source": 12,
											"value": "263"
										},
										{
											"begin": 2037,
											"end": 2050,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2037,
											"end": 2059,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "264"
										},
										{
											"begin": 2037,
											"end": 2059,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2037,
											"end": 2059,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2037,
											"end": 2059,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 2037,
											"end": 2059,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2037,
											"end": 2059,
											"name": "tag",
											"source": 12,
											"value": "264"
										},
										{
											"begin": 2037,
											"end": 2059,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2037,
											"end": 2063,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "266"
										},
										{
											"begin": 2037,
											"end": 2063,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2037,
											"end": 2063,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2037,
											"end": 2063,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "245"
										},
										{
											"begin": 2037,
											"end": 2063,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2037,
											"end": 2063,
											"name": "tag",
											"source": 12,
											"value": "266"
										},
										{
											"begin": 2037,
											"end": 2063,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2065,
											"end": 2073,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 1976,
											"end": 1987,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "251"
										},
										{
											"begin": 1976,
											"end": 2074,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1976,
											"end": 2074,
											"name": "tag",
											"source": 12,
											"value": "258"
										},
										{
											"begin": 1976,
											"end": 2074,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1969,
											"end": 2074,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1969,
											"end": 2074,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1969,
											"end": 2074,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "256"
										},
										{
											"begin": 1969,
											"end": 2074,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1940,
											"end": 2212,
											"name": "tag",
											"source": 12,
											"value": "257"
										},
										{
											"begin": 1940,
											"end": 2212,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2112,
											"end": 2201,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "268"
										},
										{
											"begin": 2124,
											"end": 2130,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2154,
											"end": 2171,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "269"
										},
										{
											"begin": 2154,
											"end": 2169,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "177"
										},
										{
											"begin": 2154,
											"end": 2171,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2154,
											"end": 2171,
											"name": "tag",
											"source": 12,
											"value": "269"
										},
										{
											"begin": 2154,
											"end": 2171,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2148,
											"end": 2150,
											"name": "PUSH",
											"source": 12,
											"value": "A"
										},
										{
											"begin": 2148,
											"end": 2171,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "270"
										},
										{
											"begin": 2148,
											"end": 2171,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2148,
											"end": 2171,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2148,
											"end": 2171,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "248"
										},
										{
											"begin": 2148,
											"end": 2171,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2148,
											"end": 2171,
											"name": "tag",
											"source": 12,
											"value": "270"
										},
										{
											"begin": 2148,
											"end": 2171,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2132,
											"end": 2145,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "271"
										},
										{
											"begin": 2132,
											"end": 2143,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "58"
										},
										{
											"begin": 2132,
											"end": 2145,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2132,
											"end": 2145,
											"name": "tag",
											"source": 12,
											"value": "271"
										},
										{
											"begin": 2132,
											"end": 2145,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2132,
											"end": 2171,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "272"
										},
										{
											"begin": 2132,
											"end": 2171,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2132,
											"end": 2171,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2132,
											"end": 2171,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "245"
										},
										{
											"begin": 2132,
											"end": 2171,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2132,
											"end": 2171,
											"name": "tag",
											"source": 12,
											"value": "272"
										},
										{
											"begin": 2132,
											"end": 2171,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2189,
											"end": 2190,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 2173,
											"end": 2186,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "273"
										},
										{
											"begin": 2173,
											"end": 2184,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "35"
										},
										{
											"begin": 2173,
											"end": 2186,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2173,
											"end": 2186,
											"name": "tag",
											"source": 12,
											"value": "273"
										},
										{
											"begin": 2173,
											"end": 2186,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2173,
											"end": 2190,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "274"
										},
										{
											"begin": 2173,
											"end": 2190,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2173,
											"end": 2190,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2173,
											"end": 2190,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "245"
										},
										{
											"begin": 2173,
											"end": 2190,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2173,
											"end": 2190,
											"name": "tag",
											"source": 12,
											"value": "274"
										},
										{
											"begin": 2173,
											"end": 2190,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2192,
											"end": 2200,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 2112,
											"end": 2123,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "251"
										},
										{
											"begin": 2112,
											"end": 2201,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2112,
											"end": 2201,
											"name": "tag",
											"source": 12,
											"value": "268"
										},
										{
											"begin": 2112,
											"end": 2201,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2105,
											"end": 2201,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2105,
											"end": 2201,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1823,
											"end": 2221,
											"name": "tag",
											"source": 12,
											"value": "256"
										},
										{
											"begin": 1823,
											"end": 2221,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1823,
											"end": 2221,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1823,
											"end": 2221,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1823,
											"end": 2221,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1823,
											"end": 2221,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1823,
											"end": 2221,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "tag",
											"source": 3,
											"value": "172"
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10762,
											"end": 10786,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10789,
											"end": 10814,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "276"
										},
										{
											"begin": 10799,
											"end": 10804,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10806,
											"end": 10813,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10789,
											"end": 10798,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "138"
										},
										{
											"begin": 10789,
											"end": 10814,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 10789,
											"end": 10814,
											"name": "tag",
											"source": 3,
											"value": "276"
										},
										{
											"begin": 10789,
											"end": 10814,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10762,
											"end": 10814,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10762,
											"end": 10814,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10848,
											"end": 10865,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10828,
											"end": 10844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10828,
											"end": 10865,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "277"
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10904,
											"end": 10909,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10885,
											"end": 10901,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10885,
											"end": 10909,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "278"
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10963,
											"end": 10970,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10972,
											"end": 10988,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10990,
											"end": 10995,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 3,
											"value": "FB8F41B200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "279"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "195"
										},
										{
											"begin": 10936,
											"end": 10996,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "tag",
											"source": 3,
											"value": "279"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "tag",
											"source": 3,
											"value": "278"
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "280"
										},
										{
											"begin": 11061,
											"end": 11066,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11068,
											"end": 11075,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11096,
											"end": 11101,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11077,
											"end": 11093,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11077,
											"end": 11101,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 11103,
											"end": 11108,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 11052,
											"end": 11060,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "255"
										},
										{
											"begin": 11052,
											"end": 11109,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "tag",
											"source": 3,
											"value": "280"
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "tag",
											"source": 3,
											"value": "277"
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10752,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "tag",
											"source": 3,
											"value": "174"
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5755,
											"end": 5756,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5739,
											"end": 5743,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "282"
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5807,
											"end": 5808,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 3,
											"value": "96C6FD1E00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "283"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "72"
										},
										{
											"begin": 5780,
											"end": 5810,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "tag",
											"source": 3,
											"value": "283"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "tag",
											"source": 3,
											"value": "282"
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5848,
											"end": 5849,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5834,
											"end": 5836,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "284"
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5902,
											"end": 5903,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 3,
											"value": "EC442F0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "285"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "72"
										},
										{
											"begin": 5873,
											"end": 5905,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "tag",
											"source": 3,
											"value": "285"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "tag",
											"source": 3,
											"value": "284"
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5925,
											"end": 5949,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "286"
										},
										{
											"begin": 5933,
											"end": 5937,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5939,
											"end": 5941,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5943,
											"end": 5948,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5925,
											"end": 5932,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "287"
										},
										{
											"begin": 5925,
											"end": 5949,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5925,
											"end": 5949,
											"name": "tag",
											"source": 3,
											"value": "286"
										},
										{
											"begin": 5925,
											"end": 5949,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5656,
											"end": 5956,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 12313,
											"end": 12403,
											"name": "tag",
											"source": 5,
											"value": "177"
										},
										{
											"begin": 12313,
											"end": 12403,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 12371,
											"end": 12376,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 12313,
											"end": 12403,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 12313,
											"end": 12403,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "tag",
											"source": 3,
											"value": "198"
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7810,
											"end": 7811,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7791,
											"end": 7798,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "290"
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7864,
											"end": 7865,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 3,
											"value": "EC442F0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "291"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "72"
										},
										{
											"begin": 7835,
											"end": 7867,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "tag",
											"source": 3,
											"value": "291"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "tag",
											"source": 3,
											"value": "290"
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7887,
											"end": 7922,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "292"
										},
										{
											"begin": 7903,
											"end": 7904,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7907,
											"end": 7914,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7916,
											"end": 7921,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7887,
											"end": 7894,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "287"
										},
										{
											"begin": 7887,
											"end": 7922,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7887,
											"end": 7922,
											"name": "tag",
											"source": 3,
											"value": "292"
										},
										{
											"begin": 7887,
											"end": 7922,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7721,
											"end": 7929,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "tag",
											"source": 3,
											"value": "221"
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8336,
											"end": 8337,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 8317,
											"end": 8324,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "294"
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 8388,
											"end": 8389,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 3,
											"value": "96C6FD1E00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "295"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "72"
										},
										{
											"begin": 8361,
											"end": 8391,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "tag",
											"source": 3,
											"value": "295"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "tag",
											"source": 3,
											"value": "294"
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8411,
											"end": 8446,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "296"
										},
										{
											"begin": 8419,
											"end": 8426,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8436,
											"end": 8437,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 8440,
											"end": 8445,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 8411,
											"end": 8418,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "287"
										},
										{
											"begin": 8411,
											"end": 8446,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 8411,
											"end": 8446,
											"name": "tag",
											"source": 3,
											"value": "296"
										},
										{
											"begin": 8411,
											"end": 8446,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8247,
											"end": 8453,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "tag",
											"source": 5,
											"value": "229"
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 11580,
											"end": 11585,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 11570,
											"end": 11585,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11570,
											"end": 11585,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 11570,
											"end": 11576,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 11570,
											"end": 11585,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11570,
											"end": 11585,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 11570,
											"end": 11585,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 11566,
											"end": 11650,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "298"
										},
										{
											"begin": 11566,
											"end": 11650,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 11601,
											"end": 11639,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "299"
										},
										{
											"begin": 11617,
											"end": 11622,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 11624,
											"end": 11630,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 11632,
											"end": 11638,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 11601,
											"end": 11616,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "172"
										},
										{
											"begin": 11601,
											"end": 11639,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 11601,
											"end": 11639,
											"name": "tag",
											"source": 5,
											"value": "299"
										},
										{
											"begin": 11601,
											"end": 11639,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 11566,
											"end": 11650,
											"name": "tag",
											"source": 5,
											"value": "298"
										},
										{
											"begin": 11566,
											"end": 11650,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 12157,
											"end": 12177,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "300"
										},
										{
											"begin": 12163,
											"end": 12168,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 12170,
											"end": 12176,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 12157,
											"end": 12162,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "221"
										},
										{
											"begin": 12157,
											"end": 12177,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 12157,
											"end": 12177,
											"name": "tag",
											"source": 5,
											"value": "300"
										},
										{
											"begin": 12157,
											"end": 12177,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 12187,
											"end": 12235,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "301"
										},
										{
											"begin": 12210,
											"end": 12216,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "1070"
										},
										{
											"begin": 12218,
											"end": 12226,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 12228,
											"end": 12234,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 12187,
											"end": 12209,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "302"
										},
										{
											"begin": 12187,
											"end": 12235,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 12187,
											"end": 12235,
											"name": "tag",
											"source": 5,
											"value": "301"
										},
										{
											"begin": 12187,
											"end": 12235,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 12278,
											"end": 12283,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 12268,
											"end": 12276,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 12260,
											"end": 12266,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH",
											"source": 5,
											"value": "FBDE797D201C681B91056529119E0B02407C7BB96A4A2C75C01FC9667232C8DB"
										},
										{
											"begin": 12285,
											"end": 12291,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 12293,
											"end": 12299,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "303"
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "304"
										},
										{
											"begin": 12251,
											"end": 12300,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "tag",
											"source": 5,
											"value": "303"
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "LOG4",
											"source": 5
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 11393,
											"end": 12307,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "tag",
											"source": 11,
											"value": "251"
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8152,
											"end": 8159,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8171,
											"end": 8185,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8188,
											"end": 8213,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "306"
										},
										{
											"begin": 8195,
											"end": 8196,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 8198,
											"end": 8199,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 8201,
											"end": 8212,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 8188,
											"end": 8194,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "307"
										},
										{
											"begin": 8188,
											"end": 8213,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8188,
											"end": 8213,
											"name": "tag",
											"source": 11,
											"value": "306"
										},
										{
											"begin": 8188,
											"end": 8213,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8171,
											"end": 8213,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8171,
											"end": 8213,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8227,
											"end": 8253,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "308"
										},
										{
											"begin": 8244,
											"end": 8252,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8227,
											"end": 8243,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "309"
										},
										{
											"begin": 8227,
											"end": 8253,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8227,
											"end": 8253,
											"name": "tag",
											"source": 11,
											"value": "308"
										},
										{
											"begin": 8227,
											"end": 8253,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8227,
											"end": 8286,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8227,
											"end": 8286,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8227,
											"end": 8286,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "310"
										},
										{
											"begin": 8227,
											"end": 8286,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8227,
											"end": 8286,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8285,
											"end": 8286,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8270,
											"end": 8281,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "311"
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "312"
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "313"
										},
										{
											"begin": 8257,
											"end": 8282,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "tag",
											"source": 11,
											"value": "312"
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "tag",
											"source": 11,
											"value": "311"
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8267,
											"end": 8268,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 8264,
											"end": 8265,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "MULMOD",
											"source": 11
										},
										{
											"begin": 8257,
											"end": 8286,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 8227,
											"end": 8286,
											"name": "tag",
											"source": 11,
											"value": "310"
										},
										{
											"begin": 8227,
											"end": 8286,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8223,
											"end": 8324,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8223,
											"end": 8324,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "314"
										},
										{
											"begin": 8223,
											"end": 8324,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8312,
											"end": 8313,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "315"
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "245"
										},
										{
											"begin": 8302,
											"end": 8313,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "tag",
											"source": 11,
											"value": "315"
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8223,
											"end": 8324,
											"name": "tag",
											"source": 11,
											"value": "314"
										},
										{
											"begin": 8223,
											"end": 8324,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8340,
											"end": 8346,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8333,
											"end": 8346,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8333,
											"end": 8346,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8333,
											"end": 8346,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8051,
											"end": 8353,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "tag",
											"source": 3,
											"value": "255"
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10078,
											"end": 10079,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10061,
											"end": 10066,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "317"
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10132,
											"end": 10133,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 3,
											"value": "E602DF0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "318"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "72"
										},
										{
											"begin": 10103,
											"end": 10135,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "tag",
											"source": 3,
											"value": "318"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "tag",
											"source": 3,
											"value": "317"
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10178,
											"end": 10179,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10159,
											"end": 10166,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "319"
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10231,
											"end": 10232,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 3,
											"value": "94280D6200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "320"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "72"
										},
										{
											"begin": 10203,
											"end": 10234,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "tag",
											"source": 3,
											"value": "320"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "tag",
											"source": 3,
											"value": "319"
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10284,
											"end": 10289,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10265,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10266,
											"end": 10271,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10273,
											"end": 10280,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10303,
											"end": 10312,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "321"
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10349,
											"end": 10356,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10342,
											"end": 10347,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 3,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10358,
											"end": 10363,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "322"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 10333,
											"end": 10364,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "tag",
											"source": 3,
											"value": "322"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "tag",
											"source": 3,
											"value": "321"
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "tag",
											"source": 3,
											"value": "287"
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6376,
											"end": 6377,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6360,
											"end": 6364,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "324"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 6512,
											"end": 6517,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6508,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 6496,
											"end": 6508,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "325"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "245"
										},
										{
											"begin": 6496,
											"end": 6517,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "tag",
											"source": 3,
											"value": "325"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "326"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "tag",
											"source": 3,
											"value": "324"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6548,
											"end": 6567,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6570,
											"end": 6579,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6580,
											"end": 6584,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 6548,
											"end": 6585,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6548,
											"end": 6585,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6617,
											"end": 6622,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6603,
											"end": 6614,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "327"
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 6674,
											"end": 6678,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 6680,
											"end": 6691,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6693,
											"end": 6698,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 3,
											"value": "E450D38C00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "328"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "195"
										},
										{
											"begin": 6649,
											"end": 6699,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "tag",
											"source": 3,
											"value": "328"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "tag",
											"source": 3,
											"value": "327"
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6866,
											"end": 6871,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6852,
											"end": 6863,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6852,
											"end": 6871,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6843,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6844,
											"end": 6848,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6534,
											"end": 6896,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "tag",
											"source": 3,
											"value": "326"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6924,
											"end": 6925,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6910,
											"end": 6912,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "329"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7089,
											"end": 7094,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7085,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 7073,
											"end": 7085,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "330"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "tag",
											"source": 3,
											"value": "329"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7301,
											"end": 7306,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7293,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7294,
											"end": 7296,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "tag",
											"source": 3,
											"value": "330"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7363,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7355,
											"end": 7359,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7365,
											"end": 7370,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "331"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 7346,
											"end": 7371,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "tag",
											"source": 3,
											"value": "331"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1303,
											"end": 1463,
											"name": "tag",
											"source": 8,
											"value": "302"
										},
										{
											"begin": 1303,
											"end": 1463,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1385,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "333"
										},
										{
											"begin": 1405,
											"end": 1410,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1432,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1441,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1427,
											"end": 1441,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1441,
											"name": "PUSH",
											"source": 8,
											"value": "A9059CBB"
										},
										{
											"begin": 1444,
											"end": 1446,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1448,
											"end": 1453,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "334"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "335"
										},
										{
											"begin": 1412,
											"end": 1455,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "tag",
											"source": 8,
											"value": "334"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1385,
											"end": 1404,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "336"
										},
										{
											"begin": 1385,
											"end": 1456,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1385,
											"end": 1456,
											"name": "tag",
											"source": 8,
											"value": "333"
										},
										{
											"begin": 1385,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1303,
											"end": 1463,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1303,
											"end": 1463,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1303,
											"end": 1463,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1303,
											"end": 1463,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "tag",
											"source": 11,
											"value": "307"
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3885,
											"end": 3899,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4232,
											"end": 4245,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4252,
											"end": 4253,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 4248,
											"end": 4249,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 4248,
											"end": 4253,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 4232,
											"end": 4253,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4232,
											"end": 4253,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4312,
											"end": 4325,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4437,
											"end": 4438,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4433,
											"end": 4439,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 4430,
											"end": 4431,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 4427,
											"end": 4428,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 4420,
											"end": 4440,
											"name": "MULMOD",
											"source": 11
										},
										{
											"begin": 4493,
											"end": 4498,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4489,
											"end": 4491,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4486,
											"end": 4499,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 4478,
											"end": 4483,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 4474,
											"end": 4476,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4470,
											"end": 4484,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4466,
											"end": 4500,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4457,
											"end": 4500,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4457,
											"end": 4500,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4392,
											"end": 4514,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4604,
											"end": 4605,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4595,
											"end": 4600,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4595,
											"end": 4605,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4591,
											"end": 4959,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "338"
										},
										{
											"begin": 4591,
											"end": 4959,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4933,
											"end": 4944,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 4925,
											"end": 4930,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "339"
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "340"
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "313"
										},
										{
											"begin": 4925,
											"end": 4944,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "tag",
											"source": 11,
											"value": "340"
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "tag",
											"source": 11,
											"value": "339"
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 4918,
											"end": 4944,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 4918,
											"end": 4944,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4918,
											"end": 4944,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4918,
											"end": 4944,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4918,
											"end": 4944,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "337"
										},
										{
											"begin": 4918,
											"end": 4944,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4591,
											"end": 4959,
											"name": "tag",
											"source": 11,
											"value": "338"
										},
										{
											"begin": 4591,
											"end": 4959,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5080,
											"end": 5085,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5065,
											"end": 5076,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 5065,
											"end": 5085,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 5061,
											"end": 5149,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "341"
										},
										{
											"begin": 5061,
											"end": 5149,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "PUSH",
											"source": 11,
											"value": "227BC15300000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 5061,
											"end": 5149,
											"name": "tag",
											"source": 11,
											"value": "341"
										},
										{
											"begin": 5061,
											"end": 5149,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5404,
											"end": 5421,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5539,
											"end": 5550,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 5536,
											"end": 5537,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 5533,
											"end": 5534,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 5526,
											"end": 5551,
											"name": "MULMOD",
											"source": 11
										},
										{
											"begin": 5513,
											"end": 5551,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5513,
											"end": 5551,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5667,
											"end": 5672,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5656,
											"end": 5665,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5653,
											"end": 5673,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 5646,
											"end": 5651,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5642,
											"end": 5674,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5633,
											"end": 5674,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5633,
											"end": 5674,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5711,
											"end": 5720,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5704,
											"end": 5709,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 5700,
											"end": 5721,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5691,
											"end": 5721,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 5691,
											"end": 5721,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5939,
											"end": 5951,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5973,
											"end": 5984,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 5969,
											"end": 5970,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5969,
											"end": 5984,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5954,
											"end": 5965,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 5954,
											"end": 5985,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 5939,
											"end": 5985,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5939,
											"end": 5985,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6105,
											"end": 6109,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6092,
											"end": 6103,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 6088,
											"end": 6110,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 6073,
											"end": 6110,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 6073,
											"end": 6110,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6197,
											"end": 6201,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6190,
											"end": 6195,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 6186,
											"end": 6202,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 6177,
											"end": 6202,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 6177,
											"end": 6202,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6354,
											"end": 6355,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 6347,
											"end": 6351,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6340,
											"end": 6344,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6337,
											"end": 6338,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6333,
											"end": 6345,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 6329,
											"end": 6352,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 6325,
											"end": 6356,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6317,
											"end": 6356,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6317,
											"end": 6356,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6453,
											"end": 6457,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6445,
											"end": 6450,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 6445,
											"end": 6457,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 6436,
											"end": 6457,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 6436,
											"end": 6457,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 6436,
											"end": 6457,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 6436,
											"end": 6457,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6775,
											"end": 6790,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6813,
											"end": 6814,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 6798,
											"end": 6809,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 6794,
											"end": 6795,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 6794,
											"end": 6809,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 6793,
											"end": 6814,
											"name": "XOR",
											"source": 11
										},
										{
											"begin": 6775,
											"end": 6814,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6775,
											"end": 6814,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7060,
											"end": 7067,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7046,
											"end": 7057,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 7046,
											"end": 7067,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7042,
											"end": 7043,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 7042,
											"end": 7067,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7031,
											"end": 7067,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7031,
											"end": 7067,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7031,
											"end": 7067,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7031,
											"end": 7067,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7129,
											"end": 7136,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7115,
											"end": 7126,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 7115,
											"end": 7136,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7111,
											"end": 7112,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 7111,
											"end": 7136,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7100,
											"end": 7136,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7100,
											"end": 7136,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7100,
											"end": 7136,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7100,
											"end": 7136,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7199,
											"end": 7206,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7185,
											"end": 7196,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 7185,
											"end": 7206,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7181,
											"end": 7182,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 7181,
											"end": 7206,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7170,
											"end": 7206,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7170,
											"end": 7206,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7170,
											"end": 7206,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7170,
											"end": 7206,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7269,
											"end": 7276,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7255,
											"end": 7266,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 7255,
											"end": 7276,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7251,
											"end": 7252,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 7251,
											"end": 7276,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7240,
											"end": 7276,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7240,
											"end": 7276,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7240,
											"end": 7276,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7240,
											"end": 7276,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7339,
											"end": 7346,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7325,
											"end": 7336,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 7325,
											"end": 7346,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7321,
											"end": 7322,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 7321,
											"end": 7346,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7310,
											"end": 7346,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7310,
											"end": 7346,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7310,
											"end": 7346,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7310,
											"end": 7346,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7410,
											"end": 7417,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7396,
											"end": 7407,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 7396,
											"end": 7417,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7392,
											"end": 7393,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 7392,
											"end": 7417,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7381,
											"end": 7417,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7381,
											"end": 7417,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7381,
											"end": 7417,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7381,
											"end": 7417,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7868,
											"end": 7875,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7860,
											"end": 7865,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 7860,
											"end": 7875,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7851,
											"end": 7875,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 7851,
											"end": 7875,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7889,
											"end": 7902,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7889,
											"end": 7902,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7889,
											"end": 7902,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7889,
											"end": 7902,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7889,
											"end": 7902,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "tag",
											"source": 11,
											"value": "337"
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3803,
											"end": 7919,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 14993,
											"end": 15115,
											"name": "tag",
											"source": 11,
											"value": "309"
										},
										{
											"begin": 14993,
											"end": 15115,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 15061,
											"end": 15065,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 15107,
											"end": 15108,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 15102,
											"end": 15103,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 15090,
											"end": 15098,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "343"
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "344"
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "345"
										},
										{
											"begin": 15084,
											"end": 15099,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "tag",
											"source": 11,
											"value": "344"
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "tag",
											"source": 11,
											"value": "343"
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15103,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "346"
										},
										{
											"begin": 15084,
											"end": 15103,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15103,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15103,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "347"
										},
										{
											"begin": 15084,
											"end": 15103,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15103,
											"name": "tag",
											"source": 11,
											"value": "346"
										},
										{
											"begin": 15084,
											"end": 15103,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15108,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 15084,
											"end": 15108,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15108,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 15077,
											"end": 15108,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 15077,
											"end": 15108,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14993,
											"end": 15115,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 14993,
											"end": 15115,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14993,
											"end": 15115,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14993,
											"end": 15115,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4059,
											"end": 4688,
											"name": "tag",
											"source": 8,
											"value": "336"
										},
										{
											"begin": 4059,
											"end": 4688,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4478,
											"end": 4501,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "349"
										},
										{
											"begin": 4532,
											"end": 4536,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4512,
											"end": 4517,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4504,
											"end": 4531,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4504,
											"end": 4531,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4504,
											"end": 4531,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "350"
										},
										{
											"begin": 4504,
											"end": 4531,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4504,
											"end": 4537,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "tag",
											"source": 8,
											"value": "349"
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4478,
											"end": 4537,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4478,
											"end": 4537,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4572,
											"end": 4573,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4551,
											"end": 4561,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4568,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4573,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4573,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "351"
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4589,
											"end": 4599,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "352"
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "353"
										},
										{
											"begin": 4578,
											"end": 4608,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "tag",
											"source": 8,
											"value": "352"
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4577,
											"end": 4608,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "tag",
											"source": 8,
											"value": "351"
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "354"
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4664,
											"end": 4669,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 8,
											"value": "5274AFE700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "355"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "72"
										},
										{
											"begin": 4631,
											"end": 4671,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "tag",
											"source": 8,
											"value": "355"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "tag",
											"source": 8,
											"value": "354"
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4129,
											"end": 4688,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4059,
											"end": 4688,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4059,
											"end": 4688,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4059,
											"end": 4688,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "tag",
											"source": 9,
											"value": "350"
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2780,
											"end": 2792,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 2811,
											"end": 2849,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "357"
										},
										{
											"begin": 2833,
											"end": 2839,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2841,
											"end": 2845,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2847,
											"end": 2848,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2811,
											"end": 2832,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "358"
										},
										{
											"begin": 2811,
											"end": 2849,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2811,
											"end": 2849,
											"name": "tag",
											"source": 9,
											"value": "357"
										},
										{
											"begin": 2811,
											"end": 2849,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2804,
											"end": 2849,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2804,
											"end": 2849,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2705,
											"end": 2856,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "tag",
											"source": 9,
											"value": "358"
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3279,
											"end": 3291,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 3331,
											"end": 3336,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3307,
											"end": 3328,
											"name": "SELFBALANCE",
											"source": 9
										},
										{
											"begin": 3307,
											"end": 3336,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 3303,
											"end": 3411,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3303,
											"end": 3411,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "360"
										},
										{
											"begin": 3303,
											"end": 3411,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3394,
											"end": 3398,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH",
											"source": 9,
											"value": "CD78605900000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "361"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 3359,
											"end": 3400,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "tag",
											"source": 9,
											"value": "361"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3303,
											"end": 3411,
											"name": "tag",
											"source": 9,
											"value": "360"
										},
										{
											"begin": 3303,
											"end": 3411,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3421,
											"end": 3433,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3435,
											"end": 3458,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3468,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3473,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3462,
											"end": 3473,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3481,
											"end": 3486,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3488,
											"end": 3492,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "362"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "363"
										},
										{
											"begin": 3462,
											"end": 3493,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "tag",
											"source": 9,
											"value": "362"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "366"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "3F"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "365"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "tag",
											"source": 9,
											"value": "366"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "tag",
											"source": 9,
											"value": "365"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3420,
											"end": 3493,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3420,
											"end": 3493,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3420,
											"end": 3493,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3420,
											"end": 3493,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "367"
										},
										{
											"begin": 3537,
											"end": 3543,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 3545,
											"end": 3552,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3554,
											"end": 3564,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3510,
											"end": 3536,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "368"
										},
										{
											"begin": 3510,
											"end": 3565,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "tag",
											"source": 9,
											"value": "367"
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3503,
											"end": 3565,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3503,
											"end": 3565,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3503,
											"end": 3565,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3503,
											"end": 3565,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3180,
											"end": 3572,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "tag",
											"source": 9,
											"value": "368"
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4769,
											"end": 4781,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 4798,
											"end": 4805,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "370"
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4821,
											"end": 4840,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "371"
										},
										{
											"begin": 4829,
											"end": 4839,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4821,
											"end": 4828,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "372"
										},
										{
											"begin": 4821,
											"end": 4840,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4821,
											"end": 4840,
											"name": "tag",
											"source": 9,
											"value": "371"
										},
										{
											"begin": 4821,
											"end": 4840,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "373"
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "tag",
											"source": 9,
											"value": "370"
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5066,
											"end": 5067,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5045,
											"end": 5055,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5062,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5067,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "374"
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5093,
											"end": 5094,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5071,
											"end": 5077,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 5071,
											"end": 5089,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5071,
											"end": 5089,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5071,
											"end": 5089,
											"name": "EXTCODESIZE",
											"source": 9
										},
										{
											"begin": 5071,
											"end": 5094,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "tag",
											"source": 9,
											"value": "374"
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "375"
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5138,
											"end": 5144,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH",
											"source": 9,
											"value": "9996B31500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "376"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 5121,
											"end": 5145,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "tag",
											"source": 9,
											"value": "376"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "tag",
											"source": 9,
											"value": "375"
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5180,
											"end": 5190,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 5190,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 5190,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 5190,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "369"
										},
										{
											"begin": 5173,
											"end": 5190,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "tag",
											"source": 9,
											"value": "373"
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "tag",
											"source": 9,
											"value": "369"
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4625,
											"end": 5207,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5743,
											"end": 6259,
											"name": "tag",
											"source": 9,
											"value": "372"
										},
										{
											"begin": 5743,
											"end": 6259,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5894,
											"end": 5895,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5874,
											"end": 5884,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5874,
											"end": 5891,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5874,
											"end": 5895,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "378"
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6102,
											"end": 6112,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6096,
											"end": 6113,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6158,
											"end": 6173,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6145,
											"end": 6155,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6141,
											"end": 6143,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6137,
											"end": 6156,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6130,
											"end": 6174,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "tag",
											"source": 9,
											"value": "378"
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "PUSH",
											"source": 9,
											"value": "1425EA4200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 7,
											"end": 84,
											"name": "tag",
											"source": 13,
											"value": "380"
										},
										{
											"begin": 7,
											"end": 84,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 44,
											"end": 51,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 73,
											"end": 78,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 62,
											"end": 78,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 62,
											"end": 78,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7,
											"end": 84,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7,
											"end": 84,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7,
											"end": 84,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7,
											"end": 84,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 90,
											"end": 208,
											"name": "tag",
											"source": 13,
											"value": "381"
										},
										{
											"begin": 90,
											"end": 208,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 177,
											"end": 201,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "424"
										},
										{
											"begin": 195,
											"end": 200,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 177,
											"end": 201,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "380"
										},
										{
											"begin": 177,
											"end": 201,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 177,
											"end": 201,
											"name": "tag",
											"source": 13,
											"value": "424"
										},
										{
											"begin": 177,
											"end": 201,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 172,
											"end": 175,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 165,
											"end": 202,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 90,
											"end": 208,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 90,
											"end": 208,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 90,
											"end": 208,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 214,
											"end": 436,
											"name": "tag",
											"source": 13,
											"value": "37"
										},
										{
											"begin": 214,
											"end": 436,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 307,
											"end": 311,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 345,
											"end": 347,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 334,
											"end": 343,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 330,
											"end": 348,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 322,
											"end": 348,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 322,
											"end": 348,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 358,
											"end": 429,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "426"
										},
										{
											"begin": 426,
											"end": 427,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 415,
											"end": 424,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 411,
											"end": 428,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 402,
											"end": 408,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 358,
											"end": 429,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "381"
										},
										{
											"begin": 358,
											"end": 429,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 358,
											"end": 429,
											"name": "tag",
											"source": 13,
											"value": "426"
										},
										{
											"begin": 358,
											"end": 429,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 214,
											"end": 436,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 214,
											"end": 436,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 214,
											"end": 436,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 214,
											"end": 436,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 214,
											"end": 436,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 442,
											"end": 541,
											"name": "tag",
											"source": 13,
											"value": "382"
										},
										{
											"begin": 442,
											"end": 541,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 494,
											"end": 500,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 528,
											"end": 533,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 522,
											"end": 534,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 512,
											"end": 534,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 512,
											"end": 534,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 442,
											"end": 541,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 442,
											"end": 541,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 442,
											"end": 541,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 442,
											"end": 541,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 547,
											"end": 716,
											"name": "tag",
											"source": 13,
											"value": "383"
										},
										{
											"begin": 547,
											"end": 716,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 631,
											"end": 642,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 665,
											"end": 671,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 660,
											"end": 663,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 653,
											"end": 672,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 705,
											"end": 709,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 700,
											"end": 703,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 696,
											"end": 710,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 681,
											"end": 710,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 681,
											"end": 710,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 547,
											"end": 716,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 547,
											"end": 716,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 547,
											"end": 716,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 547,
											"end": 716,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 547,
											"end": 716,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 722,
											"end": 861,
											"name": "tag",
											"source": 13,
											"value": "384"
										},
										{
											"begin": 722,
											"end": 861,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 811,
											"end": 817,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 806,
											"end": 809,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 801,
											"end": 804,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 795,
											"end": 818,
											"name": "MCOPY",
											"source": 13
										},
										{
											"begin": 852,
											"end": 853,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 843,
											"end": 849,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 838,
											"end": 841,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 834,
											"end": 850,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 827,
											"end": 854,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 722,
											"end": 861,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 722,
											"end": 861,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 722,
											"end": 861,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 722,
											"end": 861,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 867,
											"end": 969,
											"name": "tag",
											"source": 13,
											"value": "385"
										},
										{
											"begin": 867,
											"end": 969,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 908,
											"end": 914,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 959,
											"end": 961,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 955,
											"end": 962,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 950,
											"end": 952,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 943,
											"end": 948,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 939,
											"end": 953,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 935,
											"end": 963,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 925,
											"end": 963,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 925,
											"end": 963,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 867,
											"end": 969,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 867,
											"end": 969,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 867,
											"end": 969,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 867,
											"end": 969,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 975,
											"end": 1352,
											"name": "tag",
											"source": 13,
											"value": "386"
										},
										{
											"begin": 975,
											"end": 1352,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1063,
											"end": 1066,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1091,
											"end": 1130,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "432"
										},
										{
											"begin": 1124,
											"end": 1129,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1091,
											"end": 1130,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "382"
										},
										{
											"begin": 1091,
											"end": 1130,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1091,
											"end": 1130,
											"name": "tag",
											"source": 13,
											"value": "432"
										},
										{
											"begin": 1091,
											"end": 1130,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1146,
											"end": 1217,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "433"
										},
										{
											"begin": 1210,
											"end": 1216,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1205,
											"end": 1208,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 1146,
											"end": 1217,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "383"
										},
										{
											"begin": 1146,
											"end": 1217,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1146,
											"end": 1217,
											"name": "tag",
											"source": 13,
											"value": "433"
										},
										{
											"begin": 1146,
											"end": 1217,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1139,
											"end": 1217,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 1139,
											"end": 1217,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1226,
											"end": 1291,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "434"
										},
										{
											"begin": 1284,
											"end": 1290,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1282,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 1272,
											"end": 1276,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1265,
											"end": 1270,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 1261,
											"end": 1277,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1226,
											"end": 1291,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "384"
										},
										{
											"begin": 1226,
											"end": 1291,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1226,
											"end": 1291,
											"name": "tag",
											"source": 13,
											"value": "434"
										},
										{
											"begin": 1226,
											"end": 1291,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1316,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "435"
										},
										{
											"begin": 1338,
											"end": 1344,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1316,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "385"
										},
										{
											"begin": 1316,
											"end": 1345,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1316,
											"end": 1345,
											"name": "tag",
											"source": 13,
											"value": "435"
										},
										{
											"begin": 1316,
											"end": 1345,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1311,
											"end": 1314,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1307,
											"end": 1346,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1300,
											"end": 1346,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1300,
											"end": 1346,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1067,
											"end": 1352,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 975,
											"end": 1352,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 975,
											"end": 1352,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 975,
											"end": 1352,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 975,
											"end": 1352,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 975,
											"end": 1352,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1358,
											"end": 1671,
											"name": "tag",
											"source": 13,
											"value": "41"
										},
										{
											"begin": 1358,
											"end": 1671,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1471,
											"end": 1475,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1509,
											"end": 1511,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1498,
											"end": 1507,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1494,
											"end": 1512,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1486,
											"end": 1512,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1486,
											"end": 1512,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1558,
											"end": 1567,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1552,
											"end": 1556,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1548,
											"end": 1568,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 1544,
											"end": 1545,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1533,
											"end": 1542,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1529,
											"end": 1546,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1522,
											"end": 1569,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1586,
											"end": 1664,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "437"
										},
										{
											"begin": 1659,
											"end": 1663,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1650,
											"end": 1656,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1586,
											"end": 1664,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "386"
										},
										{
											"begin": 1586,
											"end": 1664,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1586,
											"end": 1664,
											"name": "tag",
											"source": 13,
											"value": "437"
										},
										{
											"begin": 1586,
											"end": 1664,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1578,
											"end": 1664,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1578,
											"end": 1664,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1358,
											"end": 1671,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1358,
											"end": 1671,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1358,
											"end": 1671,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1358,
											"end": 1671,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1358,
											"end": 1671,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1758,
											"end": 1875,
											"name": "tag",
											"source": 13,
											"value": "388"
										},
										{
											"begin": 1758,
											"end": 1875,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1867,
											"end": 1868,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1864,
											"end": 1865,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1857,
											"end": 1869,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2004,
											"end": 2126,
											"name": "tag",
											"source": 13,
											"value": "390"
										},
										{
											"begin": 2004,
											"end": 2126,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2077,
											"end": 2101,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "442"
										},
										{
											"begin": 2095,
											"end": 2100,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2077,
											"end": 2101,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "380"
										},
										{
											"begin": 2077,
											"end": 2101,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2077,
											"end": 2101,
											"name": "tag",
											"source": 13,
											"value": "442"
										},
										{
											"begin": 2077,
											"end": 2101,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2070,
											"end": 2075,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2067,
											"end": 2102,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 2057,
											"end": 2120,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "443"
										},
										{
											"begin": 2057,
											"end": 2120,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2116,
											"end": 2117,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2113,
											"end": 2114,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2106,
											"end": 2118,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2057,
											"end": 2120,
											"name": "tag",
											"source": 13,
											"value": "443"
										},
										{
											"begin": 2057,
											"end": 2120,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2004,
											"end": 2126,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2004,
											"end": 2126,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2132,
											"end": 2271,
											"name": "tag",
											"source": 13,
											"value": "391"
										},
										{
											"begin": 2132,
											"end": 2271,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2178,
											"end": 2183,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2216,
											"end": 2222,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2203,
											"end": 2223,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 2194,
											"end": 2223,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2194,
											"end": 2223,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2232,
											"end": 2265,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "445"
										},
										{
											"begin": 2259,
											"end": 2264,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2232,
											"end": 2265,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "390"
										},
										{
											"begin": 2232,
											"end": 2265,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2232,
											"end": 2265,
											"name": "tag",
											"source": 13,
											"value": "445"
										},
										{
											"begin": 2232,
											"end": 2265,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2132,
											"end": 2271,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2132,
											"end": 2271,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2132,
											"end": 2271,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2132,
											"end": 2271,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2132,
											"end": 2271,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2277,
											"end": 2606,
											"name": "tag",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 2277,
											"end": 2606,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2336,
											"end": 2342,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2385,
											"end": 2387,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2373,
											"end": 2382,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2364,
											"end": 2371,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2360,
											"end": 2383,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2356,
											"end": 2388,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 2353,
											"end": 2472,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2353,
											"end": 2472,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "447"
										},
										{
											"begin": 2353,
											"end": 2472,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2391,
											"end": 2470,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "448"
										},
										{
											"begin": 2391,
											"end": 2470,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "388"
										},
										{
											"begin": 2391,
											"end": 2470,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2391,
											"end": 2470,
											"name": "tag",
											"source": 13,
											"value": "448"
										},
										{
											"begin": 2391,
											"end": 2470,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2353,
											"end": 2472,
											"name": "tag",
											"source": 13,
											"value": "447"
										},
										{
											"begin": 2353,
											"end": 2472,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2511,
											"end": 2512,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2536,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "449"
										},
										{
											"begin": 2581,
											"end": 2588,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2572,
											"end": 2578,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 2570,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 2557,
											"end": 2579,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2536,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "391"
										},
										{
											"begin": 2536,
											"end": 2589,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2536,
											"end": 2589,
											"name": "tag",
											"source": 13,
											"value": "449"
										},
										{
											"begin": 2536,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2526,
											"end": 2589,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2526,
											"end": 2589,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2482,
											"end": 2599,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2277,
											"end": 2606,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2277,
											"end": 2606,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2277,
											"end": 2606,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2277,
											"end": 2606,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2277,
											"end": 2606,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2612,
											"end": 2738,
											"name": "tag",
											"source": 13,
											"value": "392"
										},
										{
											"begin": 2612,
											"end": 2738,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2649,
											"end": 2656,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2689,
											"end": 2731,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2682,
											"end": 2687,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2678,
											"end": 2732,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2667,
											"end": 2732,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2667,
											"end": 2732,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2612,
											"end": 2738,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2612,
											"end": 2738,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2612,
											"end": 2738,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2612,
											"end": 2738,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2744,
											"end": 2840,
											"name": "tag",
											"source": 13,
											"value": "393"
										},
										{
											"begin": 2744,
											"end": 2840,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2781,
											"end": 2788,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2810,
											"end": 2834,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "452"
										},
										{
											"begin": 2828,
											"end": 2833,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2810,
											"end": 2834,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "392"
										},
										{
											"begin": 2810,
											"end": 2834,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2810,
											"end": 2834,
											"name": "tag",
											"source": 13,
											"value": "452"
										},
										{
											"begin": 2810,
											"end": 2834,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2799,
											"end": 2834,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2799,
											"end": 2834,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2744,
											"end": 2840,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2744,
											"end": 2840,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2744,
											"end": 2840,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2744,
											"end": 2840,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2846,
											"end": 2968,
											"name": "tag",
											"source": 13,
											"value": "394"
										},
										{
											"begin": 2846,
											"end": 2968,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2919,
											"end": 2943,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "454"
										},
										{
											"begin": 2937,
											"end": 2942,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2919,
											"end": 2943,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "393"
										},
										{
											"begin": 2919,
											"end": 2943,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2919,
											"end": 2943,
											"name": "tag",
											"source": 13,
											"value": "454"
										},
										{
											"begin": 2919,
											"end": 2943,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2912,
											"end": 2917,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2909,
											"end": 2944,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 2899,
											"end": 2962,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "455"
										},
										{
											"begin": 2899,
											"end": 2962,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2958,
											"end": 2959,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2955,
											"end": 2956,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2948,
											"end": 2960,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2899,
											"end": 2962,
											"name": "tag",
											"source": 13,
											"value": "455"
										},
										{
											"begin": 2899,
											"end": 2962,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2846,
											"end": 2968,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2846,
											"end": 2968,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2974,
											"end": 3113,
											"name": "tag",
											"source": 13,
											"value": "395"
										},
										{
											"begin": 2974,
											"end": 3113,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3020,
											"end": 3025,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3058,
											"end": 3064,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3045,
											"end": 3065,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 3036,
											"end": 3065,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3036,
											"end": 3065,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3074,
											"end": 3107,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "457"
										},
										{
											"begin": 3101,
											"end": 3106,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3074,
											"end": 3107,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "394"
										},
										{
											"begin": 3074,
											"end": 3107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3074,
											"end": 3107,
											"name": "tag",
											"source": 13,
											"value": "457"
										},
										{
											"begin": 3074,
											"end": 3107,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2974,
											"end": 3113,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2974,
											"end": 3113,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2974,
											"end": 3113,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2974,
											"end": 3113,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2974,
											"end": 3113,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3119,
											"end": 3593,
											"name": "tag",
											"source": 13,
											"value": "49"
										},
										{
											"begin": 3119,
											"end": 3593,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3187,
											"end": 3193,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3195,
											"end": 3201,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3244,
											"end": 3246,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3232,
											"end": 3241,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3223,
											"end": 3230,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3219,
											"end": 3242,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3215,
											"end": 3247,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 3212,
											"end": 3331,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3212,
											"end": 3331,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "459"
										},
										{
											"begin": 3212,
											"end": 3331,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3250,
											"end": 3329,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "460"
										},
										{
											"begin": 3250,
											"end": 3329,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "388"
										},
										{
											"begin": 3250,
											"end": 3329,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3250,
											"end": 3329,
											"name": "tag",
											"source": 13,
											"value": "460"
										},
										{
											"begin": 3250,
											"end": 3329,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3212,
											"end": 3331,
											"name": "tag",
											"source": 13,
											"value": "459"
										},
										{
											"begin": 3212,
											"end": 3331,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3370,
											"end": 3371,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3395,
											"end": 3448,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "461"
										},
										{
											"begin": 3440,
											"end": 3447,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3431,
											"end": 3437,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3420,
											"end": 3429,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 3416,
											"end": 3438,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3395,
											"end": 3448,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "395"
										},
										{
											"begin": 3395,
											"end": 3448,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3395,
											"end": 3448,
											"name": "tag",
											"source": 13,
											"value": "461"
										},
										{
											"begin": 3395,
											"end": 3448,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3385,
											"end": 3448,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3385,
											"end": 3448,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3341,
											"end": 3458,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3497,
											"end": 3499,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3523,
											"end": 3576,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "462"
										},
										{
											"begin": 3568,
											"end": 3575,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3559,
											"end": 3565,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3548,
											"end": 3557,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 3544,
											"end": 3566,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3523,
											"end": 3576,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "391"
										},
										{
											"begin": 3523,
											"end": 3576,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3523,
											"end": 3576,
											"name": "tag",
											"source": 13,
											"value": "462"
										},
										{
											"begin": 3523,
											"end": 3576,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3513,
											"end": 3576,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3513,
											"end": 3576,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3468,
											"end": 3586,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3119,
											"end": 3593,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3119,
											"end": 3593,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3119,
											"end": 3593,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3119,
											"end": 3593,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3119,
											"end": 3593,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3119,
											"end": 3593,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3599,
											"end": 3689,
											"name": "tag",
											"source": 13,
											"value": "396"
										},
										{
											"begin": 3599,
											"end": 3689,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3633,
											"end": 3640,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3676,
											"end": 3681,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3669,
											"end": 3682,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3662,
											"end": 3683,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3651,
											"end": 3683,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3651,
											"end": 3683,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3599,
											"end": 3689,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3599,
											"end": 3689,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3599,
											"end": 3689,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3599,
											"end": 3689,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3695,
											"end": 3804,
											"name": "tag",
											"source": 13,
											"value": "397"
										},
										{
											"begin": 3695,
											"end": 3804,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3776,
											"end": 3797,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "465"
										},
										{
											"begin": 3791,
											"end": 3796,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3776,
											"end": 3797,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "396"
										},
										{
											"begin": 3776,
											"end": 3797,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3776,
											"end": 3797,
											"name": "tag",
											"source": 13,
											"value": "465"
										},
										{
											"begin": 3776,
											"end": 3797,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3771,
											"end": 3774,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3764,
											"end": 3798,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3695,
											"end": 3804,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3695,
											"end": 3804,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3695,
											"end": 3804,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3810,
											"end": 4020,
											"name": "tag",
											"source": 13,
											"value": "52"
										},
										{
											"begin": 3810,
											"end": 4020,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3897,
											"end": 3901,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3935,
											"end": 3937,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3924,
											"end": 3933,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3920,
											"end": 3938,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3912,
											"end": 3938,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3912,
											"end": 3938,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3948,
											"end": 4013,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "467"
										},
										{
											"begin": 4010,
											"end": 4011,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3999,
											"end": 4008,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3995,
											"end": 4012,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3986,
											"end": 3992,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 3948,
											"end": 4013,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "397"
										},
										{
											"begin": 3948,
											"end": 4013,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3948,
											"end": 4013,
											"name": "tag",
											"source": 13,
											"value": "467"
										},
										{
											"begin": 3948,
											"end": 4013,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3810,
											"end": 4020,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3810,
											"end": 4020,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3810,
											"end": 4020,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3810,
											"end": 4020,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3810,
											"end": 4020,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4645,
											"name": "tag",
											"source": 13,
											"value": "62"
										},
										{
											"begin": 4026,
											"end": 4645,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4103,
											"end": 4109,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4111,
											"end": 4117,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4119,
											"end": 4125,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4168,
											"end": 4170,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 4156,
											"end": 4165,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4147,
											"end": 4154,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 4143,
											"end": 4166,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4139,
											"end": 4171,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 4136,
											"end": 4255,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4136,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "469"
										},
										{
											"begin": 4136,
											"end": 4255,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4174,
											"end": 4253,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "470"
										},
										{
											"begin": 4174,
											"end": 4253,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "388"
										},
										{
											"begin": 4174,
											"end": 4253,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4174,
											"end": 4253,
											"name": "tag",
											"source": 13,
											"value": "470"
										},
										{
											"begin": 4174,
											"end": 4253,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4136,
											"end": 4255,
											"name": "tag",
											"source": 13,
											"value": "469"
										},
										{
											"begin": 4136,
											"end": 4255,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4294,
											"end": 4295,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4319,
											"end": 4372,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "471"
										},
										{
											"begin": 4364,
											"end": 4371,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 4355,
											"end": 4361,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4344,
											"end": 4353,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 4340,
											"end": 4362,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4319,
											"end": 4372,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "395"
										},
										{
											"begin": 4319,
											"end": 4372,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4319,
											"end": 4372,
											"name": "tag",
											"source": 13,
											"value": "471"
										},
										{
											"begin": 4319,
											"end": 4372,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4309,
											"end": 4372,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 4309,
											"end": 4372,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4265,
											"end": 4382,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4421,
											"end": 4423,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4447,
											"end": 4500,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "472"
										},
										{
											"begin": 4492,
											"end": 4499,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 4483,
											"end": 4489,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4472,
											"end": 4481,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 4468,
											"end": 4490,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4447,
											"end": 4500,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "395"
										},
										{
											"begin": 4447,
											"end": 4500,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4447,
											"end": 4500,
											"name": "tag",
											"source": 13,
											"value": "472"
										},
										{
											"begin": 4447,
											"end": 4500,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4437,
											"end": 4500,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4437,
											"end": 4500,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4392,
											"end": 4510,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4549,
											"end": 4551,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4575,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "473"
										},
										{
											"begin": 4620,
											"end": 4627,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 4611,
											"end": 4617,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4600,
											"end": 4609,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 4596,
											"end": 4618,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4575,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "391"
										},
										{
											"begin": 4575,
											"end": 4628,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4575,
											"end": 4628,
											"name": "tag",
											"source": 13,
											"value": "473"
										},
										{
											"begin": 4575,
											"end": 4628,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4565,
											"end": 4628,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4565,
											"end": 4628,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4520,
											"end": 4638,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4645,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4645,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4645,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4645,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4645,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4645,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4651,
											"end": 4737,
											"name": "tag",
											"source": 13,
											"value": "398"
										},
										{
											"begin": 4651,
											"end": 4737,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4686,
											"end": 4693,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4726,
											"end": 4730,
											"name": "PUSH",
											"source": 13,
											"value": "FF"
										},
										{
											"begin": 4719,
											"end": 4724,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4715,
											"end": 4731,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4704,
											"end": 4731,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4704,
											"end": 4731,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4651,
											"end": 4737,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4651,
											"end": 4737,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4651,
											"end": 4737,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4651,
											"end": 4737,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4743,
											"end": 4855,
											"name": "tag",
											"source": 13,
											"value": "399"
										},
										{
											"begin": 4743,
											"end": 4855,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4826,
											"end": 4848,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "476"
										},
										{
											"begin": 4842,
											"end": 4847,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4826,
											"end": 4848,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "398"
										},
										{
											"begin": 4826,
											"end": 4848,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4826,
											"end": 4848,
											"name": "tag",
											"source": 13,
											"value": "476"
										},
										{
											"begin": 4826,
											"end": 4848,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4821,
											"end": 4824,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4814,
											"end": 4849,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4743,
											"end": 4855,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4743,
											"end": 4855,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4743,
											"end": 4855,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4861,
											"end": 5075,
											"name": "tag",
											"source": 13,
											"value": "68"
										},
										{
											"begin": 4861,
											"end": 5075,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4950,
											"end": 4954,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4988,
											"end": 4990,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4977,
											"end": 4986,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4973,
											"end": 4991,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4965,
											"end": 4991,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4965,
											"end": 4991,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5001,
											"end": 5068,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "478"
										},
										{
											"begin": 5065,
											"end": 5066,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5054,
											"end": 5063,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5050,
											"end": 5067,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5041,
											"end": 5047,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5001,
											"end": 5068,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "399"
										},
										{
											"begin": 5001,
											"end": 5068,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5001,
											"end": 5068,
											"name": "tag",
											"source": 13,
											"value": "478"
										},
										{
											"begin": 5001,
											"end": 5068,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4861,
											"end": 5075,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4861,
											"end": 5075,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4861,
											"end": 5075,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4861,
											"end": 5075,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4861,
											"end": 5075,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5081,
											"end": 5199,
											"name": "tag",
											"source": 13,
											"value": "400"
										},
										{
											"begin": 5081,
											"end": 5199,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5168,
											"end": 5192,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "480"
										},
										{
											"begin": 5186,
											"end": 5191,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5168,
											"end": 5192,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "393"
										},
										{
											"begin": 5168,
											"end": 5192,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5168,
											"end": 5192,
											"name": "tag",
											"source": 13,
											"value": "480"
										},
										{
											"begin": 5168,
											"end": 5192,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5163,
											"end": 5166,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5156,
											"end": 5193,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5081,
											"end": 5199,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5081,
											"end": 5199,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5081,
											"end": 5199,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "tag",
											"source": 13,
											"value": "72"
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5298,
											"end": 5302,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5336,
											"end": 5338,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5325,
											"end": 5334,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5321,
											"end": 5339,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5313,
											"end": 5339,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5313,
											"end": 5339,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5349,
											"end": 5420,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "482"
										},
										{
											"begin": 5417,
											"end": 5418,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5406,
											"end": 5415,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5402,
											"end": 5419,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5393,
											"end": 5399,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5349,
											"end": 5420,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "400"
										},
										{
											"begin": 5349,
											"end": 5420,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5349,
											"end": 5420,
											"name": "tag",
											"source": 13,
											"value": "482"
										},
										{
											"begin": 5349,
											"end": 5420,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5205,
											"end": 5427,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5433,
											"end": 5762,
											"name": "tag",
											"source": 13,
											"value": "75"
										},
										{
											"begin": 5433,
											"end": 5762,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5492,
											"end": 5498,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5541,
											"end": 5543,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5538,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5520,
											"end": 5527,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5516,
											"end": 5539,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 5512,
											"end": 5544,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 5509,
											"end": 5628,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 5509,
											"end": 5628,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "484"
										},
										{
											"begin": 5509,
											"end": 5628,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5547,
											"end": 5626,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "485"
										},
										{
											"begin": 5547,
											"end": 5626,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "388"
										},
										{
											"begin": 5547,
											"end": 5626,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5547,
											"end": 5626,
											"name": "tag",
											"source": 13,
											"value": "485"
										},
										{
											"begin": 5547,
											"end": 5626,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5509,
											"end": 5628,
											"name": "tag",
											"source": 13,
											"value": "484"
										},
										{
											"begin": 5509,
											"end": 5628,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5667,
											"end": 5668,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5692,
											"end": 5745,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "486"
										},
										{
											"begin": 5737,
											"end": 5744,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5728,
											"end": 5734,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5717,
											"end": 5726,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5713,
											"end": 5735,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5692,
											"end": 5745,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "395"
										},
										{
											"begin": 5692,
											"end": 5745,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5692,
											"end": 5745,
											"name": "tag",
											"source": 13,
											"value": "486"
										},
										{
											"begin": 5692,
											"end": 5745,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5682,
											"end": 5745,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5682,
											"end": 5745,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5638,
											"end": 5755,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5433,
											"end": 5762,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 5433,
											"end": 5762,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5433,
											"end": 5762,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5433,
											"end": 5762,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5433,
											"end": 5762,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5768,
											"end": 6242,
											"name": "tag",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 5768,
											"end": 6242,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5836,
											"end": 5842,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5844,
											"end": 5850,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5893,
											"end": 5895,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5881,
											"end": 5890,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5872,
											"end": 5879,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5868,
											"end": 5891,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 5864,
											"end": 5896,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 5861,
											"end": 5980,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 5861,
											"end": 5980,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "488"
										},
										{
											"begin": 5861,
											"end": 5980,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5899,
											"end": 5978,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "489"
										},
										{
											"begin": 5899,
											"end": 5978,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "388"
										},
										{
											"begin": 5899,
											"end": 5978,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5899,
											"end": 5978,
											"name": "tag",
											"source": 13,
											"value": "489"
										},
										{
											"begin": 5899,
											"end": 5978,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5861,
											"end": 5980,
											"name": "tag",
											"source": 13,
											"value": "488"
										},
										{
											"begin": 5861,
											"end": 5980,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6019,
											"end": 6020,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6044,
											"end": 6097,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "490"
										},
										{
											"begin": 6089,
											"end": 6096,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 6080,
											"end": 6086,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6069,
											"end": 6078,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 6065,
											"end": 6087,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6044,
											"end": 6097,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "391"
										},
										{
											"begin": 6044,
											"end": 6097,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6044,
											"end": 6097,
											"name": "tag",
											"source": 13,
											"value": "490"
										},
										{
											"begin": 6044,
											"end": 6097,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6034,
											"end": 6097,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6034,
											"end": 6097,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5990,
											"end": 6107,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6146,
											"end": 6148,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6172,
											"end": 6225,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "491"
										},
										{
											"begin": 6217,
											"end": 6224,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 6208,
											"end": 6214,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6197,
											"end": 6206,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 6193,
											"end": 6215,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6172,
											"end": 6225,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "395"
										},
										{
											"begin": 6172,
											"end": 6225,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6172,
											"end": 6225,
											"name": "tag",
											"source": 13,
											"value": "491"
										},
										{
											"begin": 6172,
											"end": 6225,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6162,
											"end": 6225,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6162,
											"end": 6225,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6117,
											"end": 6235,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5768,
											"end": 6242,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 5768,
											"end": 6242,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5768,
											"end": 6242,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 5768,
											"end": 6242,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5768,
											"end": 6242,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5768,
											"end": 6242,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6248,
											"end": 6308,
											"name": "tag",
											"source": 13,
											"value": "401"
										},
										{
											"begin": 6248,
											"end": 6308,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6276,
											"end": 6279,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6297,
											"end": 6302,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6290,
											"end": 6302,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6290,
											"end": 6302,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6248,
											"end": 6308,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6248,
											"end": 6308,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6248,
											"end": 6308,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6248,
											"end": 6308,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6314,
											"end": 6456,
											"name": "tag",
											"source": 13,
											"value": "402"
										},
										{
											"begin": 6314,
											"end": 6456,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6364,
											"end": 6373,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6397,
											"end": 6450,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "494"
										},
										{
											"begin": 6415,
											"end": 6449,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "495"
										},
										{
											"begin": 6424,
											"end": 6448,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "496"
										},
										{
											"begin": 6442,
											"end": 6447,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6424,
											"end": 6448,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "392"
										},
										{
											"begin": 6424,
											"end": 6448,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6424,
											"end": 6448,
											"name": "tag",
											"source": 13,
											"value": "496"
										},
										{
											"begin": 6424,
											"end": 6448,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6415,
											"end": 6449,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "401"
										},
										{
											"begin": 6415,
											"end": 6449,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6415,
											"end": 6449,
											"name": "tag",
											"source": 13,
											"value": "495"
										},
										{
											"begin": 6415,
											"end": 6449,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6397,
											"end": 6450,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "392"
										},
										{
											"begin": 6397,
											"end": 6450,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6397,
											"end": 6450,
											"name": "tag",
											"source": 13,
											"value": "494"
										},
										{
											"begin": 6397,
											"end": 6450,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6384,
											"end": 6450,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6384,
											"end": 6450,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6314,
											"end": 6456,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6314,
											"end": 6456,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6314,
											"end": 6456,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6314,
											"end": 6456,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6462,
											"end": 6588,
											"name": "tag",
											"source": 13,
											"value": "403"
										},
										{
											"begin": 6462,
											"end": 6588,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6512,
											"end": 6521,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6545,
											"end": 6582,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "498"
										},
										{
											"begin": 6576,
											"end": 6581,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6545,
											"end": 6582,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "402"
										},
										{
											"begin": 6545,
											"end": 6582,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6545,
											"end": 6582,
											"name": "tag",
											"source": 13,
											"value": "498"
										},
										{
											"begin": 6545,
											"end": 6582,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6532,
											"end": 6582,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6532,
											"end": 6582,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6462,
											"end": 6588,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6462,
											"end": 6588,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6462,
											"end": 6588,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6462,
											"end": 6588,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6594,
											"end": 6735,
											"name": "tag",
											"source": 13,
											"value": "404"
										},
										{
											"begin": 6594,
											"end": 6735,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6659,
											"end": 6668,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6692,
											"end": 6729,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "500"
										},
										{
											"begin": 6723,
											"end": 6728,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6692,
											"end": 6729,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "403"
										},
										{
											"begin": 6692,
											"end": 6729,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6692,
											"end": 6729,
											"name": "tag",
											"source": 13,
											"value": "500"
										},
										{
											"begin": 6692,
											"end": 6729,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6679,
											"end": 6729,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6679,
											"end": 6729,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6594,
											"end": 6735,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6594,
											"end": 6735,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6594,
											"end": 6735,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6594,
											"end": 6735,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6741,
											"end": 6902,
											"name": "tag",
											"source": 13,
											"value": "405"
										},
										{
											"begin": 6741,
											"end": 6902,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6843,
											"end": 6895,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "502"
										},
										{
											"begin": 6889,
											"end": 6894,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6843,
											"end": 6895,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "404"
										},
										{
											"begin": 6843,
											"end": 6895,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6843,
											"end": 6895,
											"name": "tag",
											"source": 13,
											"value": "502"
										},
										{
											"begin": 6843,
											"end": 6895,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6838,
											"end": 6841,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6831,
											"end": 6896,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6741,
											"end": 6902,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6741,
											"end": 6902,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6741,
											"end": 6902,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6908,
											"end": 7160,
											"name": "tag",
											"source": 13,
											"value": "94"
										},
										{
											"begin": 6908,
											"end": 7160,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7016,
											"end": 7020,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7054,
											"end": 7056,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7043,
											"end": 7052,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7039,
											"end": 7057,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7031,
											"end": 7057,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7031,
											"end": 7057,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7067,
											"end": 7153,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "504"
										},
										{
											"begin": 7150,
											"end": 7151,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7139,
											"end": 7148,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 7135,
											"end": 7152,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7126,
											"end": 7132,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 7067,
											"end": 7153,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "405"
										},
										{
											"begin": 7067,
											"end": 7153,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7067,
											"end": 7153,
											"name": "tag",
											"source": 13,
											"value": "504"
										},
										{
											"begin": 7067,
											"end": 7153,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6908,
											"end": 7160,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6908,
											"end": 7160,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6908,
											"end": 7160,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6908,
											"end": 7160,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6908,
											"end": 7160,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7166,
											"end": 7785,
											"name": "tag",
											"source": 13,
											"value": "112"
										},
										{
											"begin": 7166,
											"end": 7785,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7243,
											"end": 7249,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7251,
											"end": 7257,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7259,
											"end": 7265,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7308,
											"end": 7310,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 7296,
											"end": 7305,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 7287,
											"end": 7294,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 7283,
											"end": 7306,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 7279,
											"end": 7311,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7395,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7395,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "506"
										},
										{
											"begin": 7276,
											"end": 7395,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7314,
											"end": 7393,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "507"
										},
										{
											"begin": 7314,
											"end": 7393,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "388"
										},
										{
											"begin": 7314,
											"end": 7393,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7314,
											"end": 7393,
											"name": "tag",
											"source": 13,
											"value": "507"
										},
										{
											"begin": 7314,
											"end": 7393,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7276,
											"end": 7395,
											"name": "tag",
											"source": 13,
											"value": "506"
										},
										{
											"begin": 7276,
											"end": 7395,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7434,
											"end": 7435,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7459,
											"end": 7512,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "508"
										},
										{
											"begin": 7504,
											"end": 7511,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 7495,
											"end": 7501,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7484,
											"end": 7493,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 7480,
											"end": 7502,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7459,
											"end": 7512,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "391"
										},
										{
											"begin": 7459,
											"end": 7512,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7459,
											"end": 7512,
											"name": "tag",
											"source": 13,
											"value": "508"
										},
										{
											"begin": 7459,
											"end": 7512,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7449,
											"end": 7512,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 7449,
											"end": 7512,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7405,
											"end": 7522,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7561,
											"end": 7563,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7587,
											"end": 7640,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "509"
										},
										{
											"begin": 7632,
											"end": 7639,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 7623,
											"end": 7629,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7612,
											"end": 7621,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 7608,
											"end": 7630,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7587,
											"end": 7640,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "395"
										},
										{
											"begin": 7587,
											"end": 7640,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7587,
											"end": 7640,
											"name": "tag",
											"source": 13,
											"value": "509"
										},
										{
											"begin": 7587,
											"end": 7640,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7577,
											"end": 7640,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 7577,
											"end": 7640,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7532,
											"end": 7650,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7689,
											"end": 7691,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7715,
											"end": 7768,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "510"
										},
										{
											"begin": 7760,
											"end": 7767,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 7751,
											"end": 7757,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7740,
											"end": 7749,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 7736,
											"end": 7758,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7715,
											"end": 7768,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "395"
										},
										{
											"begin": 7715,
											"end": 7768,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7715,
											"end": 7768,
											"name": "tag",
											"source": 13,
											"value": "510"
										},
										{
											"begin": 7715,
											"end": 7768,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7705,
											"end": 7768,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7705,
											"end": 7768,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7660,
											"end": 7778,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7166,
											"end": 7785,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 7166,
											"end": 7785,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7166,
											"end": 7785,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 7166,
											"end": 7785,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7166,
											"end": 7785,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 7166,
											"end": 7785,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7791,
											"end": 8265,
											"name": "tag",
											"source": 13,
											"value": "137"
										},
										{
											"begin": 7791,
											"end": 8265,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7859,
											"end": 7865,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7867,
											"end": 7873,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7916,
											"end": 7918,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7904,
											"end": 7913,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 7895,
											"end": 7902,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 7891,
											"end": 7914,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 7887,
											"end": 7919,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 7884,
											"end": 8003,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 7884,
											"end": 8003,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "512"
										},
										{
											"begin": 7884,
											"end": 8003,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7922,
											"end": 8001,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "513"
										},
										{
											"begin": 7922,
											"end": 8001,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "388"
										},
										{
											"begin": 7922,
											"end": 8001,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7922,
											"end": 8001,
											"name": "tag",
											"source": 13,
											"value": "513"
										},
										{
											"begin": 7922,
											"end": 8001,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7884,
											"end": 8003,
											"name": "tag",
											"source": 13,
											"value": "512"
										},
										{
											"begin": 7884,
											"end": 8003,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8042,
											"end": 8043,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 8067,
											"end": 8120,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "514"
										},
										{
											"begin": 8112,
											"end": 8119,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 8103,
											"end": 8109,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8092,
											"end": 8101,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 8088,
											"end": 8110,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8067,
											"end": 8120,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "395"
										},
										{
											"begin": 8067,
											"end": 8120,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8067,
											"end": 8120,
											"name": "tag",
											"source": 13,
											"value": "514"
										},
										{
											"begin": 8067,
											"end": 8120,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8057,
											"end": 8120,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 8057,
											"end": 8120,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8013,
											"end": 8130,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8169,
											"end": 8171,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8195,
											"end": 8248,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "515"
										},
										{
											"begin": 8240,
											"end": 8247,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 8231,
											"end": 8237,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8220,
											"end": 8229,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 8216,
											"end": 8238,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8195,
											"end": 8248,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "395"
										},
										{
											"begin": 8195,
											"end": 8248,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8195,
											"end": 8248,
											"name": "tag",
											"source": 13,
											"value": "515"
										},
										{
											"begin": 8195,
											"end": 8248,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8185,
											"end": 8248,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8185,
											"end": 8248,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8140,
											"end": 8258,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7791,
											"end": 8265,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 7791,
											"end": 8265,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7791,
											"end": 8265,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 7791,
											"end": 8265,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7791,
											"end": 8265,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7791,
											"end": 8265,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8271,
											"end": 8414,
											"name": "tag",
											"source": 13,
											"value": "406"
										},
										{
											"begin": 8271,
											"end": 8414,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8328,
											"end": 8333,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 8359,
											"end": 8365,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 8353,
											"end": 8366,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 8344,
											"end": 8366,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8344,
											"end": 8366,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8375,
											"end": 8408,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "517"
										},
										{
											"begin": 8402,
											"end": 8407,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 8375,
											"end": 8408,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "390"
										},
										{
											"begin": 8375,
											"end": 8408,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8375,
											"end": 8408,
											"name": "tag",
											"source": 13,
											"value": "517"
										},
										{
											"begin": 8375,
											"end": 8408,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8271,
											"end": 8414,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 8271,
											"end": 8414,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8271,
											"end": 8414,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8271,
											"end": 8414,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8271,
											"end": 8414,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8420,
											"end": 8771,
											"name": "tag",
											"source": 13,
											"value": "149"
										},
										{
											"begin": 8420,
											"end": 8771,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8490,
											"end": 8496,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 8539,
											"end": 8541,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8527,
											"end": 8536,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8518,
											"end": 8525,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 8514,
											"end": 8537,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 8510,
											"end": 8542,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 8507,
											"end": 8626,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 8507,
											"end": 8626,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "519"
										},
										{
											"begin": 8507,
											"end": 8626,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 8545,
											"end": 8624,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "520"
										},
										{
											"begin": 8545,
											"end": 8624,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "388"
										},
										{
											"begin": 8545,
											"end": 8624,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8545,
											"end": 8624,
											"name": "tag",
											"source": 13,
											"value": "520"
										},
										{
											"begin": 8545,
											"end": 8624,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8507,
											"end": 8626,
											"name": "tag",
											"source": 13,
											"value": "519"
										},
										{
											"begin": 8507,
											"end": 8626,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8665,
											"end": 8666,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 8690,
											"end": 8754,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "521"
										},
										{
											"begin": 8746,
											"end": 8753,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 8737,
											"end": 8743,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8726,
											"end": 8735,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 8722,
											"end": 8744,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8690,
											"end": 8754,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "406"
										},
										{
											"begin": 8690,
											"end": 8754,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8690,
											"end": 8754,
											"name": "tag",
											"source": 13,
											"value": "521"
										},
										{
											"begin": 8690,
											"end": 8754,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8680,
											"end": 8754,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8680,
											"end": 8754,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8636,
											"end": 8764,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8420,
											"end": 8771,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 8420,
											"end": 8771,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8420,
											"end": 8771,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8420,
											"end": 8771,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8420,
											"end": 8771,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8777,
											"end": 8957,
											"name": "tag",
											"source": 13,
											"value": "407"
										},
										{
											"begin": 8777,
											"end": 8957,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8825,
											"end": 8902,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8822,
											"end": 8823,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 8815,
											"end": 8903,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8922,
											"end": 8926,
											"name": "PUSH",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 8919,
											"end": 8920,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 8912,
											"end": 8927,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8946,
											"end": 8950,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 8943,
											"end": 8944,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 8936,
											"end": 8951,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 8963,
											"end": 9283,
											"name": "tag",
											"source": 13,
											"value": "152"
										},
										{
											"begin": 8963,
											"end": 9283,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9007,
											"end": 9013,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 9044,
											"end": 9045,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 9038,
											"end": 9042,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9034,
											"end": 9046,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 9024,
											"end": 9046,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 9024,
											"end": 9046,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9091,
											"end": 9092,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 9085,
											"end": 9089,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9081,
											"end": 9093,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 9112,
											"end": 9130,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 9102,
											"end": 9183,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "524"
										},
										{
											"begin": 9102,
											"end": 9183,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 9168,
											"end": 9172,
											"name": "PUSH",
											"source": 13,
											"value": "7F"
										},
										{
											"begin": 9160,
											"end": 9166,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9156,
											"end": 9173,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 9146,
											"end": 9173,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 9146,
											"end": 9173,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9102,
											"end": 9183,
											"name": "tag",
											"source": 13,
											"value": "524"
										},
										{
											"begin": 9102,
											"end": 9183,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9230,
											"end": 9232,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 9222,
											"end": 9228,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9219,
											"end": 9233,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 9199,
											"end": 9217,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 9196,
											"end": 9234,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 9193,
											"end": 9277,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "525"
										},
										{
											"begin": 9193,
											"end": 9277,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 9249,
											"end": 9267,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "526"
										},
										{
											"begin": 9249,
											"end": 9267,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "407"
										},
										{
											"begin": 9249,
											"end": 9267,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9249,
											"end": 9267,
											"name": "tag",
											"source": 13,
											"value": "526"
										},
										{
											"begin": 9249,
											"end": 9267,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9193,
											"end": 9277,
											"name": "tag",
											"source": 13,
											"value": "525"
										},
										{
											"begin": 9193,
											"end": 9277,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9014,
											"end": 9283,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8963,
											"end": 9283,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8963,
											"end": 9283,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8963,
											"end": 9283,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8963,
											"end": 9283,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9289,
											"end": 9469,
											"name": "tag",
											"source": 13,
											"value": "408"
										},
										{
											"begin": 9289,
											"end": 9469,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9337,
											"end": 9414,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9334,
											"end": 9335,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 9327,
											"end": 9415,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9434,
											"end": 9438,
											"name": "PUSH",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 9431,
											"end": 9432,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 9424,
											"end": 9439,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9458,
											"end": 9462,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 9455,
											"end": 9456,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 9448,
											"end": 9463,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 9475,
											"end": 9663,
											"name": "tag",
											"source": 13,
											"value": "179"
										},
										{
											"begin": 9475,
											"end": 9663,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9513,
											"end": 9516,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 9532,
											"end": 9550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "529"
										},
										{
											"begin": 9548,
											"end": 9549,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9532,
											"end": 9550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "398"
										},
										{
											"begin": 9532,
											"end": 9550,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9532,
											"end": 9550,
											"name": "tag",
											"source": 13,
											"value": "529"
										},
										{
											"begin": 9532,
											"end": 9550,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9527,
											"end": 9550,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 9527,
											"end": 9550,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9564,
											"end": 9582,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "530"
										},
										{
											"begin": 9580,
											"end": 9581,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 9564,
											"end": 9582,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "398"
										},
										{
											"begin": 9564,
											"end": 9582,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9564,
											"end": 9582,
											"name": "tag",
											"source": 13,
											"value": "530"
										},
										{
											"begin": 9564,
											"end": 9582,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9559,
											"end": 9582,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 9559,
											"end": 9582,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9605,
											"end": 9606,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9602,
											"end": 9603,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9598,
											"end": 9607,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9591,
											"end": 9607,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 9591,
											"end": 9607,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9628,
											"end": 9632,
											"name": "PUSH",
											"source": 13,
											"value": "FF"
										},
										{
											"begin": 9623,
											"end": 9626,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 9620,
											"end": 9633,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 9617,
											"end": 9656,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 9617,
											"end": 9656,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "531"
										},
										{
											"begin": 9617,
											"end": 9656,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 9636,
											"end": 9654,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "532"
										},
										{
											"begin": 9636,
											"end": 9654,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "408"
										},
										{
											"begin": 9636,
											"end": 9654,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9636,
											"end": 9654,
											"name": "tag",
											"source": 13,
											"value": "532"
										},
										{
											"begin": 9636,
											"end": 9654,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9617,
											"end": 9656,
											"name": "tag",
											"source": 13,
											"value": "531"
										},
										{
											"begin": 9617,
											"end": 9656,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9475,
											"end": 9663,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 9475,
											"end": 9663,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 9475,
											"end": 9663,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9475,
											"end": 9663,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9475,
											"end": 9663,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9669,
											"end": 9839,
											"name": "tag",
											"source": 13,
											"value": "409"
										},
										{
											"begin": 9669,
											"end": 9839,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9809,
											"end": 9831,
											"name": "PUSH",
											"source": 13,
											"value": "53656E646572206973204E6F74205661756C7473000000000000000000000000"
										},
										{
											"begin": 9805,
											"end": 9806,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 9797,
											"end": 9803,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9793,
											"end": 9807,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9786,
											"end": 9832,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9669,
											"end": 9839,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9669,
											"end": 9839,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9845,
											"end": 10211,
											"name": "tag",
											"source": 13,
											"value": "410"
										},
										{
											"begin": 9845,
											"end": 10211,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9987,
											"end": 9990,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 10008,
											"end": 10075,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "535"
										},
										{
											"begin": 10072,
											"end": 10074,
											"name": "PUSH",
											"source": 13,
											"value": "14"
										},
										{
											"begin": 10067,
											"end": 10070,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 10008,
											"end": 10075,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "383"
										},
										{
											"begin": 10008,
											"end": 10075,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 10008,
											"end": 10075,
											"name": "tag",
											"source": 13,
											"value": "535"
										},
										{
											"begin": 10008,
											"end": 10075,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10001,
											"end": 10075,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 10001,
											"end": 10075,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10084,
											"end": 10177,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "536"
										},
										{
											"begin": 10173,
											"end": 10176,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10084,
											"end": 10177,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "409"
										},
										{
											"begin": 10084,
											"end": 10177,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 10084,
											"end": 10177,
											"name": "tag",
											"source": 13,
											"value": "536"
										},
										{
											"begin": 10084,
											"end": 10177,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10202,
											"end": 10204,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 10197,
											"end": 10200,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10193,
											"end": 10205,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10186,
											"end": 10205,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10186,
											"end": 10205,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9845,
											"end": 10211,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 9845,
											"end": 10211,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 9845,
											"end": 10211,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9845,
											"end": 10211,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 10217,
											"end": 10636,
											"name": "tag",
											"source": 13,
											"value": "187"
										},
										{
											"begin": 10217,
											"end": 10636,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10383,
											"end": 10387,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 10421,
											"end": 10423,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 10410,
											"end": 10419,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10406,
											"end": 10424,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10398,
											"end": 10424,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10398,
											"end": 10424,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10470,
											"end": 10479,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10464,
											"end": 10468,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10460,
											"end": 10480,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 10456,
											"end": 10457,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 10445,
											"end": 10454,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 10441,
											"end": 10458,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10434,
											"end": 10481,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10498,
											"end": 10629,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "538"
										},
										{
											"begin": 10624,
											"end": 10628,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10498,
											"end": 10629,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "410"
										},
										{
											"begin": 10498,
											"end": 10629,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 10498,
											"end": 10629,
											"name": "tag",
											"source": 13,
											"value": "538"
										},
										{
											"begin": 10498,
											"end": 10629,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10490,
											"end": 10629,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10490,
											"end": 10629,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10217,
											"end": 10636,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 10217,
											"end": 10636,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10217,
											"end": 10636,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10217,
											"end": 10636,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 10642,
											"end": 10821,
											"name": "tag",
											"source": 13,
											"value": "411"
										},
										{
											"begin": 10642,
											"end": 10821,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10782,
											"end": 10813,
											"name": "PUSH",
											"source": 13,
											"value": "416D6F756E74206D7573742062652067726561746572207468616E2030000000"
										},
										{
											"begin": 10778,
											"end": 10779,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 10770,
											"end": 10776,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10766,
											"end": 10780,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10759,
											"end": 10814,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10642,
											"end": 10821,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10642,
											"end": 10821,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 10827,
											"end": 11193,
											"name": "tag",
											"source": 13,
											"value": "412"
										},
										{
											"begin": 10827,
											"end": 11193,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10969,
											"end": 10972,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 10990,
											"end": 11057,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "541"
										},
										{
											"begin": 11054,
											"end": 11056,
											"name": "PUSH",
											"source": 13,
											"value": "1D"
										},
										{
											"begin": 11049,
											"end": 11052,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 10990,
											"end": 11057,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "383"
										},
										{
											"begin": 10990,
											"end": 11057,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 10990,
											"end": 11057,
											"name": "tag",
											"source": 13,
											"value": "541"
										},
										{
											"begin": 10990,
											"end": 11057,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10983,
											"end": 11057,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 10983,
											"end": 11057,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11066,
											"end": 11159,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "542"
										},
										{
											"begin": 11155,
											"end": 11158,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 11066,
											"end": 11159,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "411"
										},
										{
											"begin": 11066,
											"end": 11159,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 11066,
											"end": 11159,
											"name": "tag",
											"source": 13,
											"value": "542"
										},
										{
											"begin": 11066,
											"end": 11159,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11184,
											"end": 11186,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 11179,
											"end": 11182,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 11175,
											"end": 11187,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11168,
											"end": 11187,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 11168,
											"end": 11187,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10827,
											"end": 11193,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 10827,
											"end": 11193,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10827,
											"end": 11193,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10827,
											"end": 11193,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 11199,
											"end": 11618,
											"name": "tag",
											"source": 13,
											"value": "191"
										},
										{
											"begin": 11199,
											"end": 11618,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11365,
											"end": 11369,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 11403,
											"end": 11405,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 11392,
											"end": 11401,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 11388,
											"end": 11406,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11380,
											"end": 11406,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 11380,
											"end": 11406,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11452,
											"end": 11461,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 11446,
											"end": 11450,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 11442,
											"end": 11462,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 11438,
											"end": 11439,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 11427,
											"end": 11436,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 11423,
											"end": 11440,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11416,
											"end": 11463,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 11480,
											"end": 11611,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "544"
										},
										{
											"begin": 11606,
											"end": 11610,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 11480,
											"end": 11611,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "412"
										},
										{
											"begin": 11480,
											"end": 11611,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 11480,
											"end": 11611,
											"name": "tag",
											"source": 13,
											"value": "544"
										},
										{
											"begin": 11480,
											"end": 11611,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11472,
											"end": 11611,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 11472,
											"end": 11611,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11199,
											"end": 11618,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 11199,
											"end": 11618,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 11199,
											"end": 11618,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11199,
											"end": 11618,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 11624,
											"end": 12066,
											"name": "tag",
											"source": 13,
											"value": "195"
										},
										{
											"begin": 11624,
											"end": 12066,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11773,
											"end": 11777,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 11811,
											"end": 11813,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 11800,
											"end": 11809,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 11796,
											"end": 11814,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11788,
											"end": 11814,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 11788,
											"end": 11814,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11824,
											"end": 11895,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "546"
										},
										{
											"begin": 11892,
											"end": 11893,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 11881,
											"end": 11890,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 11877,
											"end": 11894,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11868,
											"end": 11874,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 11824,
											"end": 11895,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "400"
										},
										{
											"begin": 11824,
											"end": 11895,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 11824,
											"end": 11895,
											"name": "tag",
											"source": 13,
											"value": "546"
										},
										{
											"begin": 11824,
											"end": 11895,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11905,
											"end": 11977,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "547"
										},
										{
											"begin": 11973,
											"end": 11975,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 11962,
											"end": 11971,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 11958,
											"end": 11976,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11949,
											"end": 11955,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 11905,
											"end": 11977,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "381"
										},
										{
											"begin": 11905,
											"end": 11977,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 11905,
											"end": 11977,
											"name": "tag",
											"source": 13,
											"value": "547"
										},
										{
											"begin": 11905,
											"end": 11977,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11987,
											"end": 12059,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "548"
										},
										{
											"begin": 12055,
											"end": 12057,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 12044,
											"end": 12053,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 12040,
											"end": 12058,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 12031,
											"end": 12037,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 11987,
											"end": 12059,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "381"
										},
										{
											"begin": 11987,
											"end": 12059,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 11987,
											"end": 12059,
											"name": "tag",
											"source": 13,
											"value": "548"
										},
										{
											"begin": 11987,
											"end": 12059,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11624,
											"end": 12066,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 11624,
											"end": 12066,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 11624,
											"end": 12066,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11624,
											"end": 12066,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11624,
											"end": 12066,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11624,
											"end": 12066,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11624,
											"end": 12066,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 12072,
											"end": 12263,
											"name": "tag",
											"source": 13,
											"value": "245"
										},
										{
											"begin": 12072,
											"end": 12263,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12112,
											"end": 12115,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 12131,
											"end": 12151,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "550"
										},
										{
											"begin": 12149,
											"end": 12150,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 12131,
											"end": 12151,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "380"
										},
										{
											"begin": 12131,
											"end": 12151,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 12131,
											"end": 12151,
											"name": "tag",
											"source": 13,
											"value": "550"
										},
										{
											"begin": 12131,
											"end": 12151,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12126,
											"end": 12151,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 12126,
											"end": 12151,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12165,
											"end": 12185,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "551"
										},
										{
											"begin": 12183,
											"end": 12184,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 12165,
											"end": 12185,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "380"
										},
										{
											"begin": 12165,
											"end": 12185,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 12165,
											"end": 12185,
											"name": "tag",
											"source": 13,
											"value": "551"
										},
										{
											"begin": 12165,
											"end": 12185,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12160,
											"end": 12185,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 12160,
											"end": 12185,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12208,
											"end": 12209,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 12205,
											"end": 12206,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 12201,
											"end": 12210,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 12194,
											"end": 12210,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 12194,
											"end": 12210,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12229,
											"end": 12232,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 12226,
											"end": 12227,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 12223,
											"end": 12233,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 12220,
											"end": 12256,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 12220,
											"end": 12256,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "552"
										},
										{
											"begin": 12220,
											"end": 12256,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 12236,
											"end": 12254,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "553"
										},
										{
											"begin": 12236,
											"end": 12254,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "408"
										},
										{
											"begin": 12236,
											"end": 12254,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 12236,
											"end": 12254,
											"name": "tag",
											"source": 13,
											"value": "553"
										},
										{
											"begin": 12236,
											"end": 12254,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12220,
											"end": 12256,
											"name": "tag",
											"source": 13,
											"value": "552"
										},
										{
											"begin": 12220,
											"end": 12256,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12072,
											"end": 12263,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 12072,
											"end": 12263,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 12072,
											"end": 12263,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12072,
											"end": 12263,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12072,
											"end": 12263,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 12269,
											"end": 12371,
											"name": "tag",
											"source": 13,
											"value": "413"
										},
										{
											"begin": 12269,
											"end": 12371,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12311,
											"end": 12319,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 12358,
											"end": 12363,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 12355,
											"end": 12356,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 12351,
											"end": 12364,
											"name": "SHR",
											"source": 13
										},
										{
											"begin": 12330,
											"end": 12364,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 12330,
											"end": 12364,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12269,
											"end": 12371,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 12269,
											"end": 12371,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 12269,
											"end": 12371,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12269,
											"end": 12371,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 12377,
											"end": 13225,
											"name": "tag",
											"source": 13,
											"value": "414"
										},
										{
											"begin": 12377,
											"end": 13225,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12438,
											"end": 12443,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 12445,
											"end": 12449,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 12469,
											"end": 12475,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 12460,
											"end": 12475,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 12460,
											"end": 12475,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12493,
											"end": 12498,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 12484,
											"end": 12498,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 12484,
											"end": 12498,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12507,
											"end": 13219,
											"name": "tag",
											"source": 13,
											"value": "556"
										},
										{
											"begin": 12507,
											"end": 13219,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12528,
											"end": 12529,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 12518,
											"end": 12526,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 12515,
											"end": 12530,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 12507,
											"end": 13219,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 12507,
											"end": 13219,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "558"
										},
										{
											"begin": 12507,
											"end": 13219,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 12623,
											"end": 12627,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 12618,
											"end": 12621,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 12614,
											"end": 12628,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 12608,
											"end": 12612,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 12605,
											"end": 12629,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 12602,
											"end": 12652,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 12602,
											"end": 12652,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "559"
										},
										{
											"begin": 12602,
											"end": 12652,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 12632,
											"end": 12650,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "560"
										},
										{
											"begin": 12632,
											"end": 12650,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "408"
										},
										{
											"begin": 12632,
											"end": 12650,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 12632,
											"end": 12650,
											"name": "tag",
											"source": 13,
											"value": "560"
										},
										{
											"begin": 12632,
											"end": 12650,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12602,
											"end": 12652,
											"name": "tag",
											"source": 13,
											"value": "559"
										},
										{
											"begin": 12602,
											"end": 12652,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12682,
											"end": 12683,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 12672,
											"end": 12680,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 12668,
											"end": 12684,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 12665,
											"end": 13116,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 12665,
											"end": 13116,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "561"
										},
										{
											"begin": 12665,
											"end": 13116,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 13097,
											"end": 13101,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 13090,
											"end": 13095,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13086,
											"end": 13102,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 13077,
											"end": 13102,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 13077,
											"end": 13102,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12665,
											"end": 13116,
											"name": "tag",
											"source": 13,
											"value": "561"
										},
										{
											"begin": 12665,
											"end": 13116,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13147,
											"end": 13151,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 13141,
											"end": 13145,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 13137,
											"end": 13152,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 13129,
											"end": 13152,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 13129,
											"end": 13152,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13177,
											"end": 13209,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "562"
										},
										{
											"begin": 13200,
											"end": 13208,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 13177,
											"end": 13209,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "413"
										},
										{
											"begin": 13177,
											"end": 13209,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 13177,
											"end": 13209,
											"name": "tag",
											"source": 13,
											"value": "562"
										},
										{
											"begin": 13177,
											"end": 13209,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13165,
											"end": 13209,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 13165,
											"end": 13209,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12507,
											"end": 13219,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "556"
										},
										{
											"begin": 12507,
											"end": 13219,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 12507,
											"end": 13219,
											"name": "tag",
											"source": 13,
											"value": "558"
										},
										{
											"begin": 12507,
											"end": 13219,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12377,
											"end": 13225,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 12377,
											"end": 13225,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12377,
											"end": 13225,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 12377,
											"end": 13225,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 12377,
											"end": 13225,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12377,
											"end": 13225,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12377,
											"end": 13225,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12377,
											"end": 13225,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 13231,
											"end": 14304,
											"name": "tag",
											"source": 13,
											"value": "415"
										},
										{
											"begin": 13231,
											"end": 14304,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13285,
											"end": 13290,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 13476,
											"end": 13484,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13466,
											"end": 13506,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "564"
										},
										{
											"begin": 13466,
											"end": 13506,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 13497,
											"end": 13498,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 13488,
											"end": 13498,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 13488,
											"end": 13498,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13499,
											"end": 13504,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "563"
										},
										{
											"begin": 13499,
											"end": 13504,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 13466,
											"end": 13506,
											"name": "tag",
											"source": 13,
											"value": "564"
										},
										{
											"begin": 13466,
											"end": 13506,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13525,
											"end": 13529,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 13515,
											"end": 13551,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "565"
										},
										{
											"begin": 13515,
											"end": 13551,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 13542,
											"end": 13543,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 13533,
											"end": 13543,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 13533,
											"end": 13543,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13544,
											"end": 13549,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "563"
										},
										{
											"begin": 13544,
											"end": 13549,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 13515,
											"end": 13551,
											"name": "tag",
											"source": 13,
											"value": "565"
										},
										{
											"begin": 13515,
											"end": 13551,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13611,
											"end": 13615,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 13659,
											"end": 13660,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 13654,
											"end": 13681,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 13654,
											"end": 13681,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 13654,
											"end": 13681,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "567"
										},
										{
											"begin": 13654,
											"end": 13681,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 13695,
											"end": 13696,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 13690,
											"end": 13881,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 13690,
											"end": 13881,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 13690,
											"end": 13881,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "568"
										},
										{
											"begin": 13690,
											"end": 13881,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 13604,
											"end": 13881,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "566"
										},
										{
											"begin": 13604,
											"end": 13881,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 13654,
											"end": 13681,
											"name": "tag",
											"source": 13,
											"value": "567"
										},
										{
											"begin": 13654,
											"end": 13681,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13672,
											"end": 13673,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 13663,
											"end": 13673,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 13663,
											"end": 13673,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13674,
											"end": 13679,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13674,
											"end": 13679,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "563"
										},
										{
											"begin": 13674,
											"end": 13679,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 13690,
											"end": 13881,
											"name": "tag",
											"source": 13,
											"value": "568"
										},
										{
											"begin": 13690,
											"end": 13881,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13735,
											"end": 13738,
											"name": "PUSH",
											"source": 13,
											"value": "FF"
										},
										{
											"begin": 13725,
											"end": 13733,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 13722,
											"end": 13739,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 13719,
											"end": 13762,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 13719,
											"end": 13762,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "569"
										},
										{
											"begin": 13719,
											"end": 13762,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 13742,
											"end": 13760,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "570"
										},
										{
											"begin": 13742,
											"end": 13760,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "408"
										},
										{
											"begin": 13742,
											"end": 13760,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 13742,
											"end": 13760,
											"name": "tag",
											"source": 13,
											"value": "570"
										},
										{
											"begin": 13742,
											"end": 13760,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13719,
											"end": 13762,
											"name": "tag",
											"source": 13,
											"value": "569"
										},
										{
											"begin": 13719,
											"end": 13762,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13791,
											"end": 13799,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 13788,
											"end": 13789,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 13784,
											"end": 13800,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 13775,
											"end": 13800,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 13775,
											"end": 13800,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13826,
											"end": 13829,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 13819,
											"end": 13824,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13816,
											"end": 13830,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 13813,
											"end": 13853,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 13813,
											"end": 13853,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "571"
										},
										{
											"begin": 13813,
											"end": 13853,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 13833,
											"end": 13851,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "572"
										},
										{
											"begin": 13833,
											"end": 13851,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "408"
										},
										{
											"begin": 13833,
											"end": 13851,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 13833,
											"end": 13851,
											"name": "tag",
											"source": 13,
											"value": "572"
										},
										{
											"begin": 13833,
											"end": 13851,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13813,
											"end": 13853,
											"name": "tag",
											"source": 13,
											"value": "571"
										},
										{
											"begin": 13813,
											"end": 13853,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13866,
											"end": 13871,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13866,
											"end": 13871,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "563"
										},
										{
											"begin": 13866,
											"end": 13871,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 13604,
											"end": 13881,
											"name": "tag",
											"source": 13,
											"value": "566"
										},
										{
											"begin": 13604,
											"end": 13881,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13604,
											"end": 13881,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13990,
											"end": 13992,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 13980,
											"end": 13988,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 13977,
											"end": 13993,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 13971,
											"end": 13974,
											"name": "PUSH",
											"source": 13,
											"value": "133"
										},
										{
											"begin": 13965,
											"end": 13969,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 13962,
											"end": 13975,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 13958,
											"end": 13994,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 13940,
											"end": 13942,
											"name": "PUSH",
											"source": 13,
											"value": "4E"
										},
										{
											"begin": 13930,
											"end": 13938,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 13927,
											"end": 13943,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 13922,
											"end": 13924,
											"name": "PUSH",
											"source": 13,
											"value": "B"
										},
										{
											"begin": 13916,
											"end": 13920,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 13913,
											"end": 13925,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 13909,
											"end": 13944,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 13893,
											"end": 14004,
											"name": "OR",
											"source": 13
										},
										{
											"begin": 13890,
											"end": 14136,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 13890,
											"end": 14136,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "573"
										},
										{
											"begin": 13890,
											"end": 14136,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 14046,
											"end": 14054,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 14040,
											"end": 14044,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 14036,
											"end": 14055,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 14027,
											"end": 14055,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 14027,
											"end": 14055,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14081,
											"end": 14084,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 14074,
											"end": 14079,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 14071,
											"end": 14085,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 14068,
											"end": 14108,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 14068,
											"end": 14108,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "574"
										},
										{
											"begin": 14068,
											"end": 14108,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 14088,
											"end": 14106,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "575"
										},
										{
											"begin": 14088,
											"end": 14106,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "408"
										},
										{
											"begin": 14088,
											"end": 14106,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14088,
											"end": 14106,
											"name": "tag",
											"source": 13,
											"value": "575"
										},
										{
											"begin": 14088,
											"end": 14106,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14068,
											"end": 14108,
											"name": "tag",
											"source": 13,
											"value": "574"
										},
										{
											"begin": 14068,
											"end": 14108,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14121,
											"end": 14126,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "563"
										},
										{
											"begin": 14121,
											"end": 14126,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 13890,
											"end": 14136,
											"name": "tag",
											"source": 13,
											"value": "573"
										},
										{
											"begin": 13890,
											"end": 14136,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14161,
											"end": 14203,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "576"
										},
										{
											"begin": 14199,
											"end": 14202,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 14189,
											"end": 14197,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 14183,
											"end": 14187,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 14180,
											"end": 14181,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 14161,
											"end": 14203,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "414"
										},
										{
											"begin": 14161,
											"end": 14203,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14161,
											"end": 14203,
											"name": "tag",
											"source": 13,
											"value": "576"
										},
										{
											"begin": 14161,
											"end": 14203,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14146,
											"end": 14203,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 14146,
											"end": 14203,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14146,
											"end": 14203,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 14146,
											"end": 14203,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14235,
											"end": 14239,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 14230,
											"end": 14233,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 14226,
											"end": 14240,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 14219,
											"end": 14224,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 14216,
											"end": 14241,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 14213,
											"end": 14264,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 14213,
											"end": 14264,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "577"
										},
										{
											"begin": 14213,
											"end": 14264,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 14244,
											"end": 14262,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "578"
										},
										{
											"begin": 14244,
											"end": 14262,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "408"
										},
										{
											"begin": 14244,
											"end": 14262,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14244,
											"end": 14262,
											"name": "tag",
											"source": 13,
											"value": "578"
										},
										{
											"begin": 14244,
											"end": 14262,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14213,
											"end": 14264,
											"name": "tag",
											"source": 13,
											"value": "577"
										},
										{
											"begin": 14213,
											"end": 14264,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14293,
											"end": 14297,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 14286,
											"end": 14291,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 14282,
											"end": 14298,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 14273,
											"end": 14298,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 14273,
											"end": 14298,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13231,
											"end": 14304,
											"name": "tag",
											"source": 13,
											"value": "563"
										},
										{
											"begin": 13231,
											"end": 14304,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13231,
											"end": 14304,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 13231,
											"end": 14304,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 13231,
											"end": 14304,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13231,
											"end": 14304,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13231,
											"end": 14304,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13231,
											"end": 14304,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14310,
											"end": 14591,
											"name": "tag",
											"source": 13,
											"value": "248"
										},
										{
											"begin": 14310,
											"end": 14591,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14368,
											"end": 14373,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 14392,
											"end": 14415,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "580"
										},
										{
											"begin": 14410,
											"end": 14414,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 14392,
											"end": 14415,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "380"
										},
										{
											"begin": 14392,
											"end": 14415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14392,
											"end": 14415,
											"name": "tag",
											"source": 13,
											"value": "580"
										},
										{
											"begin": 14392,
											"end": 14415,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14384,
											"end": 14415,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 14384,
											"end": 14415,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14436,
											"end": 14461,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "581"
										},
										{
											"begin": 14452,
											"end": 14460,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 14436,
											"end": 14461,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "398"
										},
										{
											"begin": 14436,
											"end": 14461,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14436,
											"end": 14461,
											"name": "tag",
											"source": 13,
											"value": "581"
										},
										{
											"begin": 14436,
											"end": 14461,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14424,
											"end": 14461,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 14424,
											"end": 14461,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14480,
											"end": 14584,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "582"
										},
										{
											"begin": 14517,
											"end": 14583,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14507,
											"end": 14515,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 14501,
											"end": 14505,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 14480,
											"end": 14584,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "415"
										},
										{
											"begin": 14480,
											"end": 14584,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14480,
											"end": 14584,
											"name": "tag",
											"source": 13,
											"value": "582"
										},
										{
											"begin": 14480,
											"end": 14584,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14471,
											"end": 14584,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 14471,
											"end": 14584,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14310,
											"end": 14591,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 14310,
											"end": 14591,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 14310,
											"end": 14591,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14310,
											"end": 14591,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14310,
											"end": 14591,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14597,
											"end": 14791,
											"name": "tag",
											"source": 13,
											"value": "265"
										},
										{
											"begin": 14597,
											"end": 14791,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14637,
											"end": 14641,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 14657,
											"end": 14677,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "584"
										},
										{
											"begin": 14675,
											"end": 14676,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 14657,
											"end": 14677,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "380"
										},
										{
											"begin": 14657,
											"end": 14677,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14657,
											"end": 14677,
											"name": "tag",
											"source": 13,
											"value": "584"
										},
										{
											"begin": 14657,
											"end": 14677,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14652,
											"end": 14677,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 14652,
											"end": 14677,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14691,
											"end": 14711,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "585"
										},
										{
											"begin": 14709,
											"end": 14710,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 14691,
											"end": 14711,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "380"
										},
										{
											"begin": 14691,
											"end": 14711,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14691,
											"end": 14711,
											"name": "tag",
											"source": 13,
											"value": "585"
										},
										{
											"begin": 14691,
											"end": 14711,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14686,
											"end": 14711,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 14686,
											"end": 14711,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14735,
											"end": 14736,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 14732,
											"end": 14733,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 14728,
											"end": 14737,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 14720,
											"end": 14737,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 14720,
											"end": 14737,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14759,
											"end": 14760,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 14753,
											"end": 14757,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 14750,
											"end": 14761,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 14747,
											"end": 14784,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 14747,
											"end": 14784,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "586"
										},
										{
											"begin": 14747,
											"end": 14784,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 14764,
											"end": 14782,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "587"
										},
										{
											"begin": 14764,
											"end": 14782,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "408"
										},
										{
											"begin": 14764,
											"end": 14782,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14764,
											"end": 14782,
											"name": "tag",
											"source": 13,
											"value": "587"
										},
										{
											"begin": 14764,
											"end": 14782,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14747,
											"end": 14784,
											"name": "tag",
											"source": 13,
											"value": "586"
										},
										{
											"begin": 14747,
											"end": 14784,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14597,
											"end": 14791,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 14597,
											"end": 14791,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 14597,
											"end": 14791,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14597,
											"end": 14791,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14597,
											"end": 14791,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14797,
											"end": 15129,
											"name": "tag",
											"source": 13,
											"value": "304"
										},
										{
											"begin": 14797,
											"end": 15129,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14918,
											"end": 14922,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 14956,
											"end": 14958,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 14945,
											"end": 14954,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 14941,
											"end": 14959,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 14933,
											"end": 14959,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 14933,
											"end": 14959,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14969,
											"end": 15040,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "589"
										},
										{
											"begin": 15037,
											"end": 15038,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 15026,
											"end": 15035,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 15022,
											"end": 15039,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 15013,
											"end": 15019,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 14969,
											"end": 15040,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "381"
										},
										{
											"begin": 14969,
											"end": 15040,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14969,
											"end": 15040,
											"name": "tag",
											"source": 13,
											"value": "589"
										},
										{
											"begin": 14969,
											"end": 15040,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15050,
											"end": 15122,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "590"
										},
										{
											"begin": 15118,
											"end": 15120,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 15107,
											"end": 15116,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 15103,
											"end": 15121,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 15094,
											"end": 15100,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 15050,
											"end": 15122,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "381"
										},
										{
											"begin": 15050,
											"end": 15122,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 15050,
											"end": 15122,
											"name": "tag",
											"source": 13,
											"value": "590"
										},
										{
											"begin": 15050,
											"end": 15122,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14797,
											"end": 15129,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 14797,
											"end": 15129,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 14797,
											"end": 15129,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14797,
											"end": 15129,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14797,
											"end": 15129,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14797,
											"end": 15129,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 15135,
											"end": 15315,
											"name": "tag",
											"source": 13,
											"value": "313"
										},
										{
											"begin": 15135,
											"end": 15315,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15183,
											"end": 15260,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 15180,
											"end": 15181,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 15173,
											"end": 15261,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 15280,
											"end": 15284,
											"name": "PUSH",
											"source": 13,
											"value": "12"
										},
										{
											"begin": 15277,
											"end": 15278,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 15270,
											"end": 15285,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 15304,
											"end": 15308,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 15301,
											"end": 15302,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 15294,
											"end": 15309,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 15321,
											"end": 15653,
											"name": "tag",
											"source": 13,
											"value": "335"
										},
										{
											"begin": 15321,
											"end": 15653,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15442,
											"end": 15446,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 15480,
											"end": 15482,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 15469,
											"end": 15478,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 15465,
											"end": 15483,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 15457,
											"end": 15483,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 15457,
											"end": 15483,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15493,
											"end": 15564,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "593"
										},
										{
											"begin": 15561,
											"end": 15562,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 15550,
											"end": 15559,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 15546,
											"end": 15563,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 15537,
											"end": 15543,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 15493,
											"end": 15564,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "400"
										},
										{
											"begin": 15493,
											"end": 15564,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 15493,
											"end": 15564,
											"name": "tag",
											"source": 13,
											"value": "593"
										},
										{
											"begin": 15493,
											"end": 15564,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15574,
											"end": 15646,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "594"
										},
										{
											"begin": 15642,
											"end": 15644,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 15631,
											"end": 15640,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 15627,
											"end": 15645,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 15618,
											"end": 15624,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 15574,
											"end": 15646,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "381"
										},
										{
											"begin": 15574,
											"end": 15646,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 15574,
											"end": 15646,
											"name": "tag",
											"source": 13,
											"value": "594"
										},
										{
											"begin": 15574,
											"end": 15646,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15321,
											"end": 15653,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 15321,
											"end": 15653,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 15321,
											"end": 15653,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15321,
											"end": 15653,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15321,
											"end": 15653,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15321,
											"end": 15653,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 15659,
											"end": 15839,
											"name": "tag",
											"source": 13,
											"value": "345"
										},
										{
											"begin": 15659,
											"end": 15839,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15707,
											"end": 15784,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 15704,
											"end": 15705,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 15697,
											"end": 15785,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 15804,
											"end": 15808,
											"name": "PUSH",
											"source": 13,
											"value": "21"
										},
										{
											"begin": 15801,
											"end": 15802,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 15794,
											"end": 15809,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 15828,
											"end": 15832,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 15825,
											"end": 15826,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 15818,
											"end": 15833,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 15845,
											"end": 16015,
											"name": "tag",
											"source": 13,
											"value": "347"
										},
										{
											"begin": 15845,
											"end": 16015,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15875,
											"end": 15876,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 15892,
											"end": 15910,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "597"
										},
										{
											"begin": 15908,
											"end": 15909,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 15892,
											"end": 15910,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "398"
										},
										{
											"begin": 15892,
											"end": 15910,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 15892,
											"end": 15910,
											"name": "tag",
											"source": 13,
											"value": "597"
										},
										{
											"begin": 15892,
											"end": 15910,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15887,
											"end": 15910,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 15887,
											"end": 15910,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15924,
											"end": 15942,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "598"
										},
										{
											"begin": 15940,
											"end": 15941,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 15924,
											"end": 15942,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "398"
										},
										{
											"begin": 15924,
											"end": 15942,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 15924,
											"end": 15942,
											"name": "tag",
											"source": 13,
											"value": "598"
										},
										{
											"begin": 15924,
											"end": 15942,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15919,
											"end": 15942,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 15919,
											"end": 15942,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15961,
											"end": 15962,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 15951,
											"end": 15986,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "599"
										},
										{
											"begin": 15951,
											"end": 15986,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 15966,
											"end": 15984,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "600"
										},
										{
											"begin": 15966,
											"end": 15984,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "313"
										},
										{
											"begin": 15966,
											"end": 15984,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 15966,
											"end": 15984,
											"name": "tag",
											"source": 13,
											"value": "600"
										},
										{
											"begin": 15966,
											"end": 15984,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15951,
											"end": 15986,
											"name": "tag",
											"source": 13,
											"value": "599"
										},
										{
											"begin": 15951,
											"end": 15986,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 16007,
											"end": 16008,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 16004,
											"end": 16005,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 16000,
											"end": 16009,
											"name": "MOD",
											"source": 13
										},
										{
											"begin": 15995,
											"end": 16009,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 15995,
											"end": 16009,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15845,
											"end": 16015,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 15845,
											"end": 16015,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 15845,
											"end": 16015,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15845,
											"end": 16015,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15845,
											"end": 16015,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 16021,
											"end": 16137,
											"name": "tag",
											"source": 13,
											"value": "416"
										},
										{
											"begin": 16021,
											"end": 16137,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 16091,
											"end": 16112,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "602"
										},
										{
											"begin": 16106,
											"end": 16111,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 16091,
											"end": 16112,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "396"
										},
										{
											"begin": 16091,
											"end": 16112,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 16091,
											"end": 16112,
											"name": "tag",
											"source": 13,
											"value": "602"
										},
										{
											"begin": 16091,
											"end": 16112,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 16084,
											"end": 16089,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 16081,
											"end": 16113,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 16071,
											"end": 16131,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "603"
										},
										{
											"begin": 16071,
											"end": 16131,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 16127,
											"end": 16128,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 16124,
											"end": 16125,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 16117,
											"end": 16129,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 16071,
											"end": 16131,
											"name": "tag",
											"source": 13,
											"value": "603"
										},
										{
											"begin": 16071,
											"end": 16131,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 16021,
											"end": 16137,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 16021,
											"end": 16137,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 16143,
											"end": 16280,
											"name": "tag",
											"source": 13,
											"value": "417"
										},
										{
											"begin": 16143,
											"end": 16280,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 16197,
											"end": 16202,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 16228,
											"end": 16234,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 16222,
											"end": 16235,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 16213,
											"end": 16235,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 16213,
											"end": 16235,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 16244,
											"end": 16274,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "605"
										},
										{
											"begin": 16268,
											"end": 16273,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 16244,
											"end": 16274,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "416"
										},
										{
											"begin": 16244,
											"end": 16274,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 16244,
											"end": 16274,
											"name": "tag",
											"source": 13,
											"value": "605"
										},
										{
											"begin": 16244,
											"end": 16274,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 16143,
											"end": 16280,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 16143,
											"end": 16280,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 16143,
											"end": 16280,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 16143,
											"end": 16280,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 16143,
											"end": 16280,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 16286,
											"end": 16631,
											"name": "tag",
											"source": 13,
											"value": "353"
										},
										{
											"begin": 16286,
											"end": 16631,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 16353,
											"end": 16359,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 16402,
											"end": 16404,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 16390,
											"end": 16399,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 16381,
											"end": 16388,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 16377,
											"end": 16400,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 16373,
											"end": 16405,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 16370,
											"end": 16489,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 16370,
											"end": 16489,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "607"
										},
										{
											"begin": 16370,
											"end": 16489,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 16408,
											"end": 16487,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "608"
										},
										{
											"begin": 16408,
											"end": 16487,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "388"
										},
										{
											"begin": 16408,
											"end": 16487,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 16408,
											"end": 16487,
											"name": "tag",
											"source": 13,
											"value": "608"
										},
										{
											"begin": 16408,
											"end": 16487,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 16370,
											"end": 16489,
											"name": "tag",
											"source": 13,
											"value": "607"
										},
										{
											"begin": 16370,
											"end": 16489,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 16528,
											"end": 16529,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 16553,
											"end": 16614,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "609"
										},
										{
											"begin": 16606,
											"end": 16613,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 16597,
											"end": 16603,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 16586,
											"end": 16595,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 16582,
											"end": 16604,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 16553,
											"end": 16614,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "417"
										},
										{
											"begin": 16553,
											"end": 16614,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 16553,
											"end": 16614,
											"name": "tag",
											"source": 13,
											"value": "609"
										},
										{
											"begin": 16553,
											"end": 16614,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 16543,
											"end": 16614,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 16543,
											"end": 16614,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 16499,
											"end": 16624,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 16286,
											"end": 16631,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 16286,
											"end": 16631,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 16286,
											"end": 16631,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 16286,
											"end": 16631,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 16286,
											"end": 16631,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 16637,
											"end": 16735,
											"name": "tag",
											"source": 13,
											"value": "418"
										},
										{
											"begin": 16637,
											"end": 16735,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 16688,
											"end": 16694,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 16722,
											"end": 16727,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 16716,
											"end": 16728,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 16706,
											"end": 16728,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 16706,
											"end": 16728,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 16637,
											"end": 16735,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 16637,
											"end": 16735,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 16637,
											"end": 16735,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 16637,
											"end": 16735,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 16741,
											"end": 16888,
											"name": "tag",
											"source": 13,
											"value": "419"
										},
										{
											"begin": 16741,
											"end": 16888,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 16842,
											"end": 16853,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 16879,
											"end": 16882,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 16864,
											"end": 16882,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 16864,
											"end": 16882,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 16741,
											"end": 16888,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 16741,
											"end": 16888,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 16741,
											"end": 16888,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 16741,
											"end": 16888,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 16741,
											"end": 16888,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 16894,
											"end": 17280,
											"name": "tag",
											"source": 13,
											"value": "420"
										},
										{
											"begin": 16894,
											"end": 17280,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 16998,
											"end": 17001,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 17026,
											"end": 17064,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "613"
										},
										{
											"begin": 17058,
											"end": 17063,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 17026,
											"end": 17064,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "418"
										},
										{
											"begin": 17026,
											"end": 17064,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 17026,
											"end": 17064,
											"name": "tag",
											"source": 13,
											"value": "613"
										},
										{
											"begin": 17026,
											"end": 17064,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 17080,
											"end": 17168,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "614"
										},
										{
											"begin": 17161,
											"end": 17167,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 17156,
											"end": 17159,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 17080,
											"end": 17168,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "419"
										},
										{
											"begin": 17080,
											"end": 17168,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 17080,
											"end": 17168,
											"name": "tag",
											"source": 13,
											"value": "614"
										},
										{
											"begin": 17080,
											"end": 17168,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 17073,
											"end": 17168,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 17073,
											"end": 17168,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 17177,
											"end": 17242,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "615"
										},
										{
											"begin": 17235,
											"end": 17241,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 17230,
											"end": 17233,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 17223,
											"end": 17227,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 17216,
											"end": 17221,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 17212,
											"end": 17228,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 17177,
											"end": 17242,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "384"
										},
										{
											"begin": 17177,
											"end": 17242,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 17177,
											"end": 17242,
											"name": "tag",
											"source": 13,
											"value": "615"
										},
										{
											"begin": 17177,
											"end": 17242,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 17267,
											"end": 17273,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 17262,
											"end": 17265,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 17258,
											"end": 17274,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 17251,
											"end": 17274,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 17251,
											"end": 17274,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 17002,
											"end": 17280,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 16894,
											"end": 17280,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 16894,
											"end": 17280,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 16894,
											"end": 17280,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 16894,
											"end": 17280,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 16894,
											"end": 17280,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 17286,
											"end": 17557,
											"name": "tag",
											"source": 13,
											"value": "363"
										},
										{
											"begin": 17286,
											"end": 17557,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 17416,
											"end": 17419,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 17438,
											"end": 17531,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "617"
										},
										{
											"begin": 17527,
											"end": 17530,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 17518,
											"end": 17524,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 17438,
											"end": 17531,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "420"
										},
										{
											"begin": 17438,
											"end": 17531,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 17438,
											"end": 17531,
											"name": "tag",
											"source": 13,
											"value": "617"
										},
										{
											"begin": 17438,
											"end": 17531,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 17431,
											"end": 17531,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 17431,
											"end": 17531,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 17548,
											"end": 17551,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 17541,
											"end": 17551,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 17541,
											"end": 17551,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 17286,
											"end": 17557,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 17286,
											"end": 17557,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 17286,
											"end": 17557,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 17286,
											"end": 17557,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 17286,
											"end": 17557,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC4626.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"contracts/Pool.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"asset()": "38d52e0f",
							"balanceOf(address)": "70a08231",
							"convertToAssets(uint256)": "07a2d13a",
							"convertToShares(uint256)": "c6e6f592",
							"decimals()": "313ce567",
							"deposit(uint256,address)": "6e553f65",
							"maxDeposit(address)": "402d267d",
							"maxMint(address)": "c63d75b6",
							"maxRedeem(address)": "d905777e",
							"maxWithdraw(address)": "ce96cb77",
							"mint(uint256,address)": "94bf804d",
							"name()": "06fdde03",
							"previewDeposit(uint256)": "ef8b30f7",
							"previewMint(uint256)": "b3d7f6b9",
							"previewRedeem(uint256)": "4cdad506",
							"previewWithdraw(uint256)": "0a28a477",
							"redeem(uint256,address,address)": "ba087652",
							"satoken()": "866c99e2",
							"symbol()": "95d89b41",
							"totalAssets()": "01e1d114",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256,address,address)": "b460af94"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_satoken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DEPRECATED_FUNCTION\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxRedeem\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"satoken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC4626ExceededMaxDeposit(address,uint256,uint256)\":[{\"details\":\"Attempted to deposit more assets than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxMint(address,uint256,uint256)\":[{\"details\":\"Attempted to mint more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxRedeem(address,uint256,uint256)\":[{\"details\":\"Attempted to redeem more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxWithdraw(address,uint256,uint256)\":[{\"details\":\"Attempted to withdraw more assets than the max amount for `receiver`.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"asset()\":{\"details\":\"See {IERC4626-asset}. \"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"convertToAssets(uint256)\":{\"details\":\"See {IERC4626-convertToAssets}. \"},\"convertToShares(uint256)\":{\"details\":\"See {IERC4626-convertToShares}. \"},\"decimals()\":{\"details\":\"Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}.\"},\"deposit(uint256,address)\":{\"details\":\"See {IERC4626-deposit}. \"},\"maxDeposit(address)\":{\"details\":\"See {IERC4626-maxDeposit}. \"},\"maxMint(address)\":{\"details\":\"See {IERC4626-maxMint}. \"},\"maxRedeem(address)\":{\"details\":\"See {IERC4626-maxRedeem}. \"},\"maxWithdraw(address)\":{\"details\":\"See {IERC4626-maxWithdraw}. \"},\"mint(uint256,address)\":{\"details\":\"See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"See {IERC4626-previewDeposit}. \"},\"previewMint(uint256)\":{\"details\":\"See {IERC4626-previewMint}. \"},\"previewRedeem(uint256)\":{\"details\":\"See {IERC4626-previewRedeem}. \"},\"previewWithdraw(uint256)\":{\"details\":\"See {IERC4626-previewWithdraw}. \"},\"redeem(uint256,address,address)\":{\"details\":\"See {IERC4626-redeem}. \"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssets()\":{\"details\":\"See {IERC4626-totalAssets}. \"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"withdraw(uint256,address,address)\":{\"details\":\"See {IERC4626-withdraw}. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Pool.sol\":\"Pool\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":{\"keccak256\":\"0x1837547e04d5fe5334eeb77a345683c22995f1e7aa033020757ddf83a80fc72d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40d6031bc0e6f70edceb4e63fd624fe6be09dc48f5201c7a9078c26e6a9ef95f\",\"dweb:/ipfs/QmPTEBH7dmU3NgE6vtjMy7xEK54as9VHSgf9ojupwnvoke\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"contracts/Pool.sol\":{\"keccak256\":\"0x21b890720ce45cd977a18598f8e73e2a034d2f113c267352389acfab9c7927a8\",\"license\":\"SEE LICENSE IN LICENSE\",\"urls\":[\"bzz-raw://f7a128330211ca773a0ecacda6faf40233aaabfbfd546ecef2572872a6bc29dd\",\"dweb:/ipfs/Qmdtb3gAt6GDBvhdrkARjgSDRAn79BqQfLzH36RwCpLhRx\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 477,
								"contract": "contracts/Pool.sol:Pool",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 483,
								"contract": "contracts/Pool.sol:Pool",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 485,
								"contract": "contracts/Pool.sol:Pool",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 487,
								"contract": "contracts/Pool.sol:Pool",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 489,
								"contract": "contracts/Pool.sol:Pool",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 3431,
								"contract": "contracts/Pool.sol:Pool",
								"label": "satoken",
								"offset": 0,
								"slot": "5",
								"type": "t_contract(IERC20)1047"
							},
							{
								"astId": 3434,
								"contract": "contracts/Pool.sol:Pool",
								"label": "isDeposit",
								"offset": 20,
								"slot": "5",
								"type": "t_bool"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_contract(IERC20)1047": {
								"encoding": "inplace",
								"label": "contract IERC20",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "5667",
				"formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/Pool.sol:39:39:\n   |\n39 |     function withdraw(uint256 assets, address receiver, address owner) auth public override returns (uint256) {\n   |                                       ^^^^^^^^^^^^^^^^\n\n",
				"message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
				"severity": "warning",
				"sourceLocation": {
					"end": 1228,
					"file": "contracts/Pool.sol",
					"start": 1212
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "5667",
				"formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/Pool.sol:53:19:\n   |\n53 |     function mint(uint256 shares, address receiver) public override returns (uint256) {\n   |                   ^^^^^^^^^^^^^^\n\n",
				"message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
				"severity": "warning",
				"sourceLocation": {
					"end": 1600,
					"file": "contracts/Pool.sol",
					"start": 1586
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "5667",
				"formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/Pool.sol:53:35:\n   |\n53 |     function mint(uint256 shares, address receiver) public override returns (uint256) {\n   |                                   ^^^^^^^^^^^^^^^^\n\n",
				"message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
				"severity": "warning",
				"sourceLocation": {
					"end": 1618,
					"file": "contracts/Pool.sol",
					"start": 1602
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2018",
				"formattedMessage": "Warning: Function state mutability can be restricted to pure\n  --> contracts/Pool.sol:53:5:\n   |\n53 |     function mint(uint256 shares, address receiver) public override returns (uint256) {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Function state mutability can be restricted to pure",
				"severity": "warning",
				"sourceLocation": {
					"end": 1699,
					"file": "contracts/Pool.sol",
					"start": 1572
				},
				"type": "Warning"
			}
		],
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							2367
						],
						"Ownable": [
							147
						]
					},
					"id": 148,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 148,
							"sourceUnit": 2368,
							"src": "128:45:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2367,
										"src": "136:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Context",
										"nameLocations": [
											"692:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2367,
										"src": "692:7:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "692:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "175:487:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 147,
							"linearizedBaseContracts": [
								147,
								2367
							],
							"name": "Ownable",
							"nameLocation": "681:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 8,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "722:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 147,
									"src": "706:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 7,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "706:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 9,
										"nodeType": "StructuredDocumentation",
										"src": "735:85:0",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 13,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "831:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "866:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "858:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "857:17:0"
									},
									"src": "825:50:0"
								},
								{
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "881:82:0",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 18,
									"name": "OwnableInvalidOwner",
									"nameLocation": "974:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1002:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "994:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "993:15:0"
									},
									"src": "968:41:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 24,
									"name": "OwnershipTransferred",
									"nameLocation": "1021:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1058:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1042:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1042:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1089:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1073:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1041:57:0"
									},
									"src": "1015:84:0"
								},
								{
									"body": {
										"id": 49,
										"nodeType": "Block",
										"src": "1259:153:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 30,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "1273:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 33,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1297:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 32,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1289:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 31,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1289:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 34,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1289:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1273:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 44,
												"nodeType": "IfStatement",
												"src": "1269:95:0",
												"trueBody": {
													"id": 43,
													"nodeType": "Block",
													"src": "1301:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 39,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1350:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 38,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1342:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 37,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1342:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 40,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1342:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 36,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "1322:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 41,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1322:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 42,
															"nodeType": "RevertStatement",
															"src": "1315:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 46,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "1392:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 45,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "1373:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1373:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 48,
												"nodeType": "ExpressionStatement",
												"src": "1373:32:0"
											}
										]
									},
									"documentation": {
										"id": 25,
										"nodeType": "StructuredDocumentation",
										"src": "1105:115:0",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 50,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1245:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "1237:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:22:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1259:0:0"
									},
									"scope": 147,
									"src": "1225:187:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 57,
										"nodeType": "Block",
										"src": "1521:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 53,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 84,
														"src": "1531:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1531:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "1531:13:0"
											},
											{
												"id": 56,
												"nodeType": "PlaceholderStatement",
												"src": "1554:1:0"
											}
										]
									},
									"documentation": {
										"id": 51,
										"nodeType": "StructuredDocumentation",
										"src": "1418:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 58,
									"name": "onlyOwner",
									"nameLocation": "1509:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1518:2:0"
									},
									"src": "1500:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 66,
										"nodeType": "Block",
										"src": "1693:30:0",
										"statements": [
											{
												"expression": {
													"id": 64,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "1710:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 63,
												"id": 65,
												"nodeType": "Return",
												"src": "1703:13:0"
											}
										]
									},
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "1568:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 67,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1647:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1652:2:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "1684:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 61,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1683:9:0"
									},
									"scope": 147,
									"src": "1638:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "1841:117:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 75,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 71,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 67,
															"src": "1855:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 72,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1855:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 73,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2349,
															"src": "1866:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 74,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1866:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1855:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 82,
												"nodeType": "IfStatement",
												"src": "1851:101:0",
												"trueBody": {
													"id": 81,
													"nodeType": "Block",
													"src": "1880:72:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 77,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2349,
																			"src": "1928:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 78,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1928:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 76,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 13,
																	"src": "1901:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 79,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1901:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 80,
															"nodeType": "RevertStatement",
															"src": "1894:47:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "1729:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1805:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1816:2:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1841:0:0"
									},
									"scope": 147,
									"src": "1796:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "2347:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2384:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2376:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 91,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2376:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 94,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2376:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 90,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2357:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2357:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2357:30:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "1964:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 88,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 87,
												"name": "onlyOwner",
												"nameLocations": [
													"2337:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2337:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2337:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2302:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2319:2:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2347:0:0"
									},
									"scope": 147,
									"src": "2293:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 125,
										"nodeType": "Block",
										"src": "2613:145:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 106,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 101,
														"src": "2627:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2647:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2639:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 107,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2639:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 110,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2639:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2627:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 120,
												"nodeType": "IfStatement",
												"src": "2623:91:0",
												"trueBody": {
													"id": 119,
													"nodeType": "Block",
													"src": "2651:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 115,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2700:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 114,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2692:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 113,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2692:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2692:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 112,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "2672:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2672:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 118,
															"nodeType": "RevertStatement",
															"src": "2665:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 122,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "2742:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 121,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2723:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2723:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 124,
												"nodeType": "ExpressionStatement",
												"src": "2723:28:0"
											}
										]
									},
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "2400:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 126,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 104,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 103,
												"name": "onlyOwner",
												"nameLocations": [
													"2603:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2603:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2603:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2552:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2578:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "2570:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:18:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2613:0:0"
									},
									"scope": 147,
									"src": "2543:215:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 145,
										"nodeType": "Block",
										"src": "2975:124:0",
										"statements": [
											{
												"assignments": [
													133
												],
												"declarations": [
													{
														"constant": false,
														"id": 133,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2993:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 145,
														"src": "2985:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 132,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2985:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 135,
												"initialValue": {
													"id": 134,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "3004:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2985:25:0"
											},
											{
												"expression": {
													"id": 138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 136,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "3020:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 137,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 129,
														"src": "3029:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3020:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 139,
												"nodeType": "ExpressionStatement",
												"src": "3020:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 141,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "3073:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 142,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 129,
															"src": "3083:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 140,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 24,
														"src": "3052:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3052:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 144,
												"nodeType": "EmitStatement",
												"src": "3047:45:0"
											}
										]
									},
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "2764:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2921:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2948:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "2940:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2940:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2939:18:0"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2975:0:0"
									},
									"scope": 147,
									"src": "2912:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 148,
							"src": "663:2438:0",
							"usedErrors": [
								13,
								18
							],
							"usedEvents": [
								24
							]
						}
					],
					"src": "102:3000:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/interfaces/IERC4626.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC4626.sol",
					"exportedSymbols": {
						"IERC20": [
							1047
						],
						"IERC20Metadata": [
							1758
						],
						"IERC4626": [
							317
						]
					},
					"id": 318,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 149,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "107:24:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../token/ERC20/IERC20.sol",
							"id": 151,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 318,
							"sourceUnit": 1048,
							"src": "133:49:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 150,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1047,
										"src": "141:6:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "../token/ERC20/extensions/IERC20Metadata.sol",
							"id": 153,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 318,
							"sourceUnit": 1759,
							"src": "183:76:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 152,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1758,
										"src": "191:14:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 155,
										"name": "IERC20",
										"nameLocations": [
											"420:6:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1047,
										"src": "420:6:1"
									},
									"id": 156,
									"nodeType": "InheritanceSpecifier",
									"src": "420:6:1"
								},
								{
									"baseName": {
										"id": 157,
										"name": "IERC20Metadata",
										"nameLocations": [
											"428:14:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1758,
										"src": "428:14:1"
									},
									"id": 158,
									"nodeType": "InheritanceSpecifier",
									"src": "428:14:1"
								}
							],
							"canonicalName": "IERC4626",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 154,
								"nodeType": "StructuredDocumentation",
								"src": "261:136:1",
								"text": " @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n https://eips.ethereum.org/EIPS/eip-4626[ERC-4626]."
							},
							"fullyImplemented": false,
							"id": 317,
							"linearizedBaseContracts": [
								317,
								1758,
								1047
							],
							"name": "IERC4626",
							"nameLocation": "408:8:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"eventSelector": "dcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7",
									"id": 168,
									"name": "Deposit",
									"nameLocation": "455:7:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 160,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "479:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "463:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 159,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "463:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 162,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "503:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "487:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "487:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 164,
												"indexed": false,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "518:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "510:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 163,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "510:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 166,
												"indexed": false,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "534:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "526:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "526:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "462:79:1"
									},
									"src": "449:93:1"
								},
								{
									"anonymous": false,
									"eventSelector": "fbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db",
									"id": 180,
									"name": "Withdraw",
									"nameLocation": "554:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 170,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "588:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "572:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 169,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "572:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 172,
												"indexed": true,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "620:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "604:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 171,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "604:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 174,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "654:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "638:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 173,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "638:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 176,
												"indexed": false,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "677:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "669:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 175,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "669:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 178,
												"indexed": false,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "701:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "693:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 177,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "562:151:1"
									},
									"src": "548:166:1"
								},
								{
									"documentation": {
										"id": 181,
										"nodeType": "StructuredDocumentation",
										"src": "720:207:1",
										"text": " @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n - MUST be an ERC-20 token contract.\n - MUST NOT revert."
									},
									"functionSelector": "38d52e0f",
									"id": 186,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "asset",
									"nameLocation": "941:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 182,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "946:2:1"
									},
									"returnParameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "assetTokenAddress",
												"nameLocation": "980:17:1",
												"nodeType": "VariableDeclaration",
												"scope": 186,
												"src": "972:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 183,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "972:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "971:27:1"
									},
									"scope": 317,
									"src": "932:67:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 187,
										"nodeType": "StructuredDocumentation",
										"src": "1005:286:1",
										"text": " @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n - SHOULD include any compounding that occurs from yield.\n - MUST be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT revert."
									},
									"functionSelector": "01e1d114",
									"id": 192,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalAssets",
									"nameLocation": "1305:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1316:2:1"
									},
									"returnParameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "totalManagedAssets",
												"nameLocation": "1350:18:1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "1342:26:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 189,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1342:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1341:28:1"
									},
									"scope": 317,
									"src": "1296:74:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 193,
										"nodeType": "StructuredDocumentation",
										"src": "1376:720:1",
										"text": " @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n scenario where all the conditions are met.\n - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT show any variations depending on the caller.\n - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n - MUST NOT revert.\n NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n from."
									},
									"functionSelector": "c6e6f592",
									"id": 200,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "convertToShares",
									"nameLocation": "2110:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "2134:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "2126:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 194,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2126:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2125:16:1"
									},
									"returnParameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "2173:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "2165:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2165:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2164:16:1"
									},
									"scope": 317,
									"src": "2101:80:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 201,
										"nodeType": "StructuredDocumentation",
										"src": "2187:720:1",
										"text": " @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n scenario where all the conditions are met.\n - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT show any variations depending on the caller.\n - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n - MUST NOT revert.\n NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n from."
									},
									"functionSelector": "07a2d13a",
									"id": 208,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "convertToAssets",
									"nameLocation": "2921:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 203,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "2945:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "2937:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 202,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2937:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2936:16:1"
									},
									"returnParameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "2984:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "2976:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 205,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2976:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2975:16:1"
									},
									"scope": 317,
									"src": "2912:80:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 209,
										"nodeType": "StructuredDocumentation",
										"src": "2998:386:1",
										"text": " @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n through a deposit call.\n - MUST return a limited value if receiver is subject to some deposit limit.\n - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n - MUST NOT revert."
									},
									"functionSelector": "402d267d",
									"id": 216,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxDeposit",
									"nameLocation": "3398:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3417:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "3409:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 210,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3409:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3408:18:1"
									},
									"returnParameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "maxAssets",
												"nameLocation": "3458:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "3450:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 213,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3450:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3449:19:1"
									},
									"scope": 317,
									"src": "3389:80:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 217,
										"nodeType": "StructuredDocumentation",
										"src": "3475:1012:1",
										"text": " @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n current on-chain conditions.\n - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n   in the same transaction.\n - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by depositing."
									},
									"functionSelector": "ef8b30f7",
									"id": 224,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "previewDeposit",
									"nameLocation": "4501:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "4524:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 224,
												"src": "4516:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4516:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4515:16:1"
									},
									"returnParameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "4563:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 224,
												"src": "4555:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 221,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4555:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4554:16:1"
									},
									"scope": 317,
									"src": "4492:79:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 225,
										"nodeType": "StructuredDocumentation",
										"src": "4577:651:1",
										"text": " @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n - MUST emit the Deposit event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   deposit execution, and are accounted for during deposit.\n - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n   approving enough underlying tokens to the Vault contract, etc).\n NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
									},
									"functionSelector": "6e553f65",
									"id": 234,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nameLocation": "5242:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 227,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "5258:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 234,
												"src": "5250:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 226,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5250:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5274:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 234,
												"src": "5266:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 228,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5266:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5249:34:1"
									},
									"returnParameters": {
										"id": 233,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "5310:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 234,
												"src": "5302:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 231,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5302:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5301:16:1"
									},
									"scope": 317,
									"src": "5233:85:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 235,
										"nodeType": "StructuredDocumentation",
										"src": "5324:341:1",
										"text": " @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n - MUST return a limited value if receiver is subject to some mint limit.\n - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n - MUST NOT revert."
									},
									"functionSelector": "c63d75b6",
									"id": 242,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxMint",
									"nameLocation": "5679:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5695:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 242,
												"src": "5687:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 236,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5687:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5686:18:1"
									},
									"returnParameters": {
										"id": 241,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "maxShares",
												"nameLocation": "5736:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 242,
												"src": "5728:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5728:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5727:19:1"
									},
									"scope": 317,
									"src": "5670:77:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 243,
										"nodeType": "StructuredDocumentation",
										"src": "5753:984:1",
										"text": " @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n current on-chain conditions.\n - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n   same transaction.\n - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n   would be accepted, regardless if the user has enough tokens approved, etc.\n - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by minting."
									},
									"functionSelector": "b3d7f6b9",
									"id": 250,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "previewMint",
									"nameLocation": "6751:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "6771:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "6763:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6763:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6762:16:1"
									},
									"returnParameters": {
										"id": 249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 248,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "6810:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "6802:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 247,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6802:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6801:16:1"
									},
									"scope": 317,
									"src": "6742:76:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 251,
										"nodeType": "StructuredDocumentation",
										"src": "6824:642:1",
										"text": " @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n - MUST emit the Deposit event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n   execution, and are accounted for during mint.\n - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n   approving enough underlying tokens to the Vault contract, etc).\n NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
									},
									"functionSelector": "94bf804d",
									"id": 260,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "7480:4:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 256,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 253,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "7493:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "7485:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 252,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7485:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 255,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "7509:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "7501:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 254,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7501:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7484:34:1"
									},
									"returnParameters": {
										"id": 259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "7545:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "7537:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 257,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7537:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7536:16:1"
									},
									"scope": 317,
									"src": "7471:82:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 261,
										"nodeType": "StructuredDocumentation",
										"src": "7559:293:1",
										"text": " @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n Vault, through a withdraw call.\n - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n - MUST NOT revert."
									},
									"functionSelector": "ce96cb77",
									"id": 268,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxWithdraw",
									"nameLocation": "7866:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "7886:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "7878:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 262,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7878:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7877:15:1"
									},
									"returnParameters": {
										"id": 267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "maxAssets",
												"nameLocation": "7924:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "7916:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 265,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7916:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7915:19:1"
									},
									"scope": 317,
									"src": "7857:78:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 269,
										"nodeType": "StructuredDocumentation",
										"src": "7941:1034:1",
										"text": " @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n given current on-chain conditions.\n - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n   called\n   in the same transaction.\n - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by depositing."
									},
									"functionSelector": "0a28a477",
									"id": 276,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "previewWithdraw",
									"nameLocation": "8989:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 271,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "9013:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "9005:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 270,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9005:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9004:16:1"
									},
									"returnParameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "9052:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "9044:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 273,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9044:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9043:16:1"
									},
									"scope": 317,
									"src": "8980:80:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 277,
										"nodeType": "StructuredDocumentation",
										"src": "9066:670:1",
										"text": " @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n - MUST emit the Withdraw event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   withdraw execution, and are accounted for during withdraw.\n - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n   not having enough shares, etc).\n Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n Those methods should be performed separately."
									},
									"functionSelector": "b460af94",
									"id": 288,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nameLocation": "9750:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 284,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "9767:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "9759:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 278,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9759:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 281,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "9783:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "9775:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 280,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9775:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 283,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9801:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "9793:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 282,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9793:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9758:49:1"
									},
									"returnParameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "9834:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "9826:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 285,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9826:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9825:16:1"
									},
									"scope": 317,
									"src": "9741:101:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 289,
										"nodeType": "StructuredDocumentation",
										"src": "9848:381:1",
										"text": " @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n through a redeem call.\n - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n - MUST NOT revert."
									},
									"functionSelector": "d905777e",
									"id": 296,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxRedeem",
									"nameLocation": "10243:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 291,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10261:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 296,
												"src": "10253:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 290,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10253:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10252:15:1"
									},
									"returnParameters": {
										"id": 295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "maxShares",
												"nameLocation": "10299:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 296,
												"src": "10291:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 293,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10291:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10290:19:1"
									},
									"scope": 317,
									"src": "10234:76:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 297,
										"nodeType": "StructuredDocumentation",
										"src": "10316:1010:1",
										"text": " @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n given current on-chain conditions.\n - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n   same transaction.\n - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n   redemption would be accepted, regardless if the user has enough shares, etc.\n - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by redeeming."
									},
									"functionSelector": "4cdad506",
									"id": 304,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "previewRedeem",
									"nameLocation": "11340:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 300,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 299,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "11362:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 304,
												"src": "11354:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 298,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11354:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11353:16:1"
									},
									"returnParameters": {
										"id": 303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 302,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "11401:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 304,
												"src": "11393:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 301,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11393:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11392:16:1"
									},
									"scope": 317,
									"src": "11331:78:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 305,
										"nodeType": "StructuredDocumentation",
										"src": "11415:661:1",
										"text": " @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n - MUST emit the Withdraw event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   redeem execution, and are accounted for during redeem.\n - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n   not having enough shares, etc).\n NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n Those methods should be performed separately."
									},
									"functionSelector": "ba087652",
									"id": 316,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "redeem",
									"nameLocation": "12090:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 312,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 307,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "12105:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 316,
												"src": "12097:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 306,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12097:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "12121:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 316,
												"src": "12113:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 308,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12113:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 311,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "12139:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 316,
												"src": "12131:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 310,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12131:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12096:49:1"
									},
									"returnParameters": {
										"id": 315,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 314,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "12172:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 316,
												"src": "12164:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 313,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12164:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12163:16:1"
									},
									"scope": 317,
									"src": "12081:99:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 318,
							"src": "398:11784:1",
							"usedErrors": [],
							"usedEvents": [
								168,
								180,
								981,
								990
							]
						}
					],
					"src": "107:12076:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							454
						],
						"IERC20Errors": [
							359
						],
						"IERC721Errors": [
							407
						]
					},
					"id": 455,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 319,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 320,
								"nodeType": "StructuredDocumentation",
								"src": "138:139:2",
								"text": " @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."
							},
							"fullyImplemented": true,
							"id": 359,
							"linearizedBaseContracts": [
								359
							],
							"name": "IERC20Errors",
							"nameLocation": "288:12:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 321,
										"nodeType": "StructuredDocumentation",
										"src": "307:309:2",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 329,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "627:24:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 328,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 323,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "660:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "652:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 322,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 325,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "676:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "668:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 324,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 327,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "693:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "685:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 326,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "651:49:2"
									},
									"src": "621:80:2"
								},
								{
									"documentation": {
										"id": 330,
										"nodeType": "StructuredDocumentation",
										"src": "707:152:2",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 334,
									"name": "ERC20InvalidSender",
									"nameLocation": "870:18:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 332,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "897:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "889:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 331,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "889:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "888:16:2"
									},
									"src": "864:41:2"
								},
								{
									"documentation": {
										"id": 335,
										"nodeType": "StructuredDocumentation",
										"src": "911:159:2",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 339,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1081:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 338,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 337,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1110:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 339,
												"src": "1102:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 336,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1101:18:2"
									},
									"src": "1075:45:2"
								},
								{
									"documentation": {
										"id": 340,
										"nodeType": "StructuredDocumentation",
										"src": "1126:345:2",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 348,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1482:26:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 342,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1517:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 348,
												"src": "1509:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 341,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1509:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1534:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 348,
												"src": "1526:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 343,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1526:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 346,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1553:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 348,
												"src": "1545:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 345,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1545:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1508:52:2"
									},
									"src": "1476:85:2"
								},
								{
									"documentation": {
										"id": 349,
										"nodeType": "StructuredDocumentation",
										"src": "1567:174:2",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 353,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1752:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 351,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1781:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "1773:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 350,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1773:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:18:2"
									},
									"src": "1746:45:2"
								},
								{
									"documentation": {
										"id": 354,
										"nodeType": "StructuredDocumentation",
										"src": "1797:195:2",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 358,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2003:19:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 357,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 356,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2031:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 358,
												"src": "2023:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 355,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2023:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2022:17:2"
									},
									"src": "1997:43:2"
								}
							],
							"scope": 455,
							"src": "278:1764:2",
							"usedErrors": [
								329,
								334,
								339,
								348,
								353,
								358
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 360,
								"nodeType": "StructuredDocumentation",
								"src": "2044:141:2",
								"text": " @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."
							},
							"fullyImplemented": true,
							"id": 407,
							"linearizedBaseContracts": [
								407
							],
							"name": "IERC721Errors",
							"nameLocation": "2196:13:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 361,
										"nodeType": "StructuredDocumentation",
										"src": "2216:219:2",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 365,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2446:18:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 364,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 363,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2473:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "2465:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 362,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2465:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2464:15:2"
									},
									"src": "2440:40:2"
								},
								{
									"documentation": {
										"id": 366,
										"nodeType": "StructuredDocumentation",
										"src": "2486:132:2",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 370,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2629:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 369,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 368,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2660:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 370,
												"src": "2652:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 367,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2652:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2651:17:2"
									},
									"src": "2623:46:2"
								},
								{
									"documentation": {
										"id": 371,
										"nodeType": "StructuredDocumentation",
										"src": "2675:289:2",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 379,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2975:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 378,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 373,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3004:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 379,
												"src": "2996:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 372,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2996:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 375,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3020:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 379,
												"src": "3012:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 374,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3012:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 377,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3037:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 379,
												"src": "3029:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 376,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3029:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2995:48:2"
									},
									"src": "2969:75:2"
								},
								{
									"documentation": {
										"id": 380,
										"nodeType": "StructuredDocumentation",
										"src": "3050:152:2",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 384,
									"name": "ERC721InvalidSender",
									"nameLocation": "3213:19:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 383,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 382,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3241:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 384,
												"src": "3233:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 381,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3233:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3232:16:2"
									},
									"src": "3207:42:2"
								},
								{
									"documentation": {
										"id": 385,
										"nodeType": "StructuredDocumentation",
										"src": "3255:159:2",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 389,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3425:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 388,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 387,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3455:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 389,
												"src": "3447:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 386,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3447:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3446:18:2"
									},
									"src": "3419:46:2"
								},
								{
									"documentation": {
										"id": 390,
										"nodeType": "StructuredDocumentation",
										"src": "3471:247:2",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 396,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3729:26:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3764:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 396,
												"src": "3756:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 391,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3756:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3782:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 396,
												"src": "3774:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 393,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3774:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3755:35:2"
									},
									"src": "3723:68:2"
								},
								{
									"documentation": {
										"id": 397,
										"nodeType": "StructuredDocumentation",
										"src": "3797:174:2",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 401,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3982:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 400,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 399,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4012:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "4004:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 398,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4004:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:18:2"
									},
									"src": "3976:46:2"
								},
								{
									"documentation": {
										"id": 402,
										"nodeType": "StructuredDocumentation",
										"src": "4028:197:2",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 406,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4236:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 405,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 404,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4266:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 406,
												"src": "4258:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 403,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4258:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4257:18:2"
									},
									"src": "4230:46:2"
								}
							],
							"scope": 455,
							"src": "2186:2092:2",
							"usedErrors": [
								365,
								370,
								379,
								384,
								389,
								396,
								401,
								406
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 408,
								"nodeType": "StructuredDocumentation",
								"src": "4280:143:2",
								"text": " @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."
							},
							"fullyImplemented": true,
							"id": 454,
							"linearizedBaseContracts": [
								454
							],
							"name": "IERC1155Errors",
							"nameLocation": "4434:14:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 409,
										"nodeType": "StructuredDocumentation",
										"src": "4455:361:2",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 419,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4827:26:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4862:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 419,
												"src": "4854:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 410,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4854:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4878:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 419,
												"src": "4870:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 412,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4870:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4895:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 419,
												"src": "4887:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 414,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4887:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4911:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 419,
												"src": "4903:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 416,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4903:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4853:66:2"
									},
									"src": "4821:99:2"
								},
								{
									"documentation": {
										"id": 420,
										"nodeType": "StructuredDocumentation",
										"src": "4926:152:2",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 424,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5089:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 422,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5118:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "5110:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 421,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5110:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5109:16:2"
									},
									"src": "5083:43:2"
								},
								{
									"documentation": {
										"id": 425,
										"nodeType": "StructuredDocumentation",
										"src": "5132:159:2",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 429,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5302:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 428,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5333:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 429,
												"src": "5325:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 426,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5325:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5324:18:2"
									},
									"src": "5296:47:2"
								},
								{
									"documentation": {
										"id": 430,
										"nodeType": "StructuredDocumentation",
										"src": "5349:256:2",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 436,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5616:28:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 432,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5653:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "5645:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 431,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5645:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 434,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5671:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "5663:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 433,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5663:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5644:33:2"
									},
									"src": "5610:68:2"
								},
								{
									"documentation": {
										"id": 437,
										"nodeType": "StructuredDocumentation",
										"src": "5684:174:2",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 441,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5869:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 439,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5900:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "5892:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 438,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5892:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5891:18:2"
									},
									"src": "5863:47:2"
								},
								{
									"documentation": {
										"id": 442,
										"nodeType": "StructuredDocumentation",
										"src": "5916:197:2",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 446,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6124:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 445,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 444,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6155:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 446,
												"src": "6147:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 443,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6147:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6146:18:2"
									},
									"src": "6118:47:2"
								},
								{
									"documentation": {
										"id": 447,
										"nodeType": "StructuredDocumentation",
										"src": "6171:280:2",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 453,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6462:25:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 452,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 449,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6496:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 453,
												"src": "6488:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 448,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6488:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 451,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6515:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 453,
												"src": "6507:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 450,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6507:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6487:41:2"
									},
									"src": "6456:73:2"
								}
							],
							"scope": 455,
							"src": "4424:2107:2",
							"usedErrors": [
								419,
								424,
								429,
								436,
								441,
								446,
								453
							],
							"usedEvents": []
						}
					],
					"src": "112:6420:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							2367
						],
						"ERC20": [
							969
						],
						"IERC20": [
							1047
						],
						"IERC20Errors": [
							359
						],
						"IERC20Metadata": [
							1758
						]
					},
					"id": 970,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 456,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 458,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 970,
							"sourceUnit": 1048,
							"src": "131:36:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 457,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1047,
										"src": "139:6:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 460,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 970,
							"sourceUnit": 1759,
							"src": "168:63:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 459,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1758,
										"src": "176:14:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 462,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 970,
							"sourceUnit": 2368,
							"src": "232:48:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 461,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2367,
										"src": "240:7:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 464,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 970,
							"sourceUnit": 455,
							"src": "281:65:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 463,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 359,
										"src": "289:12:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 466,
										"name": "Context",
										"nameLocations": [
											"1428:7:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2367,
										"src": "1428:7:3"
									},
									"id": 467,
									"nodeType": "InheritanceSpecifier",
									"src": "1428:7:3"
								},
								{
									"baseName": {
										"id": 468,
										"name": "IERC20",
										"nameLocations": [
											"1437:6:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1047,
										"src": "1437:6:3"
									},
									"id": 469,
									"nodeType": "InheritanceSpecifier",
									"src": "1437:6:3"
								},
								{
									"baseName": {
										"id": 470,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1445:14:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1758,
										"src": "1445:14:3"
									},
									"id": 471,
									"nodeType": "InheritanceSpecifier",
									"src": "1445:14:3"
								},
								{
									"baseName": {
										"id": 472,
										"name": "IERC20Errors",
										"nameLocations": [
											"1461:12:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 359,
										"src": "1461:12:3"
									},
									"id": 473,
									"nodeType": "InheritanceSpecifier",
									"src": "1461:12:3"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 465,
								"nodeType": "StructuredDocumentation",
								"src": "348:1052:3",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification."
							},
							"fullyImplemented": true,
							"id": 969,
							"linearizedBaseContracts": [
								969,
								359,
								1758,
								1047,
								2367
							],
							"name": "ERC20",
							"nameLocation": "1419:5:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 477,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1524:9:3",
									"nodeType": "VariableDeclaration",
									"scope": 969,
									"src": "1480:53:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 476,
										"keyName": "account",
										"keyNameLocation": "1496:7:3",
										"keyType": {
											"id": 474,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1488:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1480:35:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 475,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1507:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 483,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1612:11:3",
									"nodeType": "VariableDeclaration",
									"scope": 969,
									"src": "1540:83:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 482,
										"keyName": "account",
										"keyNameLocation": "1556:7:3",
										"keyType": {
											"id": 478,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1548:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1540:63:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 481,
											"keyName": "spender",
											"keyNameLocation": "1583:7:3",
											"keyType": {
												"id": 479,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1575:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1567:35:3",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 480,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1594:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 485,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1646:12:3",
									"nodeType": "VariableDeclaration",
									"scope": 969,
									"src": "1630:28:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 484,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1630:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 487,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1680:5:3",
									"nodeType": "VariableDeclaration",
									"scope": 969,
									"src": "1665:20:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 486,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1665:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 489,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1706:7:3",
									"nodeType": "VariableDeclaration",
									"scope": 969,
									"src": "1691:22:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 488,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1691:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 505,
										"nodeType": "Block",
										"src": "1952:57:3",
										"statements": [
											{
												"expression": {
													"id": 499,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 497,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 487,
														"src": "1962:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 498,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 492,
														"src": "1970:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1962:13:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 500,
												"nodeType": "ExpressionStatement",
												"src": "1962:13:3"
											},
											{
												"expression": {
													"id": 503,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 501,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 489,
														"src": "1985:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 502,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 494,
														"src": "1995:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1985:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 504,
												"nodeType": "ExpressionStatement",
												"src": "1985:17:3"
											}
										]
									},
									"documentation": {
										"id": 490,
										"nodeType": "StructuredDocumentation",
										"src": "1720:171:3",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 506,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 495,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 492,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1922:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 506,
												"src": "1908:19:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 491,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1908:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 494,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1943:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 506,
												"src": "1929:21:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 493,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1929:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1907:44:3"
									},
									"returnParameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1952:0:3"
									},
									"scope": 969,
									"src": "1896:113:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1745
									],
									"body": {
										"id": 514,
										"nodeType": "Block",
										"src": "2134:29:3",
										"statements": [
											{
												"expression": {
													"id": 512,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 487,
													"src": "2151:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 511,
												"id": 513,
												"nodeType": "Return",
												"src": "2144:12:3"
											}
										]
									},
									"documentation": {
										"id": 507,
										"nodeType": "StructuredDocumentation",
										"src": "2015:54:3",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 515,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2083:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 508,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2087:2:3"
									},
									"returnParameters": {
										"id": 511,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 510,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "2119:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 509,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2119:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2118:15:3"
									},
									"scope": 969,
									"src": "2074:89:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1751
									],
									"body": {
										"id": 523,
										"nodeType": "Block",
										"src": "2338:31:3",
										"statements": [
											{
												"expression": {
													"id": 521,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 489,
													"src": "2355:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 520,
												"id": 522,
												"nodeType": "Return",
												"src": "2348:14:3"
											}
										]
									},
									"documentation": {
										"id": 516,
										"nodeType": "StructuredDocumentation",
										"src": "2169:102:3",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 524,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2285:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 517,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2291:2:3"
									},
									"returnParameters": {
										"id": 520,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 519,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "2323:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 518,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2323:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2322:15:3"
									},
									"scope": 969,
									"src": "2276:93:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1757
									],
									"body": {
										"id": 532,
										"nodeType": "Block",
										"src": "3058:26:3",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 530,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3075:2:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 529,
												"id": 531,
												"nodeType": "Return",
												"src": "3068:9:3"
											}
										]
									},
									"documentation": {
										"id": 525,
										"nodeType": "StructuredDocumentation",
										"src": "2375:622:3",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 533,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3011:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3019:2:3"
									},
									"returnParameters": {
										"id": 529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 533,
												"src": "3051:5:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 527,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3051:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3050:7:3"
									},
									"scope": 969,
									"src": "3002:82:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										996
									],
									"body": {
										"id": 541,
										"nodeType": "Block",
										"src": "3205:36:3",
										"statements": [
											{
												"expression": {
													"id": 539,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 485,
													"src": "3222:12:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 538,
												"id": 540,
												"nodeType": "Return",
												"src": "3215:19:3"
											}
										]
									},
									"documentation": {
										"id": 534,
										"nodeType": "StructuredDocumentation",
										"src": "3090:49:3",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 542,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3153:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 535,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3164:2:3"
									},
									"returnParameters": {
										"id": 538,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 537,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 542,
												"src": "3196:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 536,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3196:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3195:9:3"
									},
									"scope": 969,
									"src": "3144:97:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1004
									],
									"body": {
										"id": 554,
										"nodeType": "Block",
										"src": "3373:42:3",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 550,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 477,
														"src": "3390:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 552,
													"indexExpression": {
														"id": 551,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 545,
														"src": "3400:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3390:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 549,
												"id": 553,
												"nodeType": "Return",
												"src": "3383:25:3"
											}
										]
									},
									"documentation": {
										"id": 543,
										"nodeType": "StructuredDocumentation",
										"src": "3247:47:3",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 555,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3308:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 546,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 545,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3326:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "3318:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 544,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3318:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3317:17:3"
									},
									"returnParameters": {
										"id": 549,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 548,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "3364:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 547,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3364:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3363:9:3"
									},
									"scope": 969,
									"src": "3299:116:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1014
									],
									"body": {
										"id": 578,
										"nodeType": "Block",
										"src": "3685:103:3",
										"statements": [
											{
												"assignments": [
													566
												],
												"declarations": [
													{
														"constant": false,
														"id": 566,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3703:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 578,
														"src": "3695:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 565,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3695:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 569,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 567,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2349,
														"src": "3711:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 568,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3711:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3695:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 571,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 566,
															"src": "3743:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 572,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 558,
															"src": "3750:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 573,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 560,
															"src": "3754:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 570,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 699,
														"src": "3733:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3733:27:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 575,
												"nodeType": "ExpressionStatement",
												"src": "3733:27:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 576,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3777:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 564,
												"id": 577,
												"nodeType": "Return",
												"src": "3770:11:3"
											}
										]
									},
									"documentation": {
										"id": 556,
										"nodeType": "StructuredDocumentation",
										"src": "3421:184:3",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 579,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3619:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 561,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3636:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "3628:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 557,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3628:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 560,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3648:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "3640:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 559,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3640:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3627:27:3"
									},
									"returnParameters": {
										"id": 564,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 563,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "3679:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 562,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3679:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3678:6:3"
									},
									"scope": 969,
									"src": "3610:178:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1024
									],
									"body": {
										"id": 595,
										"nodeType": "Block",
										"src": "3935:51:3",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 589,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 483,
															"src": "3952:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 591,
														"indexExpression": {
															"id": 590,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 582,
															"src": "3964:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3952:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 593,
													"indexExpression": {
														"id": 592,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 584,
														"src": "3971:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3952:27:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 588,
												"id": 594,
												"nodeType": "Return",
												"src": "3945:34:3"
											}
										]
									},
									"documentation": {
										"id": 580,
										"nodeType": "StructuredDocumentation",
										"src": "3794:47:3",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 596,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3855:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 585,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 582,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3873:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 596,
												"src": "3865:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 581,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3865:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 584,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3888:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 596,
												"src": "3880:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 583,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3880:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3864:32:3"
									},
									"returnParameters": {
										"id": 588,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 587,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 596,
												"src": "3926:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 586,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3926:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3925:9:3"
									},
									"scope": 969,
									"src": "3846:140:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1034
									],
									"body": {
										"id": 619,
										"nodeType": "Block",
										"src": "4372:107:3",
										"statements": [
											{
												"assignments": [
													607
												],
												"declarations": [
													{
														"constant": false,
														"id": 607,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4390:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 619,
														"src": "4382:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 606,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4382:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 610,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 608,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2349,
														"src": "4398:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 609,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4398:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4382:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 612,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 607,
															"src": "4429:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 613,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 599,
															"src": "4436:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 614,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 601,
															"src": "4445:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 611,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															860,
															920
														],
														"referencedDeclaration": 860,
														"src": "4420:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 615,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4420:31:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 616,
												"nodeType": "ExpressionStatement",
												"src": "4420:31:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 617,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4468:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 605,
												"id": 618,
												"nodeType": "Return",
												"src": "4461:11:3"
											}
										]
									},
									"documentation": {
										"id": 597,
										"nodeType": "StructuredDocumentation",
										"src": "3992:296:3",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 620,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4302:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 602,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 599,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4318:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 620,
												"src": "4310:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 598,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4310:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 601,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4335:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 620,
												"src": "4327:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 600,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4327:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4309:32:3"
									},
									"returnParameters": {
										"id": 605,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 604,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 620,
												"src": "4366:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 603,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4366:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4365:6:3"
									},
									"scope": 969,
									"src": "4293:186:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1046
									],
									"body": {
										"id": 651,
										"nodeType": "Block",
										"src": "5132:151:3",
										"statements": [
											{
												"assignments": [
													633
												],
												"declarations": [
													{
														"constant": false,
														"id": 633,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5150:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 651,
														"src": "5142:15:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 632,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5142:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 636,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 634,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2349,
														"src": "5160:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 635,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5160:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5142:30:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 638,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 623,
															"src": "5198:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 639,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 633,
															"src": "5204:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 640,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "5213:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 637,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 968,
														"src": "5182:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 641,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5182:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 642,
												"nodeType": "ExpressionStatement",
												"src": "5182:37:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 644,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 623,
															"src": "5239:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 645,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 625,
															"src": "5245:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 646,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "5249:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 643,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 699,
														"src": "5229:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 647,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5229:26:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 648,
												"nodeType": "ExpressionStatement",
												"src": "5229:26:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 649,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5272:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 631,
												"id": 650,
												"nodeType": "Return",
												"src": "5265:11:3"
											}
										]
									},
									"documentation": {
										"id": 621,
										"nodeType": "StructuredDocumentation",
										"src": "4485:549:3",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 652,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5048:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 628,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 623,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5069:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 652,
												"src": "5061:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 622,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5061:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5083:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 652,
												"src": "5075:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 624,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5075:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 627,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5095:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 652,
												"src": "5087:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 626,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5087:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5060:41:3"
									},
									"returnParameters": {
										"id": 631,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 630,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 652,
												"src": "5126:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 629,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5126:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5125:6:3"
									},
									"scope": 969,
									"src": "5039:244:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 698,
										"nodeType": "Block",
										"src": "5725:231:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 667,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 662,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 655,
														"src": "5739:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 665,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5755:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 664,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5747:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 663,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5747:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 666,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5747:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5739:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 676,
												"nodeType": "IfStatement",
												"src": "5735:86:3",
												"trueBody": {
													"id": 675,
													"nodeType": "Block",
													"src": "5759:62:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 671,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5807:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 670,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5799:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 669,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5799:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 672,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5799:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 668,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 334,
																	"src": "5780:18:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 673,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5780:30:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 674,
															"nodeType": "RevertStatement",
															"src": "5773:37:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 682,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 677,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 657,
														"src": "5834:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 680,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5848:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 679,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5840:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 678,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5840:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 681,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5840:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5834:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 691,
												"nodeType": "IfStatement",
												"src": "5830:86:3",
												"trueBody": {
													"id": 690,
													"nodeType": "Block",
													"src": "5852:64:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 686,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5902:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 685,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5894:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 684,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5894:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 687,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5894:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 683,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 339,
																	"src": "5873:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 688,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5873:32:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 689,
															"nodeType": "RevertStatement",
															"src": "5866:39:3"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 693,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 655,
															"src": "5933:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 694,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 657,
															"src": "5939:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 695,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 659,
															"src": "5943:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 692,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 776,
														"src": "5925:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 696,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5925:24:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 697,
												"nodeType": "ExpressionStatement",
												"src": "5925:24:3"
											}
										]
									},
									"documentation": {
										"id": 653,
										"nodeType": "StructuredDocumentation",
										"src": "5289:362:3",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 699,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "5665:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 660,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 655,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5683:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 699,
												"src": "5675:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 654,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5675:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 657,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5697:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 699,
												"src": "5689:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 656,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5689:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 659,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5709:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 699,
												"src": "5701:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 658,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5701:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5674:41:3"
									},
									"returnParameters": {
										"id": 661,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5725:0:3"
									},
									"scope": 969,
									"src": "5656:300:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 775,
										"nodeType": "Block",
										"src": "6346:1032:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 714,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 709,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 702,
														"src": "6360:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 712,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6376:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 711,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6368:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 710,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6368:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 713,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6368:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6360:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 746,
													"nodeType": "Block",
													"src": "6534:362:3",
													"statements": [
														{
															"assignments": [
																721
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 721,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "6556:11:3",
																	"nodeType": "VariableDeclaration",
																	"scope": 746,
																	"src": "6548:19:3",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 720,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6548:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 725,
															"initialValue": {
																"baseExpression": {
																	"id": 722,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 477,
																	"src": "6570:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 724,
																"indexExpression": {
																	"id": 723,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 702,
																	"src": "6580:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6570:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6548:37:3"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 728,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 726,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 721,
																	"src": "6603:11:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 727,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 706,
																	"src": "6617:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6603:19:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 736,
															"nodeType": "IfStatement",
															"src": "6599:115:3",
															"trueBody": {
																"id": 735,
																"nodeType": "Block",
																"src": "6624:90:3",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 730,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 702,
																					"src": "6674:4:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 731,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 721,
																					"src": "6680:11:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 732,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 706,
																					"src": "6693:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 729,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 329,
																				"src": "6649:24:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 733,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6649:50:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 734,
																		"nodeType": "RevertStatement",
																		"src": "6642:57:3"
																	}
																]
															}
														},
														{
															"id": 745,
															"nodeType": "UncheckedBlock",
															"src": "6727:159:3",
															"statements": [
																{
																	"expression": {
																		"id": 743,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 737,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 477,
																				"src": "6834:9:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 739,
																			"indexExpression": {
																				"id": 738,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 702,
																				"src": "6844:4:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "6834:15:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 742,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 740,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 721,
																				"src": "6852:11:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 741,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 706,
																				"src": "6866:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6852:19:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6834:37:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 744,
																	"nodeType": "ExpressionStatement",
																	"src": "6834:37:3"
																}
															]
														}
													]
												},
												"id": 747,
												"nodeType": "IfStatement",
												"src": "6356:540:3",
												"trueBody": {
													"id": 719,
													"nodeType": "Block",
													"src": "6380:148:3",
													"statements": [
														{
															"expression": {
																"id": 717,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 715,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 485,
																	"src": "6496:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 716,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 706,
																	"src": "6512:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6496:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 718,
															"nodeType": "ExpressionStatement",
															"src": "6496:21:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 753,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 748,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 704,
														"src": "6910:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 751,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6924:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 750,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6916:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 749,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6916:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 752,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6916:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6910:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 767,
													"nodeType": "Block",
													"src": "7125:206:3",
													"statements": [
														{
															"id": 766,
															"nodeType": "UncheckedBlock",
															"src": "7139:182:3",
															"statements": [
																{
																	"expression": {
																		"id": 764,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 760,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 477,
																				"src": "7284:9:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 762,
																			"indexExpression": {
																				"id": 761,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 704,
																				"src": "7294:2:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7284:13:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 763,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 706,
																			"src": "7301:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7284:22:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 765,
																	"nodeType": "ExpressionStatement",
																	"src": "7284:22:3"
																}
															]
														}
													]
												},
												"id": 768,
												"nodeType": "IfStatement",
												"src": "6906:425:3",
												"trueBody": {
													"id": 759,
													"nodeType": "Block",
													"src": "6928:191:3",
													"statements": [
														{
															"id": 758,
															"nodeType": "UncheckedBlock",
															"src": "6942:167:3",
															"statements": [
																{
																	"expression": {
																		"id": 756,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 754,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 485,
																			"src": "7073:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 755,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 706,
																			"src": "7089:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7073:21:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 757,
																	"nodeType": "ExpressionStatement",
																	"src": "7073:21:3"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 770,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 702,
															"src": "7355:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 771,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 704,
															"src": "7361:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 772,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 706,
															"src": "7365:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 769,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 981,
														"src": "7346:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7346:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 774,
												"nodeType": "EmitStatement",
												"src": "7341:30:3"
											}
										]
									},
									"documentation": {
										"id": 700,
										"nodeType": "StructuredDocumentation",
										"src": "5962:304:3",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 776,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "6280:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 702,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6296:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 776,
												"src": "6288:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 701,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6288:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 704,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6310:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 776,
												"src": "6302:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 703,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6302:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 706,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6322:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 776,
												"src": "6314:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 705,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6314:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6287:41:3"
									},
									"returnParameters": {
										"id": 708,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6346:0:3"
									},
									"scope": 969,
									"src": "6271:1107:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 808,
										"nodeType": "Block",
										"src": "7777:152:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 789,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 784,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 779,
														"src": "7791:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 787,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7810:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 786,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7802:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 785,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7802:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 788,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7802:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7791:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 798,
												"nodeType": "IfStatement",
												"src": "7787:91:3",
												"trueBody": {
													"id": 797,
													"nodeType": "Block",
													"src": "7814:64:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 793,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7864:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 792,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7856:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 791,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7856:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 794,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7856:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 790,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 339,
																	"src": "7835:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 795,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7835:32:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 796,
															"nodeType": "RevertStatement",
															"src": "7828:39:3"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 802,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7903:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 801,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7895:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 800,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7895:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 803,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7895:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 804,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 779,
															"src": "7907:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 805,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 781,
															"src": "7916:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 799,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 776,
														"src": "7887:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 806,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7887:35:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 807,
												"nodeType": "ExpressionStatement",
												"src": "7887:35:3"
											}
										]
									},
									"documentation": {
										"id": 777,
										"nodeType": "StructuredDocumentation",
										"src": "7384:332:3",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 809,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7730:5:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 782,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 779,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7744:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 809,
												"src": "7736:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 778,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7736:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 781,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7761:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 809,
												"src": "7753:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 780,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7753:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7735:32:3"
									},
									"returnParameters": {
										"id": 783,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7777:0:3"
									},
									"scope": 969,
									"src": "7721:208:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 841,
										"nodeType": "Block",
										"src": "8303:150:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 822,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 817,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 812,
														"src": "8317:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 820,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8336:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 819,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8328:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 818,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8328:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 821,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8328:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8317:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 831,
												"nodeType": "IfStatement",
												"src": "8313:89:3",
												"trueBody": {
													"id": 830,
													"nodeType": "Block",
													"src": "8340:62:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 826,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8388:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 825,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8380:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 824,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8380:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 827,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8380:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 823,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 334,
																	"src": "8361:18:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 828,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8361:30:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 829,
															"nodeType": "RevertStatement",
															"src": "8354:37:3"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 833,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 812,
															"src": "8419:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 836,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8436:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 835,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8428:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 834,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8428:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 837,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8428:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 838,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 814,
															"src": "8440:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 832,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 776,
														"src": "8411:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 839,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8411:35:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 840,
												"nodeType": "ExpressionStatement",
												"src": "8411:35:3"
											}
										]
									},
									"documentation": {
										"id": 810,
										"nodeType": "StructuredDocumentation",
										"src": "7935:307:3",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 842,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "8256:5:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 815,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 812,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8270:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 842,
												"src": "8262:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 811,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8262:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 814,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8287:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 842,
												"src": "8279:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 813,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8279:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8261:32:3"
									},
									"returnParameters": {
										"id": 816,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8303:0:3"
									},
									"scope": 969,
									"src": "8247:206:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 859,
										"nodeType": "Block",
										"src": "9063:54:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 853,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 845,
															"src": "9082:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 854,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 847,
															"src": "9089:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 855,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 849,
															"src": "9098:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 856,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9105:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 852,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															860,
															920
														],
														"referencedDeclaration": 920,
														"src": "9073:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 857,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9073:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 858,
												"nodeType": "ExpressionStatement",
												"src": "9073:37:3"
											}
										]
									},
									"documentation": {
										"id": 843,
										"nodeType": "StructuredDocumentation",
										"src": "8459:525:3",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 860,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "8998:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 850,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 845,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9015:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 860,
												"src": "9007:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 844,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9007:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 847,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9030:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 860,
												"src": "9022:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 846,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9022:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 849,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9047:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 860,
												"src": "9039:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 848,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9039:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9006:47:3"
									},
									"returnParameters": {
										"id": 851,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9063:0:3"
									},
									"scope": 969,
									"src": "8989:128:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 919,
										"nodeType": "Block",
										"src": "10047:334:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 877,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 872,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 863,
														"src": "10061:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 875,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10078:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 874,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10070:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 873,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10070:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 876,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10070:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10061:19:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 886,
												"nodeType": "IfStatement",
												"src": "10057:89:3",
												"trueBody": {
													"id": 885,
													"nodeType": "Block",
													"src": "10082:64:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 881,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10132:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 880,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10124:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 879,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10124:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 882,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10124:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 878,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 353,
																	"src": "10103:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 883,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10103:32:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 884,
															"nodeType": "RevertStatement",
															"src": "10096:39:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 892,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 887,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 865,
														"src": "10159:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 890,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10178:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 889,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10170:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 888,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10170:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 891,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10170:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10159:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 901,
												"nodeType": "IfStatement",
												"src": "10155:90:3",
												"trueBody": {
													"id": 900,
													"nodeType": "Block",
													"src": "10182:63:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 896,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10231:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 895,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10223:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 894,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10223:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 897,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10223:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 893,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 358,
																	"src": "10203:19:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 898,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10203:31:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 899,
															"nodeType": "RevertStatement",
															"src": "10196:38:3"
														}
													]
												}
											},
											{
												"expression": {
													"id": 908,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 902,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 483,
																"src": "10254:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 905,
															"indexExpression": {
																"id": 903,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 863,
																"src": "10266:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10254:18:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 906,
														"indexExpression": {
															"id": 904,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 865,
															"src": "10273:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10254:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 907,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 867,
														"src": "10284:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10254:35:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 909,
												"nodeType": "ExpressionStatement",
												"src": "10254:35:3"
											},
											{
												"condition": {
													"id": 910,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 869,
													"src": "10303:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 918,
												"nodeType": "IfStatement",
												"src": "10299:76:3",
												"trueBody": {
													"id": 917,
													"nodeType": "Block",
													"src": "10314:61:3",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 912,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 863,
																		"src": "10342:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 913,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 865,
																		"src": "10349:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 914,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 867,
																		"src": "10358:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 911,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 990,
																	"src": "10333:8:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 915,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10333:31:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 916,
															"nodeType": "EmitStatement",
															"src": "10328:36:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 861,
										"nodeType": "StructuredDocumentation",
										"src": "9123:821:3",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 920,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9958:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 870,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 863,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9975:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 920,
												"src": "9967:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 862,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9967:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 865,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9990:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 920,
												"src": "9982:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 864,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9982:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 867,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10007:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 920,
												"src": "9999:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 866,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9999:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 869,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "10019:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 920,
												"src": "10014:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 868,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10014:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9966:63:3"
									},
									"returnParameters": {
										"id": 871,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10047:0:3"
									},
									"scope": 969,
									"src": "9949:432:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 967,
										"nodeType": "Block",
										"src": "10752:388:3",
										"statements": [
											{
												"assignments": [
													931
												],
												"declarations": [
													{
														"constant": false,
														"id": 931,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10770:16:3",
														"nodeType": "VariableDeclaration",
														"scope": 967,
														"src": "10762:24:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 930,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10762:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 936,
												"initialValue": {
													"arguments": [
														{
															"id": 933,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 923,
															"src": "10799:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 934,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 925,
															"src": "10806:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 932,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 596,
														"src": "10789:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 935,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10789:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10762:52:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 943,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 937,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 931,
														"src": "10828:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 940,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10853:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 939,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10853:7:3",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 938,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10848:4:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 941,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10848:13:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 942,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "10862:3:3",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10848:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10828:37:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 966,
												"nodeType": "IfStatement",
												"src": "10824:310:3",
												"trueBody": {
													"id": 965,
													"nodeType": "Block",
													"src": "10867:267:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 946,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 944,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 931,
																	"src": "10885:16:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 945,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 927,
																	"src": "10904:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10885:24:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 954,
															"nodeType": "IfStatement",
															"src": "10881:130:3",
															"trueBody": {
																"id": 953,
																"nodeType": "Block",
																"src": "10911:100:3",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 948,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 925,
																					"src": "10963:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 949,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 931,
																					"src": "10972:16:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 950,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 927,
																					"src": "10990:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 947,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 348,
																				"src": "10936:26:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 951,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10936:60:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 952,
																		"nodeType": "RevertStatement",
																		"src": "10929:67:3"
																	}
																]
															}
														},
														{
															"id": 964,
															"nodeType": "UncheckedBlock",
															"src": "11024:100:3",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 956,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 923,
																				"src": "11061:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 957,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 925,
																				"src": "11068:7:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 960,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 958,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 931,
																					"src": "11077:16:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 959,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 927,
																					"src": "11096:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11077:24:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 961,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11103:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 955,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				860,
																				920
																			],
																			"referencedDeclaration": 920,
																			"src": "11052:8:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 962,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11052:57:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 963,
																	"nodeType": "ExpressionStatement",
																	"src": "11052:57:3"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 921,
										"nodeType": "StructuredDocumentation",
										"src": "10387:271:3",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 968,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10672:15:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 923,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10696:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 968,
												"src": "10688:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 922,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10688:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 925,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10711:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 968,
												"src": "10703:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 924,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10703:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 927,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10728:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 968,
												"src": "10720:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 926,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10720:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10687:47:3"
									},
									"returnParameters": {
										"id": 929,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10752:0:3"
									},
									"scope": 969,
									"src": "10663:477:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 970,
							"src": "1401:9741:3",
							"usedErrors": [
								329,
								334,
								339,
								348,
								353,
								358
							],
							"usedEvents": [
								981,
								990
							]
						}
					],
					"src": "105:11038:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							1047
						]
					},
					"id": 1048,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 971,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 972,
								"nodeType": "StructuredDocumentation",
								"src": "132:70:4",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 1047,
							"linearizedBaseContracts": [
								1047
							],
							"name": "IERC20",
							"nameLocation": "213:6:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 973,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:4",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 981,
									"name": "Transfer",
									"nameLocation": "395:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 980,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 975,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "404:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 974,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 977,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "426:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 976,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 979,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "446:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 978,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:4"
									},
									"src": "389:72:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 982,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:4",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 990,
									"name": "Approval",
									"nameLocation": "626:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 989,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 984,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 990,
												"src": "635:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 983,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 986,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 990,
												"src": "658:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 985,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 988,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 990,
												"src": "683:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 987,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:4"
									},
									"src": "620:78:4"
								},
								{
									"documentation": {
										"id": 991,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:4",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 996,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 992,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:4"
									},
									"returnParameters": {
										"id": 995,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 994,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 996,
												"src": "820:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 993,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:4"
									},
									"scope": 1047,
									"src": "774:55:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 997,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:4",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 1004,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1000,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 999,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1004,
												"src": "930:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 998,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:4"
									},
									"returnParameters": {
										"id": 1003,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1002,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1004,
												"src": "970:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1001,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:4"
									},
									"scope": 1047,
									"src": "911:68:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1005,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:4",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 1014,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1010,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1007,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1014,
												"src": "1221:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1006,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1009,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1014,
												"src": "1233:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1008,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:4"
									},
									"returnParameters": {
										"id": 1013,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1012,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1014,
												"src": "1266:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1011,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:4"
									},
									"scope": 1047,
									"src": "1203:69:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1015,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:4",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 1024,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1020,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1017,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1024,
												"src": "1566:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1016,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1019,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1024,
												"src": "1581:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1018,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:4"
									},
									"returnParameters": {
										"id": 1023,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1022,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1024,
												"src": "1621:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1021,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:4"
									},
									"scope": 1047,
									"src": "1547:83:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1025,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:4",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1034,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1030,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1027,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1034,
												"src": "2325:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1026,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1029,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1034,
												"src": "2342:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1028,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:4"
									},
									"returnParameters": {
										"id": 1033,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1032,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1034,
												"src": "2375:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1031,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:4"
									},
									"scope": 1047,
									"src": "2308:73:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1035,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:4",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1046,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1042,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1037,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "2711:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1036,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1039,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "2725:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1038,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1041,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "2737:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1040,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:4"
									},
									"returnParameters": {
										"id": 1045,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1044,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "2770:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1043,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:4"
									},
									"scope": 1047,
									"src": "2689:87:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1048,
							"src": "203:2575:4",
							"usedErrors": [],
							"usedEvents": [
								981,
								990
							]
						}
					],
					"src": "106:2673:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol",
					"exportedSymbols": {
						"ERC20": [
							969
						],
						"ERC4626": [
							1732
						],
						"IERC20": [
							1047
						],
						"IERC20Metadata": [
							1758
						],
						"IERC4626": [
							317
						],
						"Math": [
							3421
						],
						"SafeERC20": [
							2084
						]
					},
					"id": 1733,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1049,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "118:24:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 1053,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1733,
							"sourceUnit": 970,
							"src": "144:59:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1050,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1047,
										"src": "152:6:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 1051,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1758,
										"src": "160:14:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 1052,
										"name": "ERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 969,
										"src": "176:5:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "../utils/SafeERC20.sol",
							"id": 1055,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1733,
							"sourceUnit": 2085,
							"src": "204:49:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1054,
										"name": "SafeERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2084,
										"src": "212:9:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC4626.sol",
							"file": "../../../interfaces/IERC4626.sol",
							"id": 1057,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1733,
							"sourceUnit": 318,
							"src": "254:58:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1056,
										"name": "IERC4626",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 317,
										"src": "262:8:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
							"file": "../../../utils/math/Math.sol",
							"id": 1059,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1733,
							"sourceUnit": 3422,
							"src": "313:50:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1058,
										"name": "Math",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3421,
										"src": "321:4:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1061,
										"name": "ERC20",
										"nameLocations": [
											"3187:5:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 969,
										"src": "3187:5:5"
									},
									"id": 1062,
									"nodeType": "InheritanceSpecifier",
									"src": "3187:5:5"
								},
								{
									"baseName": {
										"id": 1063,
										"name": "IERC4626",
										"nameLocations": [
											"3194:8:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 317,
										"src": "3194:8:5"
									},
									"id": 1064,
									"nodeType": "InheritanceSpecifier",
									"src": "3194:8:5"
								}
							],
							"canonicalName": "ERC4626",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1060,
								"nodeType": "StructuredDocumentation",
								"src": "365:2792:5",
								"text": " @dev Implementation of the ERC4626 \"Tokenized Vault Standard\" as defined in\n https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\n This extension allows the minting and burning of \"shares\" (represented using the ERC20 inheritance) in exchange for\n underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\n the ERC20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this\n contract and not the \"assets\" token which is an independent contract.\n [CAUTION]\n ====\n In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\n with a \"donation\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\n attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\n deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\n similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\n verifying the amount received is as expected, using a wrapper that performs these checks such as\n https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\n Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\n corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\n decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\n determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\n (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\n donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\n expensive than it is profitable. More details about the underlying math can be found\n xref:erc4626.adoc#inflation-attack[here].\n The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\n to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\n will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\n bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\n `_convertToShares` and `_convertToAssets` functions.\n To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\n ===="
							},
							"fullyImplemented": true,
							"id": 1732,
							"linearizedBaseContracts": [
								1732,
								317,
								969,
								359,
								1758,
								1047,
								2367
							],
							"name": "ERC4626",
							"nameLocation": "3176:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1067,
									"libraryName": {
										"id": 1065,
										"name": "Math",
										"nameLocations": [
											"3215:4:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3421,
										"src": "3215:4:5"
									},
									"nodeType": "UsingForDirective",
									"src": "3209:23:5",
									"typeName": {
										"id": 1066,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "3224:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 1070,
									"mutability": "immutable",
									"name": "_asset",
									"nameLocation": "3263:6:5",
									"nodeType": "VariableDeclaration",
									"scope": 1732,
									"src": "3238:31:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$1047",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 1069,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1068,
											"name": "IERC20",
											"nameLocations": [
												"3238:6:5"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1047,
											"src": "3238:6:5"
										},
										"referencedDeclaration": 1047,
										"src": "3238:6:5",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$1047",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1072,
									"mutability": "immutable",
									"name": "_underlyingDecimals",
									"nameLocation": "3299:19:5",
									"nodeType": "VariableDeclaration",
									"scope": 1732,
									"src": "3275:43:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1071,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "3275:5:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 1073,
										"nodeType": "StructuredDocumentation",
										"src": "3325:92:5",
										"text": " @dev Attempted to deposit more assets than the max amount for `receiver`."
									},
									"errorSelector": "79012fb2",
									"id": 1081,
									"name": "ERC4626ExceededMaxDeposit",
									"nameLocation": "3428:25:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1080,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1075,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3462:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1081,
												"src": "3454:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1074,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3454:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1077,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "3480:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1081,
												"src": "3472:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1076,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3472:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1079,
												"mutability": "mutable",
												"name": "max",
												"nameLocation": "3496:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1081,
												"src": "3488:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1078,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3453:47:5"
									},
									"src": "3422:79:5"
								},
								{
									"documentation": {
										"id": 1082,
										"nodeType": "StructuredDocumentation",
										"src": "3507:89:5",
										"text": " @dev Attempted to mint more shares than the max amount for `receiver`."
									},
									"errorSelector": "284ff667",
									"id": 1090,
									"name": "ERC4626ExceededMaxMint",
									"nameLocation": "3607:22:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1089,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1084,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3638:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1090,
												"src": "3630:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1083,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3630:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1086,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "3656:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1090,
												"src": "3648:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1085,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3648:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1088,
												"mutability": "mutable",
												"name": "max",
												"nameLocation": "3672:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1090,
												"src": "3664:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1087,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3664:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3629:47:5"
									},
									"src": "3601:76:5"
								},
								{
									"documentation": {
										"id": 1091,
										"nodeType": "StructuredDocumentation",
										"src": "3683:93:5",
										"text": " @dev Attempted to withdraw more assets than the max amount for `receiver`."
									},
									"errorSelector": "fe9cceec",
									"id": 1099,
									"name": "ERC4626ExceededMaxWithdraw",
									"nameLocation": "3787:26:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1098,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1093,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3822:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1099,
												"src": "3814:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1092,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3814:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "3837:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1099,
												"src": "3829:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1094,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3829:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1097,
												"mutability": "mutable",
												"name": "max",
												"nameLocation": "3853:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1099,
												"src": "3845:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1096,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3845:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3813:44:5"
									},
									"src": "3781:77:5"
								},
								{
									"documentation": {
										"id": 1100,
										"nodeType": "StructuredDocumentation",
										"src": "3864:91:5",
										"text": " @dev Attempted to redeem more shares than the max amount for `receiver`."
									},
									"errorSelector": "b94abeec",
									"id": 1108,
									"name": "ERC4626ExceededMaxRedeem",
									"nameLocation": "3966:24:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1102,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3999:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1108,
												"src": "3991:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1101,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3991:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1104,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "4014:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1108,
												"src": "4006:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1103,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4006:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1106,
												"mutability": "mutable",
												"name": "max",
												"nameLocation": "4030:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1108,
												"src": "4022:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1105,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4022:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3990:44:5"
									},
									"src": "3960:75:5"
								},
								{
									"body": {
										"id": 1134,
										"nodeType": "Block",
										"src": "4192:168:5",
										"statements": [
											{
												"assignments": [
													1116,
													1118
												],
												"declarations": [
													{
														"constant": false,
														"id": 1116,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "4208:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1134,
														"src": "4203:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1115,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4203:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1118,
														"mutability": "mutable",
														"name": "assetDecimals",
														"nameLocation": "4223:13:5",
														"nodeType": "VariableDeclaration",
														"scope": 1134,
														"src": "4217:19:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 1117,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "4217:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1122,
												"initialValue": {
													"arguments": [
														{
															"id": 1120,
															"name": "asset_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1112,
															"src": "4261:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1047",
																"typeString": "contract IERC20"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$1047",
																"typeString": "contract IERC20"
															}
														],
														"id": 1119,
														"name": "_tryGetAssetDecimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1202,
														"src": "4240:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_contract$_IERC20_$1047_$returns$_t_bool_$_t_uint8_$",
															"typeString": "function (contract IERC20) view returns (bool,uint8)"
														}
													},
													"id": 1121,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4240:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint8_$",
														"typeString": "tuple(bool,uint8)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4202:66:5"
											},
											{
												"expression": {
													"id": 1128,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1123,
														"name": "_underlyingDecimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1072,
														"src": "4278:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"id": 1124,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1116,
															"src": "4300:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"hexValue": "3138",
															"id": 1126,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4326:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_18_by_1",
																"typeString": "int_const 18"
															},
															"value": "18"
														},
														"id": 1127,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "4300:28:5",
														"trueExpression": {
															"id": 1125,
															"name": "assetDecimals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1118,
															"src": "4310:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "4278:50:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 1129,
												"nodeType": "ExpressionStatement",
												"src": "4278:50:5"
											},
											{
												"expression": {
													"id": 1132,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1130,
														"name": "_asset",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1070,
														"src": "4338:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$1047",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1131,
														"name": "asset_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1112,
														"src": "4347:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$1047",
															"typeString": "contract IERC20"
														}
													},
													"src": "4338:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1047",
														"typeString": "contract IERC20"
													}
												},
												"id": 1133,
												"nodeType": "ExpressionStatement",
												"src": "4338:15:5"
											}
										]
									},
									"documentation": {
										"id": 1109,
										"nodeType": "StructuredDocumentation",
										"src": "4041:119:5",
										"text": " @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777)."
									},
									"id": 1135,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1112,
												"mutability": "mutable",
												"name": "asset_",
												"nameLocation": "4184:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1135,
												"src": "4177:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1047",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1111,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1110,
														"name": "IERC20",
														"nameLocations": [
															"4177:6:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1047,
														"src": "4177:6:5"
													},
													"referencedDeclaration": 1047,
													"src": "4177:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1047",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4176:15:5"
									},
									"returnParameters": {
										"id": 1114,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4192:0:5"
									},
									"scope": 1732,
									"src": "4165:195:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1201,
										"nodeType": "Block",
										"src": "4583:453:5",
										"statements": [
											{
												"assignments": [
													1147,
													1149
												],
												"declarations": [
													{
														"constant": false,
														"id": 1147,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "4599:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1201,
														"src": "4594:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1146,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4594:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1149,
														"mutability": "mutable",
														"name": "encodedDecimals",
														"nameLocation": "4621:15:5",
														"nodeType": "VariableDeclaration",
														"scope": 1201,
														"src": "4608:28:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1148,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4608:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1162,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1157,
																		"name": "IERC20Metadata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1758,
																		"src": "4695:14:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_IERC20Metadata_$1758_$",
																			"typeString": "type(contract IERC20Metadata)"
																		}
																	},
																	"id": 1158,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "4710:8:5",
																	"memberName": "decimals",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1757,
																	"src": "4695:23:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_declaration_view$__$returns$_t_uint8_$",
																		"typeString": "function IERC20Metadata.decimals() view returns (uint8)"
																	}
																},
																{
																	"components": [],
																	"id": 1159,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4720:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_declaration_view$__$returns$_t_uint8_$",
																		"typeString": "function IERC20Metadata.decimals() view returns (uint8)"
																	},
																	{
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																],
																"expression": {
																	"id": 1155,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4680:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1156,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4684:10:5",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "4680:14:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1160,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4680:43:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1152,
																	"name": "asset_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1139,
																	"src": "4648:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$1047",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$1047",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 1151,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4640:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1150,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4640:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1153,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4640:15:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1154,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4656:10:5",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "4640:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 1161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4640:93:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4593:140:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1168,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1163,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1147,
														"src": "4747:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1167,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 1164,
																"name": "encodedDecimals",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1149,
																"src": "4758:15:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1165,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4774:6:5",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "4758:22:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"hexValue": "3332",
															"id": 1166,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4784:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "32"
														},
														"src": "4758:28:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4747:39:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1196,
												"nodeType": "IfStatement",
												"src": "4743:260:5",
												"trueBody": {
													"id": 1195,
													"nodeType": "Block",
													"src": "4788:215:5",
													"statements": [
														{
															"assignments": [
																1170
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1170,
																	"mutability": "mutable",
																	"name": "returnedDecimals",
																	"nameLocation": "4810:16:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 1195,
																	"src": "4802:24:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1169,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "4802:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1178,
															"initialValue": {
																"arguments": [
																	{
																		"id": 1173,
																		"name": "encodedDecimals",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1149,
																		"src": "4840:15:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"components": [
																			{
																				"id": 1175,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "4858:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint256_$",
																					"typeString": "type(uint256)"
																				},
																				"typeName": {
																					"id": 1174,
																					"name": "uint256",
																					"nodeType": "ElementaryTypeName",
																					"src": "4858:7:5",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"id": 1176,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "4857:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		}
																	],
																	"expression": {
																		"id": 1171,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "4829:3:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 1172,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "4833:6:5",
																	"memberName": "decode",
																	"nodeType": "MemberAccess",
																	"src": "4829:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1177,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4829:38:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4802:65:5"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1185,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1179,
																	"name": "returnedDecimals",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1170,
																	"src": "4885:16:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 1182,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "4910:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 1181,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "4910:5:5",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				}
																			],
																			"id": 1180,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "4905:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 1183,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4905:11:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint8",
																			"typeString": "type(uint8)"
																		}
																	},
																	"id": 1184,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "4917:3:5",
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "4905:15:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "4885:35:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1194,
															"nodeType": "IfStatement",
															"src": "4881:112:5",
															"trueBody": {
																"id": 1193,
																"nodeType": "Block",
																"src": "4922:71:5",
																"statements": [
																	{
																		"expression": {
																			"components": [
																				{
																					"hexValue": "74727565",
																					"id": 1186,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "bool",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "4948:4:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					"value": "true"
																				},
																				{
																					"arguments": [
																						{
																							"id": 1189,
																							"name": "returnedDecimals",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1170,
																							"src": "4960:16:5",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"id": 1188,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4954:5:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint8_$",
																							"typeString": "type(uint8)"
																						},
																						"typeName": {
																							"id": 1187,
																							"name": "uint8",
																							"nodeType": "ElementaryTypeName",
																							"src": "4954:5:5",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 1190,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4954:23:5",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					}
																				}
																			],
																			"id": 1191,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "4947:31:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$_t_bool_$_t_uint8_$",
																				"typeString": "tuple(bool,uint8)"
																			}
																		},
																		"functionReturnParameters": 1145,
																		"id": 1192,
																		"nodeType": "Return",
																		"src": "4940:38:5"
																	}
																]
															}
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "66616c7365",
															"id": 1197,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5020:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "false"
														},
														{
															"hexValue": "30",
															"id": 1198,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5027:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"id": 1199,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "5019:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
														"typeString": "tuple(bool,int_const 0)"
													}
												},
												"functionReturnParameters": 1145,
												"id": 1200,
												"nodeType": "Return",
												"src": "5012:17:5"
											}
										]
									},
									"documentation": {
										"id": 1136,
										"nodeType": "StructuredDocumentation",
										"src": "4366:132:5",
										"text": " @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way."
									},
									"id": 1202,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_tryGetAssetDecimals",
									"nameLocation": "4512:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1139,
												"mutability": "mutable",
												"name": "asset_",
												"nameLocation": "4540:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1202,
												"src": "4533:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1047",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1138,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1137,
														"name": "IERC20",
														"nameLocations": [
															"4533:6:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1047,
														"src": "4533:6:5"
													},
													"referencedDeclaration": 1047,
													"src": "4533:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1047",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4532:15:5"
									},
									"returnParameters": {
										"id": 1145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1142,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1202,
												"src": "4570:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1141,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4570:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1144,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1202,
												"src": "4576:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1143,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4576:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4569:13:5"
									},
									"scope": 1732,
									"src": "4503:533:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"baseFunctions": [
										533,
										1757
									],
									"body": {
										"id": 1216,
										"nodeType": "Block",
										"src": "5529:63:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 1214,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1211,
														"name": "_underlyingDecimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1072,
														"src": "5546:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1212,
															"name": "_decimalsOffset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1731,
															"src": "5568:15:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																"typeString": "function () view returns (uint8)"
															}
														},
														"id": 1213,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5568:17:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "5546:39:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 1210,
												"id": 1215,
												"nodeType": "Return",
												"src": "5539:46:5"
											}
										]
									},
									"documentation": {
										"id": 1203,
										"nodeType": "StructuredDocumentation",
										"src": "5042:394:5",
										"text": " @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\n \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\n See {IERC20Metadata-decimals}."
									},
									"functionSelector": "313ce567",
									"id": 1217,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "5450:8:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1207,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1205,
												"name": "IERC20Metadata",
												"nameLocations": [
													"5490:14:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1758,
												"src": "5490:14:5"
											},
											{
												"id": 1206,
												"name": "ERC20",
												"nameLocations": [
													"5506:5:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 969,
												"src": "5506:5:5"
											}
										],
										"src": "5481:31:5"
									},
									"parameters": {
										"id": 1204,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5458:2:5"
									},
									"returnParameters": {
										"id": 1210,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1209,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1217,
												"src": "5522:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1208,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5522:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5521:7:5"
									},
									"scope": 1732,
									"src": "5441:151:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										186
									],
									"body": {
										"id": 1228,
										"nodeType": "Block",
										"src": "5691:39:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1225,
															"name": "_asset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1070,
															"src": "5716:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1047",
																"typeString": "contract IERC20"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$1047",
																"typeString": "contract IERC20"
															}
														],
														"id": 1224,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "5708:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_$",
															"typeString": "type(address)"
														},
														"typeName": {
															"id": 1223,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5708:7:5",
															"typeDescriptions": {}
														}
													},
													"id": 1226,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5708:15:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1222,
												"id": 1227,
												"nodeType": "Return",
												"src": "5701:22:5"
											}
										]
									},
									"documentation": {
										"id": 1218,
										"nodeType": "StructuredDocumentation",
										"src": "5598:33:5",
										"text": "@dev See {IERC4626-asset}. "
									},
									"functionSelector": "38d52e0f",
									"id": 1229,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "asset",
									"nameLocation": "5645:5:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1219,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5650:2:5"
									},
									"returnParameters": {
										"id": 1222,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1221,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "5682:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1220,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5682:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5681:9:5"
									},
									"scope": 1732,
									"src": "5636:94:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										192
									],
									"body": {
										"id": 1243,
										"nodeType": "Block",
										"src": "5841:55:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1239,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5883:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC4626_$1732",
																		"typeString": "contract ERC4626"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC4626_$1732",
																		"typeString": "contract ERC4626"
																	}
																],
																"id": 1238,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5875:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1237,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5875:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1240,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5875:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1235,
															"name": "_asset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1070,
															"src": "5858:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1047",
																"typeString": "contract IERC20"
															}
														},
														"id": 1236,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5865:9:5",
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1004,
														"src": "5858:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1241,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5858:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1234,
												"id": 1242,
												"nodeType": "Return",
												"src": "5851:38:5"
											}
										]
									},
									"documentation": {
										"id": 1230,
										"nodeType": "StructuredDocumentation",
										"src": "5736:39:5",
										"text": "@dev See {IERC4626-totalAssets}. "
									},
									"functionSelector": "01e1d114",
									"id": 1244,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalAssets",
									"nameLocation": "5789:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1231,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5800:2:5"
									},
									"returnParameters": {
										"id": 1234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1233,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1244,
												"src": "5832:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1232,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5832:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5831:9:5"
									},
									"scope": 1732,
									"src": "5780:116:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										200
									],
									"body": {
										"id": 1259,
										"nodeType": "Block",
										"src": "6029:69:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1253,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1247,
															"src": "6063:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1254,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3421,
																	"src": "6071:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3421_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1255,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6076:8:5",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2378,
																"src": "6071:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2378_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1256,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6085:5:5",
															"memberName": "Floor",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2374,
															"src": "6071:19:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2378",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2378",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1252,
														"name": "_convertToShares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1611,
														"src": "6046:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2378_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1257,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6046:45:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1251,
												"id": 1258,
												"nodeType": "Return",
												"src": "6039:52:5"
											}
										]
									},
									"documentation": {
										"id": 1245,
										"nodeType": "StructuredDocumentation",
										"src": "5902:43:5",
										"text": "@dev See {IERC4626-convertToShares}. "
									},
									"functionSelector": "c6e6f592",
									"id": 1260,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "convertToShares",
									"nameLocation": "5959:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1247,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "5983:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1260,
												"src": "5975:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1246,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5975:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5974:16:5"
									},
									"returnParameters": {
										"id": 1251,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1250,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1260,
												"src": "6020:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1249,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6020:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6019:9:5"
									},
									"scope": 1732,
									"src": "5950:148:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										208
									],
									"body": {
										"id": 1275,
										"nodeType": "Block",
										"src": "6231:69:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1269,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1263,
															"src": "6265:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1270,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3421,
																	"src": "6273:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3421_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1271,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6278:8:5",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2378,
																"src": "6273:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2378_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1272,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6287:5:5",
															"memberName": "Floor",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2374,
															"src": "6273:19:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2378",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2378",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1268,
														"name": "_convertToAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1639,
														"src": "6248:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2378_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1273,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6248:45:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1267,
												"id": 1274,
												"nodeType": "Return",
												"src": "6241:52:5"
											}
										]
									},
									"documentation": {
										"id": 1261,
										"nodeType": "StructuredDocumentation",
										"src": "6104:43:5",
										"text": "@dev See {IERC4626-convertToAssets}. "
									},
									"functionSelector": "07a2d13a",
									"id": 1276,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "convertToAssets",
									"nameLocation": "6161:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1263,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "6185:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1276,
												"src": "6177:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6177:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6176:16:5"
									},
									"returnParameters": {
										"id": 1267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1266,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1276,
												"src": "6222:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1265,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6222:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6221:9:5"
									},
									"scope": 1732,
									"src": "6152:148:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										216
									],
									"body": {
										"id": 1290,
										"nodeType": "Block",
										"src": "6416:41:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 1286,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6438:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1285,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6438:7:5",
																	"typeDescriptions": {}
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																}
															],
															"id": 1284,
															"name": "type",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967269,
															"src": "6433:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1287,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6433:13:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_magic_meta_type_t_uint256",
															"typeString": "type(uint256)"
														}
													},
													"id": 1288,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"memberLocation": "6447:3:5",
													"memberName": "max",
													"nodeType": "MemberAccess",
													"src": "6433:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1283,
												"id": 1289,
												"nodeType": "Return",
												"src": "6426:24:5"
											}
										]
									},
									"documentation": {
										"id": 1277,
										"nodeType": "StructuredDocumentation",
										"src": "6306:38:5",
										"text": "@dev See {IERC4626-maxDeposit}. "
									},
									"functionSelector": "402d267d",
									"id": 1291,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "maxDeposit",
									"nameLocation": "6358:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1279,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1291,
												"src": "6369:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1278,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6369:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6368:9:5"
									},
									"returnParameters": {
										"id": 1283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1282,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1291,
												"src": "6407:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1281,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6407:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6406:9:5"
									},
									"scope": 1732,
									"src": "6349:108:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										242
									],
									"body": {
										"id": 1305,
										"nodeType": "Block",
										"src": "6567:41:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 1301,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6589:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1300,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6589:7:5",
																	"typeDescriptions": {}
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																}
															],
															"id": 1299,
															"name": "type",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967269,
															"src": "6584:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1302,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6584:13:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_magic_meta_type_t_uint256",
															"typeString": "type(uint256)"
														}
													},
													"id": 1303,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"memberLocation": "6598:3:5",
													"memberName": "max",
													"nodeType": "MemberAccess",
													"src": "6584:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1298,
												"id": 1304,
												"nodeType": "Return",
												"src": "6577:24:5"
											}
										]
									},
									"documentation": {
										"id": 1292,
										"nodeType": "StructuredDocumentation",
										"src": "6463:35:5",
										"text": "@dev See {IERC4626-maxMint}. "
									},
									"functionSelector": "c63d75b6",
									"id": 1306,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "maxMint",
									"nameLocation": "6512:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1294,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1306,
												"src": "6520:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1293,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6520:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6519:9:5"
									},
									"returnParameters": {
										"id": 1298,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1297,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1306,
												"src": "6558:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1296,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6558:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6557:9:5"
									},
									"scope": 1732,
									"src": "6503:105:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										268
									],
									"body": {
										"id": 1323,
										"nodeType": "Block",
										"src": "6732:79:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1316,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1309,
																	"src": "6776:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1315,
																"name": "balanceOf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 555,
																"src": "6766:9:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address) view returns (uint256)"
																}
															},
															"id": 1317,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6766:16:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1318,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3421,
																	"src": "6784:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3421_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1319,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6789:8:5",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2378,
																"src": "6784:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2378_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1320,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6798:5:5",
															"memberName": "Floor",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2374,
															"src": "6784:19:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2378",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2378",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1314,
														"name": "_convertToAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1639,
														"src": "6749:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2378_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1321,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6749:55:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1313,
												"id": 1322,
												"nodeType": "Return",
												"src": "6742:62:5"
											}
										]
									},
									"documentation": {
										"id": 1307,
										"nodeType": "StructuredDocumentation",
										"src": "6614:39:5",
										"text": "@dev See {IERC4626-maxWithdraw}. "
									},
									"functionSelector": "ce96cb77",
									"id": 1324,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "maxWithdraw",
									"nameLocation": "6667:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1309,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "6687:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1324,
												"src": "6679:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1308,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6679:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6678:15:5"
									},
									"returnParameters": {
										"id": 1313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1312,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1324,
												"src": "6723:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1311,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6723:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6722:9:5"
									},
									"scope": 1732,
									"src": "6658:153:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										296
									],
									"body": {
										"id": 1336,
										"nodeType": "Block",
										"src": "6931:40:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1333,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1327,
															"src": "6958:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1332,
														"name": "balanceOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 555,
														"src": "6948:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1334,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6948:16:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1331,
												"id": 1335,
												"nodeType": "Return",
												"src": "6941:23:5"
											}
										]
									},
									"documentation": {
										"id": 1325,
										"nodeType": "StructuredDocumentation",
										"src": "6817:37:5",
										"text": "@dev See {IERC4626-maxRedeem}. "
									},
									"functionSelector": "d905777e",
									"id": 1337,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "maxRedeem",
									"nameLocation": "6868:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1328,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1327,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "6886:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1337,
												"src": "6878:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1326,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6878:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6877:15:5"
									},
									"returnParameters": {
										"id": 1331,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1330,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1337,
												"src": "6922:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1329,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6922:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6921:9:5"
									},
									"scope": 1732,
									"src": "6859:112:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										224
									],
									"body": {
										"id": 1352,
										"nodeType": "Block",
										"src": "7102:69:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1346,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1340,
															"src": "7136:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1347,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3421,
																	"src": "7144:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3421_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1348,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7149:8:5",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2378,
																"src": "7144:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2378_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1349,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7158:5:5",
															"memberName": "Floor",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2374,
															"src": "7144:19:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2378",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2378",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1345,
														"name": "_convertToShares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1611,
														"src": "7119:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2378_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7119:45:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1344,
												"id": 1351,
												"nodeType": "Return",
												"src": "7112:52:5"
											}
										]
									},
									"documentation": {
										"id": 1338,
										"nodeType": "StructuredDocumentation",
										"src": "6977:42:5",
										"text": "@dev See {IERC4626-previewDeposit}. "
									},
									"functionSelector": "ef8b30f7",
									"id": 1353,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "previewDeposit",
									"nameLocation": "7033:14:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1341,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1340,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "7056:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1353,
												"src": "7048:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1339,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7048:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7047:16:5"
									},
									"returnParameters": {
										"id": 1344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1343,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1353,
												"src": "7093:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1342,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7093:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7092:9:5"
									},
									"scope": 1732,
									"src": "7024:147:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										250
									],
									"body": {
										"id": 1368,
										"nodeType": "Block",
										"src": "7296:68:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1362,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1356,
															"src": "7330:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1363,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3421,
																	"src": "7338:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3421_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1364,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7343:8:5",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2378,
																"src": "7338:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2378_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1365,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7352:4:5",
															"memberName": "Ceil",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2375,
															"src": "7338:18:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2378",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2378",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1361,
														"name": "_convertToAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1639,
														"src": "7313:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2378_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1366,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7313:44:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1360,
												"id": 1367,
												"nodeType": "Return",
												"src": "7306:51:5"
											}
										]
									},
									"documentation": {
										"id": 1354,
										"nodeType": "StructuredDocumentation",
										"src": "7177:39:5",
										"text": "@dev See {IERC4626-previewMint}. "
									},
									"functionSelector": "b3d7f6b9",
									"id": 1369,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "previewMint",
									"nameLocation": "7230:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1357,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1356,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "7250:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1369,
												"src": "7242:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1355,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7242:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7241:16:5"
									},
									"returnParameters": {
										"id": 1360,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1359,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1369,
												"src": "7287:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1358,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7287:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7286:9:5"
									},
									"scope": 1732,
									"src": "7221:143:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										276
									],
									"body": {
										"id": 1384,
										"nodeType": "Block",
										"src": "7497:68:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1378,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1372,
															"src": "7531:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1379,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3421,
																	"src": "7539:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3421_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1380,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7544:8:5",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2378,
																"src": "7539:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2378_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1381,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7553:4:5",
															"memberName": "Ceil",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2375,
															"src": "7539:18:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2378",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2378",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1377,
														"name": "_convertToShares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1611,
														"src": "7514:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2378_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1382,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7514:44:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1376,
												"id": 1383,
												"nodeType": "Return",
												"src": "7507:51:5"
											}
										]
									},
									"documentation": {
										"id": 1370,
										"nodeType": "StructuredDocumentation",
										"src": "7370:43:5",
										"text": "@dev See {IERC4626-previewWithdraw}. "
									},
									"functionSelector": "0a28a477",
									"id": 1385,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "previewWithdraw",
									"nameLocation": "7427:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1372,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "7451:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1385,
												"src": "7443:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1371,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7443:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7442:16:5"
									},
									"returnParameters": {
										"id": 1376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1375,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1385,
												"src": "7488:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1374,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7488:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7487:9:5"
									},
									"scope": 1732,
									"src": "7418:147:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										304
									],
									"body": {
										"id": 1400,
										"nodeType": "Block",
										"src": "7694:69:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1394,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1388,
															"src": "7728:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1395,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3421,
																	"src": "7736:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3421_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1396,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7741:8:5",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2378,
																"src": "7736:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2378_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1397,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7750:5:5",
															"memberName": "Floor",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2374,
															"src": "7736:19:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2378",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2378",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1393,
														"name": "_convertToAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1639,
														"src": "7711:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2378_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1398,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7711:45:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1392,
												"id": 1399,
												"nodeType": "Return",
												"src": "7704:52:5"
											}
										]
									},
									"documentation": {
										"id": 1386,
										"nodeType": "StructuredDocumentation",
										"src": "7571:41:5",
										"text": "@dev See {IERC4626-previewRedeem}. "
									},
									"functionSelector": "4cdad506",
									"id": 1401,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "previewRedeem",
									"nameLocation": "7626:13:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1389,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1388,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "7648:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1401,
												"src": "7640:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1387,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7640:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7639:16:5"
									},
									"returnParameters": {
										"id": 1392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1391,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1401,
												"src": "7685:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1390,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7685:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7684:9:5"
									},
									"scope": 1732,
									"src": "7617:146:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										234
									],
									"body": {
										"id": 1444,
										"nodeType": "Block",
										"src": "7893:308:5",
										"statements": [
											{
												"assignments": [
													1412
												],
												"declarations": [
													{
														"constant": false,
														"id": 1412,
														"mutability": "mutable",
														"name": "maxAssets",
														"nameLocation": "7911:9:5",
														"nodeType": "VariableDeclaration",
														"scope": 1444,
														"src": "7903:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1411,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7903:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1416,
												"initialValue": {
													"arguments": [
														{
															"id": 1414,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1406,
															"src": "7934:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1413,
														"name": "maxDeposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1291,
														"src": "7923:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1415,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7923:20:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7903:40:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1419,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1417,
														"name": "assets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1404,
														"src": "7957:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1418,
														"name": "maxAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1412,
														"src": "7966:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7957:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1427,
												"nodeType": "IfStatement",
												"src": "7953:110:5",
												"trueBody": {
													"id": 1426,
													"nodeType": "Block",
													"src": "7977:86:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1421,
																		"name": "receiver",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1406,
																		"src": "8024:8:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1422,
																		"name": "assets",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1404,
																		"src": "8034:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1423,
																		"name": "maxAssets",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1412,
																		"src": "8042:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1420,
																	"name": "ERC4626ExceededMaxDeposit",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1081,
																	"src": "7998:25:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256,uint256) pure"
																	}
																},
																"id": 1424,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7998:54:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1425,
															"nodeType": "RevertStatement",
															"src": "7991:61:5"
														}
													]
												}
											},
											{
												"assignments": [
													1429
												],
												"declarations": [
													{
														"constant": false,
														"id": 1429,
														"mutability": "mutable",
														"name": "shares",
														"nameLocation": "8081:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1444,
														"src": "8073:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1428,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8073:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1433,
												"initialValue": {
													"arguments": [
														{
															"id": 1431,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1404,
															"src": "8105:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1430,
														"name": "previewDeposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1353,
														"src": "8090:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1432,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8090:22:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8073:39:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1435,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2349,
																"src": "8131:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1436,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8131:12:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1437,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1406,
															"src": "8145:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1438,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1404,
															"src": "8155:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1439,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1429,
															"src": "8163:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1434,
														"name": "_deposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1676,
														"src": "8122:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1440,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8122:48:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1441,
												"nodeType": "ExpressionStatement",
												"src": "8122:48:5"
											},
											{
												"expression": {
													"id": 1442,
													"name": "shares",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1429,
													"src": "8188:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1410,
												"id": 1443,
												"nodeType": "Return",
												"src": "8181:13:5"
											}
										]
									},
									"documentation": {
										"id": 1402,
										"nodeType": "StructuredDocumentation",
										"src": "7769:35:5",
										"text": "@dev See {IERC4626-deposit}. "
									},
									"functionSelector": "6e553f65",
									"id": 1445,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nameLocation": "7818:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1407,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1404,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "7834:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1445,
												"src": "7826:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1403,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7826:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1406,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "7850:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1445,
												"src": "7842:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1405,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7842:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7825:34:5"
									},
									"returnParameters": {
										"id": 1410,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1409,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1445,
												"src": "7884:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1408,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7884:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7883:9:5"
									},
									"scope": 1732,
									"src": "7809:392:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										260
									],
									"body": {
										"id": 1488,
										"nodeType": "Block",
										"src": "8549:299:5",
										"statements": [
											{
												"assignments": [
													1456
												],
												"declarations": [
													{
														"constant": false,
														"id": 1456,
														"mutability": "mutable",
														"name": "maxShares",
														"nameLocation": "8567:9:5",
														"nodeType": "VariableDeclaration",
														"scope": 1488,
														"src": "8559:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1455,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8559:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1460,
												"initialValue": {
													"arguments": [
														{
															"id": 1458,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1450,
															"src": "8587:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1457,
														"name": "maxMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1306,
														"src": "8579:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1459,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8579:17:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8559:37:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1463,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1461,
														"name": "shares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1448,
														"src": "8610:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1462,
														"name": "maxShares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1456,
														"src": "8619:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8610:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1471,
												"nodeType": "IfStatement",
												"src": "8606:107:5",
												"trueBody": {
													"id": 1470,
													"nodeType": "Block",
													"src": "8630:83:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1465,
																		"name": "receiver",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1450,
																		"src": "8674:8:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1466,
																		"name": "shares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1448,
																		"src": "8684:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1467,
																		"name": "maxShares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1456,
																		"src": "8692:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1464,
																	"name": "ERC4626ExceededMaxMint",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1090,
																	"src": "8651:22:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256,uint256) pure"
																	}
																},
																"id": 1468,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8651:51:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1469,
															"nodeType": "RevertStatement",
															"src": "8644:58:5"
														}
													]
												}
											},
											{
												"assignments": [
													1473
												],
												"declarations": [
													{
														"constant": false,
														"id": 1473,
														"mutability": "mutable",
														"name": "assets",
														"nameLocation": "8731:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1488,
														"src": "8723:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1472,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8723:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1477,
												"initialValue": {
													"arguments": [
														{
															"id": 1475,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1448,
															"src": "8752:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1474,
														"name": "previewMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1369,
														"src": "8740:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1476,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8740:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8723:36:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1479,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2349,
																"src": "8778:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1480,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8778:12:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1481,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1450,
															"src": "8792:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1482,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1473,
															"src": "8802:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1483,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1448,
															"src": "8810:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1478,
														"name": "_deposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1676,
														"src": "8769:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1484,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8769:48:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1485,
												"nodeType": "ExpressionStatement",
												"src": "8769:48:5"
											},
											{
												"expression": {
													"id": 1486,
													"name": "assets",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1473,
													"src": "8835:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1454,
												"id": 1487,
												"nodeType": "Return",
												"src": "8828:13:5"
											}
										]
									},
									"documentation": {
										"id": 1446,
										"nodeType": "StructuredDocumentation",
										"src": "8207:256:5",
										"text": "@dev See {IERC4626-mint}.\n As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n In this case, the shares will be minted without requiring any assets to be deposited."
									},
									"functionSelector": "94bf804d",
									"id": 1489,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "8477:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1451,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1448,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "8490:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1489,
												"src": "8482:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1447,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8482:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1450,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "8506:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1489,
												"src": "8498:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1449,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8498:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8481:34:5"
									},
									"returnParameters": {
										"id": 1454,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1453,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1489,
												"src": "8540:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1452,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8540:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8539:9:5"
									},
									"scope": 1732,
									"src": "8468:380:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										288
									],
									"body": {
										"id": 1535,
										"nodeType": "Block",
										"src": "8995:313:5",
										"statements": [
											{
												"assignments": [
													1502
												],
												"declarations": [
													{
														"constant": false,
														"id": 1502,
														"mutability": "mutable",
														"name": "maxAssets",
														"nameLocation": "9013:9:5",
														"nodeType": "VariableDeclaration",
														"scope": 1535,
														"src": "9005:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1501,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9005:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1506,
												"initialValue": {
													"arguments": [
														{
															"id": 1504,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1496,
															"src": "9037:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1503,
														"name": "maxWithdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1324,
														"src": "9025:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1505,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9025:18:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9005:38:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1509,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1507,
														"name": "assets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1492,
														"src": "9057:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1508,
														"name": "maxAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1502,
														"src": "9066:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9057:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1517,
												"nodeType": "IfStatement",
												"src": "9053:108:5",
												"trueBody": {
													"id": 1516,
													"nodeType": "Block",
													"src": "9077:84:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1511,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1496,
																		"src": "9125:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1512,
																		"name": "assets",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1492,
																		"src": "9132:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1513,
																		"name": "maxAssets",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1502,
																		"src": "9140:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1510,
																	"name": "ERC4626ExceededMaxWithdraw",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1099,
																	"src": "9098:26:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256,uint256) pure"
																	}
																},
																"id": 1514,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9098:52:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1515,
															"nodeType": "RevertStatement",
															"src": "9091:59:5"
														}
													]
												}
											},
											{
												"assignments": [
													1519
												],
												"declarations": [
													{
														"constant": false,
														"id": 1519,
														"mutability": "mutable",
														"name": "shares",
														"nameLocation": "9179:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1535,
														"src": "9171:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1518,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9171:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1523,
												"initialValue": {
													"arguments": [
														{
															"id": 1521,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1492,
															"src": "9204:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1520,
														"name": "previewWithdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1385,
														"src": "9188:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1522,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9188:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9171:40:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1525,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2349,
																"src": "9231:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1526,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9231:12:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1527,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1494,
															"src": "9245:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1528,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1496,
															"src": "9255:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1529,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1492,
															"src": "9262:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1530,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1519,
															"src": "9270:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1524,
														"name": "_withdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1723,
														"src": "9221:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address,uint256,uint256)"
														}
													},
													"id": 1531,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9221:56:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1532,
												"nodeType": "ExpressionStatement",
												"src": "9221:56:5"
											},
											{
												"expression": {
													"id": 1533,
													"name": "shares",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1519,
													"src": "9295:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1500,
												"id": 1534,
												"nodeType": "Return",
												"src": "9288:13:5"
											}
										]
									},
									"documentation": {
										"id": 1490,
										"nodeType": "StructuredDocumentation",
										"src": "8854:36:5",
										"text": "@dev See {IERC4626-withdraw}. "
									},
									"functionSelector": "b460af94",
									"id": 1536,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nameLocation": "8904:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1492,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "8921:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1536,
												"src": "8913:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1491,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8913:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1494,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "8937:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1536,
												"src": "8929:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1493,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8929:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1496,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "8955:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1536,
												"src": "8947:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1495,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8947:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8912:49:5"
									},
									"returnParameters": {
										"id": 1500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1499,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1536,
												"src": "8986:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1498,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8986:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8985:9:5"
									},
									"scope": 1732,
									"src": "8895:413:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										316
									],
									"body": {
										"id": 1582,
										"nodeType": "Block",
										"src": "9451:307:5",
										"statements": [
											{
												"assignments": [
													1549
												],
												"declarations": [
													{
														"constant": false,
														"id": 1549,
														"mutability": "mutable",
														"name": "maxShares",
														"nameLocation": "9469:9:5",
														"nodeType": "VariableDeclaration",
														"scope": 1582,
														"src": "9461:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1548,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9461:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1553,
												"initialValue": {
													"arguments": [
														{
															"id": 1551,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1543,
															"src": "9491:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1550,
														"name": "maxRedeem",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1337,
														"src": "9481:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9481:16:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9461:36:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1556,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1554,
														"name": "shares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1539,
														"src": "9511:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1555,
														"name": "maxShares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1549,
														"src": "9520:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9511:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1564,
												"nodeType": "IfStatement",
												"src": "9507:106:5",
												"trueBody": {
													"id": 1563,
													"nodeType": "Block",
													"src": "9531:82:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1558,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1543,
																		"src": "9577:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1559,
																		"name": "shares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1539,
																		"src": "9584:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1560,
																		"name": "maxShares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1549,
																		"src": "9592:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1557,
																	"name": "ERC4626ExceededMaxRedeem",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1108,
																	"src": "9552:24:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256,uint256) pure"
																	}
																},
																"id": 1561,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9552:50:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1562,
															"nodeType": "RevertStatement",
															"src": "9545:57:5"
														}
													]
												}
											},
											{
												"assignments": [
													1566
												],
												"declarations": [
													{
														"constant": false,
														"id": 1566,
														"mutability": "mutable",
														"name": "assets",
														"nameLocation": "9631:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1582,
														"src": "9623:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1565,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9623:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1570,
												"initialValue": {
													"arguments": [
														{
															"id": 1568,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1539,
															"src": "9654:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1567,
														"name": "previewRedeem",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1401,
														"src": "9640:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1569,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9640:21:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9623:38:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1572,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2349,
																"src": "9681:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1573,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9681:12:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1574,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1541,
															"src": "9695:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1575,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1543,
															"src": "9705:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1576,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1566,
															"src": "9712:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1577,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1539,
															"src": "9720:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1571,
														"name": "_withdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1723,
														"src": "9671:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address,uint256,uint256)"
														}
													},
													"id": 1578,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9671:56:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1579,
												"nodeType": "ExpressionStatement",
												"src": "9671:56:5"
											},
											{
												"expression": {
													"id": 1580,
													"name": "assets",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1566,
													"src": "9745:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1547,
												"id": 1581,
												"nodeType": "Return",
												"src": "9738:13:5"
											}
										]
									},
									"documentation": {
										"id": 1537,
										"nodeType": "StructuredDocumentation",
										"src": "9314:34:5",
										"text": "@dev See {IERC4626-redeem}. "
									},
									"functionSelector": "ba087652",
									"id": 1583,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "redeem",
									"nameLocation": "9362:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1544,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1539,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "9377:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1583,
												"src": "9369:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1538,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9369:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1541,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "9393:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1583,
												"src": "9385:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1540,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9385:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1543,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9411:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1583,
												"src": "9403:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1542,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9403:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9368:49:5"
									},
									"returnParameters": {
										"id": 1547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1546,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1583,
												"src": "9442:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1545,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9442:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9441:9:5"
									},
									"scope": 1732,
									"src": "9353:405:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1610,
										"nodeType": "Block",
										"src": "9988:107:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1602,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1596,
																	"name": "totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 542,
																	"src": "10019:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1597,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10019:13:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1601,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1598,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10035:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1599,
																		"name": "_decimalsOffset",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1731,
																		"src": "10041:15:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																			"typeString": "function () view returns (uint8)"
																		}
																	},
																	"id": 1600,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10041:17:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "10035:23:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10019:39:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1606,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1603,
																	"name": "totalAssets",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1244,
																	"src": "10060:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1604,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10060:13:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1605,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10076:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "10060:17:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1607,
															"name": "rounding",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1589,
															"src": "10079:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2378",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2378",
																"typeString": "enum Math.Rounding"
															}
														],
														"expression": {
															"id": 1594,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1586,
															"src": "10005:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1595,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10012:6:5",
														"memberName": "mulDiv",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2798,
														"src": "10005:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_enum$_Rounding_$2378_$returns$_t_uint256_$attached_to$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256,enum Math.Rounding) pure returns (uint256)"
														}
													},
													"id": 1608,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10005:83:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1593,
												"id": 1609,
												"nodeType": "Return",
												"src": "9998:90:5"
											}
										]
									},
									"documentation": {
										"id": 1584,
										"nodeType": "StructuredDocumentation",
										"src": "9764:113:5",
										"text": " @dev Internal conversion function (from assets to shares) with support for rounding direction."
									},
									"id": 1611,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_convertToShares",
									"nameLocation": "9891:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1586,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "9916:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1611,
												"src": "9908:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1585,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9908:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1589,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "9938:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1611,
												"src": "9924:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2378",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1588,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1587,
														"name": "Math.Rounding",
														"nameLocations": [
															"9924:4:5",
															"9929:8:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2378,
														"src": "9924:13:5"
													},
													"referencedDeclaration": 2378,
													"src": "9924:13:5",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2378",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9907:40:5"
									},
									"returnParameters": {
										"id": 1593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1592,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1611,
												"src": "9979:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1591,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9979:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9978:9:5"
									},
									"scope": 1732,
									"src": "9882:213:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1638,
										"nodeType": "Block",
										"src": "10325:107:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1627,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1624,
																	"name": "totalAssets",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1244,
																	"src": "10356:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1625,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10356:13:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1626,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10372:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "10356:17:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1634,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1628,
																	"name": "totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 542,
																	"src": "10375:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1629,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10375:13:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1633,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1630,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10391:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1631,
																		"name": "_decimalsOffset",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1731,
																		"src": "10397:15:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																			"typeString": "function () view returns (uint8)"
																		}
																	},
																	"id": 1632,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10397:17:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "10391:23:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10375:39:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1635,
															"name": "rounding",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1617,
															"src": "10416:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2378",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2378",
																"typeString": "enum Math.Rounding"
															}
														],
														"expression": {
															"id": 1622,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1614,
															"src": "10342:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1623,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10349:6:5",
														"memberName": "mulDiv",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2798,
														"src": "10342:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_enum$_Rounding_$2378_$returns$_t_uint256_$attached_to$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256,enum Math.Rounding) pure returns (uint256)"
														}
													},
													"id": 1636,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10342:83:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1621,
												"id": 1637,
												"nodeType": "Return",
												"src": "10335:90:5"
											}
										]
									},
									"documentation": {
										"id": 1612,
										"nodeType": "StructuredDocumentation",
										"src": "10101:113:5",
										"text": " @dev Internal conversion function (from shares to assets) with support for rounding direction."
									},
									"id": 1639,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_convertToAssets",
									"nameLocation": "10228:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1618,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1614,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "10253:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1639,
												"src": "10245:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1613,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10245:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1617,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10275:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1639,
												"src": "10261:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2378",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1616,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1615,
														"name": "Math.Rounding",
														"nameLocations": [
															"10261:4:5",
															"10266:8:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2378,
														"src": "10261:13:5"
													},
													"referencedDeclaration": 2378,
													"src": "10261:13:5",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2378",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10244:40:5"
									},
									"returnParameters": {
										"id": 1621,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1620,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1639,
												"src": "10316:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1619,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10316:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10315:9:5"
									},
									"scope": 1732,
									"src": "10219:213:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1675,
										"nodeType": "Block",
										"src": "10597:729:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1654,
															"name": "_asset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1070,
															"src": "11191:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1047",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 1655,
															"name": "caller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1642,
															"src": "11199:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1658,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "11215:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC4626_$1732",
																		"typeString": "contract ERC4626"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC4626_$1732",
																		"typeString": "contract ERC4626"
																	}
																],
																"id": 1657,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11207:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1656,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11207:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1659,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11207:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1660,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1646,
															"src": "11222:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$1047",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1651,
															"name": "SafeERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2084,
															"src": "11164:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeERC20_$2084_$",
																"typeString": "type(library SafeERC20)"
															}
														},
														"id": 1653,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "11174:16:5",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1871,
														"src": "11164:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1047_$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1661,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11164:65:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1662,
												"nodeType": "ExpressionStatement",
												"src": "11164:65:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1664,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1644,
															"src": "11245:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1665,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1648,
															"src": "11255:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1663,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 809,
														"src": "11239:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1666,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11239:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1667,
												"nodeType": "ExpressionStatement",
												"src": "11239:23:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1669,
															"name": "caller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1642,
															"src": "11286:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1670,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1644,
															"src": "11294:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1671,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1646,
															"src": "11304:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1672,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1648,
															"src": "11312:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1668,
														"name": "Deposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 168,
														"src": "11278:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1673,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11278:41:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1674,
												"nodeType": "EmitStatement",
												"src": "11273:46:5"
											}
										]
									},
									"documentation": {
										"id": 1640,
										"nodeType": "StructuredDocumentation",
										"src": "10438:53:5",
										"text": " @dev Deposit/mint common workflow."
									},
									"id": 1676,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_deposit",
									"nameLocation": "10505:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1649,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1642,
												"mutability": "mutable",
												"name": "caller",
												"nameLocation": "10522:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1676,
												"src": "10514:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1641,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10514:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1644,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "10538:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1676,
												"src": "10530:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1643,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10530:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1646,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "10556:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1676,
												"src": "10548:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1645,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10548:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1648,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "10572:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1676,
												"src": "10564:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1647,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10564:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10513:66:5"
									},
									"returnParameters": {
										"id": 1650,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10597:0:5"
									},
									"scope": 1732,
									"src": "10496:830:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1722,
										"nodeType": "Block",
										"src": "11556:751:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1692,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1690,
														"name": "caller",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1679,
														"src": "11570:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1691,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1683,
														"src": "11580:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "11570:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1700,
												"nodeType": "IfStatement",
												"src": "11566:84:5",
												"trueBody": {
													"id": 1699,
													"nodeType": "Block",
													"src": "11587:63:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1694,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1683,
																		"src": "11617:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1695,
																		"name": "caller",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1679,
																		"src": "11624:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1696,
																		"name": "shares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1687,
																		"src": "11632:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1693,
																	"name": "_spendAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 968,
																	"src": "11601:15:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 1697,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11601:38:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1698,
															"nodeType": "ExpressionStatement",
															"src": "11601:38:5"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1702,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1683,
															"src": "12163:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1703,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1687,
															"src": "12170:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1701,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 842,
														"src": "12157:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1704,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12157:20:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1705,
												"nodeType": "ExpressionStatement",
												"src": "12157:20:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1709,
															"name": "_asset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1070,
															"src": "12210:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1047",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 1710,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1681,
															"src": "12218:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1711,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1685,
															"src": "12228:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$1047",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1706,
															"name": "SafeERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2084,
															"src": "12187:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeERC20_$2084_$",
																"typeString": "type(library SafeERC20)"
															}
														},
														"id": 1708,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "12197:12:5",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1844,
														"src": "12187:22:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1047_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1712,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12187:48:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1713,
												"nodeType": "ExpressionStatement",
												"src": "12187:48:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1715,
															"name": "caller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1679,
															"src": "12260:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1716,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1681,
															"src": "12268:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1717,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1683,
															"src": "12278:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1718,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1685,
															"src": "12285:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1719,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1687,
															"src": "12293:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1714,
														"name": "Withdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 180,
														"src": "12251:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address,uint256,uint256)"
														}
													},
													"id": 1720,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12251:49:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1721,
												"nodeType": "EmitStatement",
												"src": "12246:54:5"
											}
										]
									},
									"documentation": {
										"id": 1677,
										"nodeType": "StructuredDocumentation",
										"src": "11332:56:5",
										"text": " @dev Withdraw/redeem common workflow."
									},
									"id": 1723,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_withdraw",
									"nameLocation": "11402:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1688,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1679,
												"mutability": "mutable",
												"name": "caller",
												"nameLocation": "11429:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1723,
												"src": "11421:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1678,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11421:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1681,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "11453:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1723,
												"src": "11445:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1680,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11445:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1683,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11479:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1723,
												"src": "11471:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1682,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11471:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1685,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "11502:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1723,
												"src": "11494:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1684,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11494:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1687,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "11526:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1723,
												"src": "11518:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1686,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11518:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11411:127:5"
									},
									"returnParameters": {
										"id": 1689,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11556:0:5"
									},
									"scope": 1732,
									"src": "11393:914:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1730,
										"nodeType": "Block",
										"src": "12378:25:5",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1728,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12395:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1727,
												"id": 1729,
												"nodeType": "Return",
												"src": "12388:8:5"
											}
										]
									},
									"id": 1731,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_decimalsOffset",
									"nameLocation": "12322:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1724,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12337:2:5"
									},
									"returnParameters": {
										"id": 1727,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1726,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1731,
												"src": "12371:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1725,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "12371:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12370:7:5"
									},
									"scope": 1732,
									"src": "12313:90:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1733,
							"src": "3158:9247:5",
							"usedErrors": [
								329,
								334,
								339,
								348,
								353,
								358,
								1081,
								1090,
								1099,
								1108,
								1811,
								2092,
								2097,
								2100,
								2373
							],
							"usedEvents": [
								168,
								180,
								981,
								990
							]
						}
					],
					"src": "118:12288:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							1047
						],
						"IERC20Metadata": [
							1758
						]
					},
					"id": 1759,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1734,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 1736,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1759,
							"sourceUnit": 1048,
							"src": "151:37:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1735,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1047,
										"src": "159:6:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1738,
										"name": "IERC20",
										"nameLocations": [
											"305:6:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1047,
										"src": "305:6:6"
									},
									"id": 1739,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:6"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1737,
								"nodeType": "StructuredDocumentation",
								"src": "190:86:6",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard."
							},
							"fullyImplemented": false,
							"id": 1758,
							"linearizedBaseContracts": [
								1758,
								1047
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1740,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:6",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1745,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1741,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:6"
									},
									"returnParameters": {
										"id": 1744,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1743,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1745,
												"src": "416:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1742,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:6"
									},
									"scope": 1758,
									"src": "377:54:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1746,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:6",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 1751,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1747,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:6"
									},
									"returnParameters": {
										"id": 1750,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1749,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1751,
												"src": "539:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1748,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:6"
									},
									"scope": 1758,
									"src": "498:56:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1752,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:6",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 1757,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1753,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:6"
									},
									"returnParameters": {
										"id": 1756,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1755,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1757,
												"src": "673:5:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1754,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:6"
									},
									"scope": 1758,
									"src": "630:50:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1759,
							"src": "277:405:6",
							"usedErrors": [],
							"usedEvents": [
								981,
								990
							]
						}
					],
					"src": "125:558:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							1794
						]
					},
					"id": 1795,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1760,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "123:24:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1761,
								"nodeType": "StructuredDocumentation",
								"src": "149:1963:7",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 1794,
							"linearizedBaseContracts": [
								1794
							],
							"name": "IERC20Permit",
							"nameLocation": "2123:12:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1762,
										"nodeType": "StructuredDocumentation",
										"src": "2142:850:7",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 1779,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3006:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1777,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1764,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3030:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1779,
												"src": "3022:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1763,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3022:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1766,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3053:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1779,
												"src": "3045:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1765,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3045:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1768,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3078:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1779,
												"src": "3070:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1767,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3070:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1770,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3101:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1779,
												"src": "3093:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1769,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3093:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1772,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3125:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1779,
												"src": "3119:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1771,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3119:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1774,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3144:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1779,
												"src": "3136:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1773,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3136:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1776,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3163:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1779,
												"src": "3155:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1775,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3155:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3012:158:7"
									},
									"returnParameters": {
										"id": 1778,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3179:0:7"
									},
									"scope": 1794,
									"src": "2997:183:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1780,
										"nodeType": "StructuredDocumentation",
										"src": "3186:294:7",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 1787,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3494:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1783,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1782,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3509:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1787,
												"src": "3501:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1781,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3501:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3500:15:7"
									},
									"returnParameters": {
										"id": 1786,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1785,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1787,
												"src": "3539:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1784,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3539:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3538:9:7"
									},
									"scope": 1794,
									"src": "3485:63:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1788,
										"nodeType": "StructuredDocumentation",
										"src": "3554:128:7",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 1793,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3749:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1789,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3765:2:7"
									},
									"returnParameters": {
										"id": 1792,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1791,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1793,
												"src": "3791:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1790,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3791:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3790:9:7"
									},
									"scope": 1794,
									"src": "3740:60:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1795,
							"src": "2113:1689:7",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "123:3680:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							2337
						],
						"IERC20": [
							1047
						],
						"IERC20Permit": [
							1794
						],
						"SafeERC20": [
							2084
						]
					},
					"id": 2085,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1796,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:8"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 1798,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2085,
							"sourceUnit": 1048,
							"src": "141:37:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1797,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1047,
										"src": "149:6:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
							"file": "../extensions/IERC20Permit.sol",
							"id": 1800,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2085,
							"sourceUnit": 1795,
							"src": "179:60:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1799,
										"name": "IERC20Permit",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1794,
										"src": "187:12:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 1802,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2085,
							"sourceUnit": 2338,
							"src": "240:51:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1801,
										"name": "Address",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2337,
										"src": "248:7:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1803,
								"nodeType": "StructuredDocumentation",
								"src": "293:457:8",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 2084,
							"linearizedBaseContracts": [
								2084
							],
							"name": "SafeERC20",
							"nameLocation": "759:9:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1806,
									"libraryName": {
										"id": 1804,
										"name": "Address",
										"nameLocations": [
											"781:7:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2337,
										"src": "781:7:8"
									},
									"nodeType": "UsingForDirective",
									"src": "775:26:8",
									"typeName": {
										"id": 1805,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "793:7:8",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"documentation": {
										"id": 1807,
										"nodeType": "StructuredDocumentation",
										"src": "807:64:8",
										"text": " @dev An operation with an ERC20 token failed."
									},
									"errorSelector": "5274afe7",
									"id": 1811,
									"name": "SafeERC20FailedOperation",
									"nameLocation": "882:24:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1810,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1809,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "915:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1811,
												"src": "907:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1808,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "907:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "906:15:8"
									},
									"src": "876:46:8"
								},
								{
									"documentation": {
										"id": 1812,
										"nodeType": "StructuredDocumentation",
										"src": "928:71:8",
										"text": " @dev Indicates a failed `decreaseAllowance` request."
									},
									"errorSelector": "e570110f",
									"id": 1820,
									"name": "SafeERC20FailedDecreaseAllowance",
									"nameLocation": "1010:32:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1819,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1814,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1051:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1820,
												"src": "1043:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1813,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1043:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1816,
												"mutability": "mutable",
												"name": "currentAllowance",
												"nameLocation": "1068:16:8",
												"nodeType": "VariableDeclaration",
												"scope": 1820,
												"src": "1060:24:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1815,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1060:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1818,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "1094:17:8",
												"nodeType": "VariableDeclaration",
												"scope": 1820,
												"src": "1086:25:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1817,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1086:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1042:70:8"
									},
									"src": "1004:109:8"
								},
								{
									"body": {
										"id": 1843,
										"nodeType": "Block",
										"src": "1375:88:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1832,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1824,
															"src": "1405:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1047",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1835,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1824,
																		"src": "1427:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$1047",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1836,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1433:8:8",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1014,
																	"src": "1427:14:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 1837,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1826,
																			"src": "1444:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1838,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1828,
																			"src": "1448:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1839,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1443:11:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																],
																"expression": {
																	"id": 1833,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1412:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1834,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1416:10:8",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1412:14:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1840,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1412:43:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$1047",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1831,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2034,
														"src": "1385:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1047_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 1841,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1385:71:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1842,
												"nodeType": "ExpressionStatement",
												"src": "1385:71:8"
											}
										]
									},
									"documentation": {
										"id": 1821,
										"nodeType": "StructuredDocumentation",
										"src": "1119:179:8",
										"text": " @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 1844,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "1312:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1829,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1824,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1332:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1844,
												"src": "1325:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1047",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1823,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1822,
														"name": "IERC20",
														"nameLocations": [
															"1325:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1047,
														"src": "1325:6:8"
													},
													"referencedDeclaration": 1047,
													"src": "1325:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1047",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1826,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1347:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1844,
												"src": "1339:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1825,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1339:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1828,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1359:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1844,
												"src": "1351:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1827,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1351:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1324:41:8"
									},
									"returnParameters": {
										"id": 1830,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1375:0:8"
									},
									"scope": 2084,
									"src": "1303:160:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1870,
										"nodeType": "Block",
										"src": "1792:98:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1858,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1848,
															"src": "1822:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1047",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1861,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1848,
																		"src": "1844:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$1047",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1862,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1850:12:8",
																	"memberName": "transferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1046,
																	"src": "1844:18:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 1863,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1850,
																			"src": "1865:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1864,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1852,
																			"src": "1871:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1865,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1854,
																			"src": "1875:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1866,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1864:17:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																],
																"expression": {
																	"id": 1859,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1829:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1860,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1833:10:8",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1829:14:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1867,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1829:53:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$1047",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1857,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2034,
														"src": "1802:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1047_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 1868,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1802:81:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1869,
												"nodeType": "ExpressionStatement",
												"src": "1802:81:8"
											}
										]
									},
									"documentation": {
										"id": 1845,
										"nodeType": "StructuredDocumentation",
										"src": "1469:228:8",
										"text": " @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."
									},
									"id": 1871,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1711:16:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1855,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1848,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1735:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1871,
												"src": "1728:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1047",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1847,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1846,
														"name": "IERC20",
														"nameLocations": [
															"1728:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1047,
														"src": "1728:6:8"
													},
													"referencedDeclaration": 1047,
													"src": "1728:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1047",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1850,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1750:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1871,
												"src": "1742:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1849,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1742:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1852,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1764:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1871,
												"src": "1756:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1851,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1756:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1854,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1776:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1871,
												"src": "1768:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1853,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1768:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1727:55:8"
									},
									"returnParameters": {
										"id": 1856,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1792:0:8"
									},
									"scope": 2084,
									"src": "1702:188:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1901,
										"nodeType": "Block",
										"src": "2167:139:8",
										"statements": [
											{
												"assignments": [
													1883
												],
												"declarations": [
													{
														"constant": false,
														"id": 1883,
														"mutability": "mutable",
														"name": "oldAllowance",
														"nameLocation": "2185:12:8",
														"nodeType": "VariableDeclaration",
														"scope": 1901,
														"src": "2177:20:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1882,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2177:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1892,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1888,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2224:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SafeERC20_$2084",
																		"typeString": "library SafeERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SafeERC20_$2084",
																		"typeString": "library SafeERC20"
																	}
																],
																"id": 1887,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2216:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1886,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2216:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1889,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2216:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1890,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1877,
															"src": "2231:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1884,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1875,
															"src": "2200:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1047",
																"typeString": "contract IERC20"
															}
														},
														"id": 1885,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2206:9:8",
														"memberName": "allowance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1024,
														"src": "2200:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view external returns (uint256)"
														}
													},
													"id": 1891,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2200:39:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2177:62:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1894,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1875,
															"src": "2262:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1047",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 1895,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1877,
															"src": "2269:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1898,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1896,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1883,
																"src": "2278:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1897,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1879,
																"src": "2293:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2278:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$1047",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1893,
														"name": "forceApprove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1992,
														"src": "2249:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1047_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1899,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2249:50:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1900,
												"nodeType": "ExpressionStatement",
												"src": "2249:50:8"
											}
										]
									},
									"documentation": {
										"id": 1872,
										"nodeType": "StructuredDocumentation",
										"src": "1896:180:8",
										"text": " @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 1902,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2090:21:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1880,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1875,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2119:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1902,
												"src": "2112:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1047",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1874,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1873,
														"name": "IERC20",
														"nameLocations": [
															"2112:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1047,
														"src": "2112:6:8"
													},
													"referencedDeclaration": 1047,
													"src": "2112:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1047",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1877,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2134:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1902,
												"src": "2126:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1876,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2126:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1879,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2151:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1902,
												"src": "2143:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1878,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2143:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2111:46:8"
									},
									"returnParameters": {
										"id": 1881,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2167:0:8"
									},
									"scope": 2084,
									"src": "2081:225:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1944,
										"nodeType": "Block",
										"src": "2607:370:8",
										"statements": [
											{
												"id": 1943,
												"nodeType": "UncheckedBlock",
												"src": "2617:354:8",
												"statements": [
													{
														"assignments": [
															1914
														],
														"declarations": [
															{
																"constant": false,
																"id": 1914,
																"mutability": "mutable",
																"name": "currentAllowance",
																"nameLocation": "2649:16:8",
																"nodeType": "VariableDeclaration",
																"scope": 1943,
																"src": "2641:24:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1913,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2641:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1923,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1919,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2692:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$2084",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$2084",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 1918,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2684:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1917,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2684:7:8",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1920,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2684:13:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1921,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1908,
																	"src": "2699:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1915,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1906,
																	"src": "2668:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$1047",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 1916,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2674:9:8",
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1024,
																"src": "2668:15:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 1922,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2668:39:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2641:66:8"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1926,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1924,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1914,
																"src": "2725:16:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 1925,
																"name": "requestedDecrease",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1910,
																"src": "2744:17:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2725:36:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1934,
														"nodeType": "IfStatement",
														"src": "2721:160:8",
														"trueBody": {
															"id": 1933,
															"nodeType": "Block",
															"src": "2763:118:8",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"id": 1928,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1908,
																				"src": "2821:7:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1929,
																				"name": "currentAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1914,
																				"src": "2830:16:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 1930,
																				"name": "requestedDecrease",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1910,
																				"src": "2848:17:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1927,
																			"name": "SafeERC20FailedDecreaseAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1820,
																			"src": "2788:32:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																				"typeString": "function (address,uint256,uint256) pure"
																			}
																		},
																		"id": 1931,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2788:78:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1932,
																	"nodeType": "RevertStatement",
																	"src": "2781:85:8"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 1936,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1906,
																	"src": "2907:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$1047",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"id": 1937,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1908,
																	"src": "2914:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1940,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1938,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1914,
																		"src": "2923:16:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1939,
																		"name": "requestedDecrease",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1910,
																		"src": "2942:17:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2923:36:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$1047",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1935,
																"name": "forceApprove",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1992,
																"src": "2894:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1047_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (contract IERC20,address,uint256)"
																}
															},
															"id": 1941,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2894:66:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1942,
														"nodeType": "ExpressionStatement",
														"src": "2894:66:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1903,
										"nodeType": "StructuredDocumentation",
										"src": "2312:192:8",
										"text": " @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n value, non-reverting calls are assumed to be successful."
									},
									"id": 1945,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2518:21:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1911,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1906,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2547:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1945,
												"src": "2540:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1047",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1905,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1904,
														"name": "IERC20",
														"nameLocations": [
															"2540:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1047,
														"src": "2540:6:8"
													},
													"referencedDeclaration": 1047,
													"src": "2540:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1047",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1908,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2562:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1945,
												"src": "2554:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1907,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2554:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1910,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "2579:17:8",
												"nodeType": "VariableDeclaration",
												"scope": 1945,
												"src": "2571:25:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1909,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2571:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2539:58:8"
									},
									"returnParameters": {
										"id": 1912,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2607:0:8"
									},
									"scope": 2084,
									"src": "2509:468:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1991,
										"nodeType": "Block",
										"src": "3373:303:8",
										"statements": [
											{
												"assignments": [
													1957
												],
												"declarations": [
													{
														"constant": false,
														"id": 1957,
														"mutability": "mutable",
														"name": "approvalCall",
														"nameLocation": "3396:12:8",
														"nodeType": "VariableDeclaration",
														"scope": 1991,
														"src": "3383:25:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1956,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3383:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1966,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 1960,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1949,
																"src": "3426:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$1047",
																	"typeString": "contract IERC20"
																}
															},
															"id": 1961,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3432:7:8",
															"memberName": "approve",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1034,
															"src": "3426:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															}
														},
														{
															"components": [
																{
																	"id": 1962,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1951,
																	"src": "3442:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1963,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1953,
																	"src": "3451:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1964,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "3441:16:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															},
															{
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														],
														"expression": {
															"id": 1958,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "3411:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 1959,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "3415:10:8",
														"memberName": "encodeCall",
														"nodeType": "MemberAccess",
														"src": "3411:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 1965,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3411:47:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3383:75:8"
											},
											{
												"condition": {
													"id": 1971,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3473:45:8",
													"subExpression": {
														"arguments": [
															{
																"id": 1968,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1949,
																"src": "3498:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$1047",
																	"typeString": "contract IERC20"
																}
															},
															{
																"id": 1969,
																"name": "approvalCall",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1957,
																"src": "3505:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IERC20_$1047",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 1967,
															"name": "_callOptionalReturnBool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2083,
															"src": "3474:23:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1047_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																"typeString": "function (contract IERC20,bytes memory) returns (bool)"
															}
														},
														"id": 1970,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3474:44:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1990,
												"nodeType": "IfStatement",
												"src": "3469:201:8",
												"trueBody": {
													"id": 1989,
													"nodeType": "Block",
													"src": "3520:150:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1973,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1949,
																		"src": "3554:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$1047",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1976,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1949,
																					"src": "3576:5:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$1047",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 1977,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "3582:7:8",
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1034,
																				"src": "3576:13:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 1978,
																						"name": "spender",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1951,
																						"src": "3592:7:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"hexValue": "30",
																						"id": 1979,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3601:1:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					}
																				],
																				"id": 1980,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3591:12:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				},
																				{
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			],
																			"expression": {
																				"id": 1974,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "3561:3:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 1975,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "3565:10:8",
																			"memberName": "encodeCall",
																			"nodeType": "MemberAccess",
																			"src": "3561:14:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 1981,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3561:43:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$1047",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 1972,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2034,
																	"src": "3534:19:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1047_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 1982,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3534:71:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1983,
															"nodeType": "ExpressionStatement",
															"src": "3534:71:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1985,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1949,
																		"src": "3639:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$1047",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 1986,
																		"name": "approvalCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1957,
																		"src": "3646:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$1047",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 1984,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2034,
																	"src": "3619:19:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1047_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 1987,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3619:40:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1988,
															"nodeType": "ExpressionStatement",
															"src": "3619:40:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1946,
										"nodeType": "StructuredDocumentation",
										"src": "2983:308:8",
										"text": " @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."
									},
									"id": 1992,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceApprove",
									"nameLocation": "3305:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1954,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1949,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3325:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1992,
												"src": "3318:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1047",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1948,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1947,
														"name": "IERC20",
														"nameLocations": [
															"3318:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1047,
														"src": "3318:6:8"
													},
													"referencedDeclaration": 1047,
													"src": "3318:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1047",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1951,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3340:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1992,
												"src": "3332:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1950,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3332:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1953,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3357:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1992,
												"src": "3349:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1952,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3349:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3317:46:8"
									},
									"returnParameters": {
										"id": 1955,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3373:0:8"
									},
									"scope": 2084,
									"src": "3296:380:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2033,
										"nodeType": "Block",
										"src": "4129:559:8",
										"statements": [
											{
												"assignments": [
													2002
												],
												"declarations": [
													{
														"constant": false,
														"id": 2002,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4491:10:8",
														"nodeType": "VariableDeclaration",
														"scope": 2033,
														"src": "4478:23:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2001,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4478:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2010,
												"initialValue": {
													"arguments": [
														{
															"id": 2008,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1998,
															"src": "4532:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2005,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1996,
																	"src": "4512:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$1047",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$1047",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 2004,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4504:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2003,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4504:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 2006,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4504:14:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2007,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4519:12:8",
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2158,
														"src": "4504:27:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$",
															"typeString": "function (address,bytes memory) returns (bytes memory)"
														}
													},
													"id": 2009,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4504:33:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4478:59:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2023,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2014,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 2011,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2002,
																"src": "4551:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 2012,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4562:6:8",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "4551:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 2013,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4572:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4551:22:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 2022,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4577:31:8",
														"subExpression": {
															"arguments": [
																{
																	"id": 2017,
																	"name": "returndata",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2002,
																	"src": "4589:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"components": [
																		{
																			"id": 2019,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4602:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bool_$",
																				"typeString": "type(bool)"
																			},
																			"typeName": {
																				"id": 2018,
																				"name": "bool",
																				"nodeType": "ElementaryTypeName",
																				"src": "4602:4:8",
																				"typeDescriptions": {}
																			}
																		}
																	],
																	"id": 2020,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4601:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bool_$",
																		"typeString": "type(bool)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_type$_t_bool_$",
																		"typeString": "type(bool)"
																	}
																],
																"expression": {
																	"id": 2015,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4578:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2016,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4582:6:8",
																"memberName": "decode",
																"nodeType": "MemberAccess",
																"src": "4578:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 2021,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4578:30:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4551:57:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2032,
												"nodeType": "IfStatement",
												"src": "4547:135:8",
												"trueBody": {
													"id": 2031,
													"nodeType": "Block",
													"src": "4610:72:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 2027,
																				"name": "token",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1996,
																				"src": "4664:5:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC20_$1047",
																					"typeString": "contract IERC20"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_IERC20_$1047",
																					"typeString": "contract IERC20"
																				}
																			],
																			"id": 2026,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4656:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2025,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "4656:7:8",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2028,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4656:14:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 2024,
																	"name": "SafeERC20FailedOperation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1811,
																	"src": "4631:24:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 2029,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4631:40:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2030,
															"nodeType": "RevertStatement",
															"src": "4624:47:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1993,
										"nodeType": "StructuredDocumentation",
										"src": "3682:372:8",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 2034,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "4068:19:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1999,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1996,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4095:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 2034,
												"src": "4088:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1047",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1995,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1994,
														"name": "IERC20",
														"nameLocations": [
															"4088:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1047,
														"src": "4088:6:8"
													},
													"referencedDeclaration": 1047,
													"src": "4088:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1047",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1998,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4115:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 2034,
												"src": "4102:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1997,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4102:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4087:33:8"
									},
									"returnParameters": {
										"id": 2000,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4129:0:8"
									},
									"scope": 2084,
									"src": "4059:629:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2082,
										"nodeType": "Block",
										"src": "5278:489:8",
										"statements": [
											{
												"assignments": [
													2046,
													2048
												],
												"declarations": [
													{
														"constant": false,
														"id": 2046,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5579:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 2082,
														"src": "5574:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2045,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5574:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2048,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5601:10:8",
														"nodeType": "VariableDeclaration",
														"scope": 2082,
														"src": "5588:23:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2047,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5588:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2056,
												"initialValue": {
													"arguments": [
														{
															"id": 2054,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2040,
															"src": "5635:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2051,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2038,
																	"src": "5623:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$1047",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$1047",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 2050,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5615:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2049,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5615:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 2052,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5615:14:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2053,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5630:4:8",
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "5615:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2055,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5615:25:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5573:67:8"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2080,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 2071,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2057,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2046,
															"src": "5657:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 2069,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2061,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 2058,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2048,
																				"src": "5669:10:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 2059,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "5680:6:8",
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "5669:17:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2060,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5690:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "5669:22:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "||",
																	"rightExpression": {
																		"arguments": [
																			{
																				"id": 2064,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2048,
																				"src": "5706:10:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 2066,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "5719:4:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 2065,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "5719:4:8",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 2067,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "5718:6:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 2062,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "5695:3:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 2063,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "5699:6:8",
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "5695:10:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 2068,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5695:30:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "5669:56:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"id": 2070,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "5668:58:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "5657:69:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2079,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 2074,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2038,
																			"src": "5738:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$1047",
																				"typeString": "contract IERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IERC20_$1047",
																				"typeString": "contract IERC20"
																			}
																		],
																		"id": 2073,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5730:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2072,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5730:7:8",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2075,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5730:14:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 2076,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5745:4:8",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "5730:19:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 2077,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5750:6:8",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "5730:26:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2078,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5759:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "5730:30:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "5657:103:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2044,
												"id": 2081,
												"nodeType": "Return",
												"src": "5650:110:8"
											}
										]
									},
									"documentation": {
										"id": 2035,
										"nodeType": "StructuredDocumentation",
										"src": "4694:490:8",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."
									},
									"id": 2083,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturnBool",
									"nameLocation": "5198:23:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2041,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2038,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5229:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 2083,
												"src": "5222:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1047",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2037,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2036,
														"name": "IERC20",
														"nameLocations": [
															"5222:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1047,
														"src": "5222:6:8"
													},
													"referencedDeclaration": 1047,
													"src": "5222:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1047",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2040,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5249:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 2083,
												"src": "5236:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2039,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5236:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5221:33:8"
									},
									"returnParameters": {
										"id": 2044,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2043,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2083,
												"src": "5272:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2042,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5272:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5271:6:8"
									},
									"scope": 2084,
									"src": "5189:578:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2085,
							"src": "751:5018:8",
							"usedErrors": [
								1811,
								1820
							],
							"usedEvents": []
						}
					],
					"src": "115:5655:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							2337
						]
					},
					"id": 2338,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2086,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2087,
								"nodeType": "StructuredDocumentation",
								"src": "127:67:9",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 2337,
							"linearizedBaseContracts": [
								2337
							],
							"name": "Address",
							"nameLocation": "203:7:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2088,
										"nodeType": "StructuredDocumentation",
										"src": "217:94:9",
										"text": " @dev The ETH balance of the account is not enough to perform the operation."
									},
									"errorSelector": "cd786059",
									"id": 2092,
									"name": "AddressInsufficientBalance",
									"nameLocation": "322:26:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2091,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2090,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "357:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2092,
												"src": "349:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2089,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "349:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "348:17:9"
									},
									"src": "316:50:9"
								},
								{
									"documentation": {
										"id": 2093,
										"nodeType": "StructuredDocumentation",
										"src": "372:75:9",
										"text": " @dev There's no code at `target` (it is not a contract)."
									},
									"errorSelector": "9996b315",
									"id": 2097,
									"name": "AddressEmptyCode",
									"nameLocation": "458:16:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2096,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2095,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "483:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2097,
												"src": "475:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2094,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "475:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "474:16:9"
									},
									"src": "452:39:9"
								},
								{
									"documentation": {
										"id": 2098,
										"nodeType": "StructuredDocumentation",
										"src": "497:89:9",
										"text": " @dev A call to an address target failed. The target may have reverted."
									},
									"errorSelector": "1425ea42",
									"id": 2100,
									"name": "FailedInnerCall",
									"nameLocation": "597:15:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2099,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "612:2:9"
									},
									"src": "591:24:9"
								},
								{
									"body": {
										"id": 2140,
										"nodeType": "Block",
										"src": "1602:260:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2114,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 2110,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1624:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Address_$2337",
																		"typeString": "library Address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Address_$2337",
																		"typeString": "library Address"
																	}
																],
																"id": 2109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1616:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2108,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1616:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 2111,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1616:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2112,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1630:7:9",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "1616:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 2113,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2105,
														"src": "1640:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1616:30:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2123,
												"nodeType": "IfStatement",
												"src": "1612:109:9",
												"trueBody": {
													"id": 2122,
													"nodeType": "Block",
													"src": "1648:73:9",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 2118,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "1704:4:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_Address_$2337",
																					"typeString": "library Address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_Address_$2337",
																					"typeString": "library Address"
																				}
																			],
																			"id": 2117,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1696:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2116,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1696:7:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2119,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1696:13:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 2115,
																	"name": "AddressInsufficientBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2092,
																	"src": "1669:26:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 2120,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1669:41:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2121,
															"nodeType": "RevertStatement",
															"src": "1662:48:9"
														}
													]
												}
											},
											{
												"assignments": [
													2125,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 2125,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "1737:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 2140,
														"src": "1732:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2124,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1732:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 2132,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 2130,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1780:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 2126,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2103,
																"src": "1750:9:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 2127,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1760:4:9",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "1750:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2129,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 2128,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2105,
																"src": "1772:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "1750:29:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1750:33:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1731:52:9"
											},
											{
												"condition": {
													"id": 2134,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1797:8:9",
													"subExpression": {
														"id": 2133,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2125,
														"src": "1798:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2139,
												"nodeType": "IfStatement",
												"src": "1793:63:9",
												"trueBody": {
													"id": 2138,
													"nodeType": "Block",
													"src": "1807:49:9",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2135,
																	"name": "FailedInnerCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2100,
																	"src": "1828:15:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2136,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1828:17:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2137,
															"nodeType": "RevertStatement",
															"src": "1821:24:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2101,
										"nodeType": "StructuredDocumentation",
										"src": "621:905:9",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 2141,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "1540:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2106,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2103,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1566:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 2141,
												"src": "1550:25:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 2102,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1550:15:9",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2105,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1585:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2141,
												"src": "1577:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2104,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1577:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1549:43:9"
									},
									"returnParameters": {
										"id": 2107,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1602:0:9"
									},
									"scope": 2337,
									"src": "1531:331:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2157,
										"nodeType": "Block",
										"src": "2794:62:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2152,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2144,
															"src": "2833:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2153,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2146,
															"src": "2841:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 2154,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2847:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 2151,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2204,
														"src": "2811:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256) returns (bytes memory)"
														}
													},
													"id": 2155,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2811:38:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2150,
												"id": 2156,
												"nodeType": "Return",
												"src": "2804:45:9"
											}
										]
									},
									"documentation": {
										"id": 2142,
										"nodeType": "StructuredDocumentation",
										"src": "1868:832:9",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason or custom error, it is bubbled\n up by this function (like regular Solidity function calls). However, if\n the call reverted with no returned reason, this function reverts with a\n {FailedInnerCall} error.\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert."
									},
									"id": 2158,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "2714:12:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2144,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "2735:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2158,
												"src": "2727:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2143,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2727:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2146,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2756:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2158,
												"src": "2743:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2145,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2743:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2726:35:9"
									},
									"returnParameters": {
										"id": 2150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2149,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2158,
												"src": "2780:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2148,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2780:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2779:14:9"
									},
									"scope": 2337,
									"src": "2705:151:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2203,
										"nodeType": "Block",
										"src": "3293:279:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 2172,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3315:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Address_$2337",
																		"typeString": "library Address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Address_$2337",
																		"typeString": "library Address"
																	}
																],
																"id": 2171,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3307:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2170,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3307:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 2173,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3307:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2174,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3321:7:9",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "3307:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 2175,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2165,
														"src": "3331:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3307:29:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2185,
												"nodeType": "IfStatement",
												"src": "3303:108:9",
												"trueBody": {
													"id": 2184,
													"nodeType": "Block",
													"src": "3338:73:9",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 2180,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "3394:4:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_Address_$2337",
																					"typeString": "library Address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_Address_$2337",
																					"typeString": "library Address"
																				}
																			],
																			"id": 2179,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3386:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2178,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3386:7:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2181,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3386:13:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 2177,
																	"name": "AddressInsufficientBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2092,
																	"src": "3359:26:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 2182,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3359:41:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2183,
															"nodeType": "RevertStatement",
															"src": "3352:48:9"
														}
													]
												}
											},
											{
												"assignments": [
													2187,
													2189
												],
												"declarations": [
													{
														"constant": false,
														"id": 2187,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3426:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 2203,
														"src": "3421:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2186,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3421:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2189,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3448:10:9",
														"nodeType": "VariableDeclaration",
														"scope": 2203,
														"src": "3435:23:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2188,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3435:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2196,
												"initialValue": {
													"arguments": [
														{
															"id": 2194,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2163,
															"src": "3488:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 2190,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2161,
																"src": "3462:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 2191,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3469:4:9",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "3462:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2193,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 2192,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2165,
																"src": "3481:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "3462:25:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2195,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3462:31:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3420:73:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2198,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2161,
															"src": "3537:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2199,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2187,
															"src": "3545:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2200,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2189,
															"src": "3554:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2197,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2296,
														"src": "3510:26:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 2201,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3510:55:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2169,
												"id": 2202,
												"nodeType": "Return",
												"src": "3503:62:9"
											}
										]
									},
									"documentation": {
										"id": 2159,
										"nodeType": "StructuredDocumentation",
										"src": "2862:313:9",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`."
									},
									"id": 2204,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "3189:21:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2161,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3219:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2204,
												"src": "3211:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3211:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2163,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3240:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2204,
												"src": "3227:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2162,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3227:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2165,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3254:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2204,
												"src": "3246:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2164,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3246:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3210:50:9"
									},
									"returnParameters": {
										"id": 2169,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2168,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2204,
												"src": "3279:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2167,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3279:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3278:14:9"
									},
									"scope": 2337,
									"src": "3180:392:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2229,
										"nodeType": "Block",
										"src": "3811:154:9",
										"statements": [
											{
												"assignments": [
													2215,
													2217
												],
												"declarations": [
													{
														"constant": false,
														"id": 2215,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3827:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 2229,
														"src": "3822:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2214,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3822:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2217,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3849:10:9",
														"nodeType": "VariableDeclaration",
														"scope": 2229,
														"src": "3836:23:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2216,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3836:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2222,
												"initialValue": {
													"arguments": [
														{
															"id": 2220,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2209,
															"src": "3881:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2218,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2207,
															"src": "3863:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2219,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3870:10:9",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "3863:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 2221,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3863:23:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3821:65:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2224,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2207,
															"src": "3930:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2225,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2215,
															"src": "3938:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2226,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2217,
															"src": "3947:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2223,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2296,
														"src": "3903:26:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 2227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3903:55:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2213,
												"id": 2228,
												"nodeType": "Return",
												"src": "3896:62:9"
											}
										]
									},
									"documentation": {
										"id": 2205,
										"nodeType": "StructuredDocumentation",
										"src": "3578:128:9",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call."
									},
									"id": 2230,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "3720:18:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2210,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2207,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3747:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2230,
												"src": "3739:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2206,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3739:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2209,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3768:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2230,
												"src": "3755:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2208,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3755:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3738:35:9"
									},
									"returnParameters": {
										"id": 2213,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2212,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2230,
												"src": "3797:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2211,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3797:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3796:14:9"
									},
									"scope": 2337,
									"src": "3711:254:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2255,
										"nodeType": "Block",
										"src": "4203:156:9",
										"statements": [
											{
												"assignments": [
													2241,
													2243
												],
												"declarations": [
													{
														"constant": false,
														"id": 2241,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "4219:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 2255,
														"src": "4214:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2240,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4214:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2243,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4241:10:9",
														"nodeType": "VariableDeclaration",
														"scope": 2255,
														"src": "4228:23:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2242,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4228:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2248,
												"initialValue": {
													"arguments": [
														{
															"id": 2246,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2235,
															"src": "4275:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2244,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2233,
															"src": "4255:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2245,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4262:12:9",
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "4255:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 2247,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4255:25:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4213:67:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2250,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2233,
															"src": "4324:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2251,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2241,
															"src": "4332:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2252,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2243,
															"src": "4341:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2249,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2296,
														"src": "4297:26:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 2253,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4297:55:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2239,
												"id": 2254,
												"nodeType": "Return",
												"src": "4290:62:9"
											}
										]
									},
									"documentation": {
										"id": 2231,
										"nodeType": "StructuredDocumentation",
										"src": "3971:130:9",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call."
									},
									"id": 2256,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "4115:20:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2233,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4144:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2256,
												"src": "4136:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2232,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4136:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2235,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4165:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2256,
												"src": "4152:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2234,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4152:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4135:35:9"
									},
									"returnParameters": {
										"id": 2239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2238,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2256,
												"src": "4189:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2237,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4189:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4188:14:9"
									},
									"scope": 2337,
									"src": "4106:253:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2295,
										"nodeType": "Block",
										"src": "4783:424:9",
										"statements": [
											{
												"condition": {
													"id": 2269,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4797:8:9",
													"subExpression": {
														"id": 2268,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2261,
														"src": "4798:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2293,
													"nodeType": "Block",
													"src": "4857:344:9",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 2284,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2278,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 2275,
																			"name": "returndata",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2263,
																			"src": "5045:10:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 2276,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5056:6:9",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "5045:17:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 2277,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5066:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5045:22:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2283,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"expression": {
																				"id": 2279,
																				"name": "target",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2259,
																				"src": "5071:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"id": 2280,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "5078:4:9",
																			"memberName": "code",
																			"nodeType": "MemberAccess",
																			"src": "5071:11:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 2281,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5083:6:9",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "5071:18:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 2282,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5093:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5071:23:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "5045:49:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2290,
															"nodeType": "IfStatement",
															"src": "5041:119:9",
															"trueBody": {
																"id": 2289,
																"nodeType": "Block",
																"src": "5096:64:9",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 2286,
																					"name": "target",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2259,
																					"src": "5138:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 2285,
																				"name": "AddressEmptyCode",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2097,
																				"src": "5121:16:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																					"typeString": "function (address) pure"
																				}
																			},
																			"id": 2287,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5121:24:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 2288,
																		"nodeType": "RevertStatement",
																		"src": "5114:31:9"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 2291,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2263,
																"src": "5180:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 2267,
															"id": 2292,
															"nodeType": "Return",
															"src": "5173:17:9"
														}
													]
												},
												"id": 2294,
												"nodeType": "IfStatement",
												"src": "4793:408:9",
												"trueBody": {
													"id": 2274,
													"nodeType": "Block",
													"src": "4807:44:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2271,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2263,
																		"src": "4829:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 2270,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2336,
																	"src": "4821:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory) pure"
																	}
																},
																"id": 2272,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4821:19:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2273,
															"nodeType": "ExpressionStatement",
															"src": "4821:19:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2257,
										"nodeType": "StructuredDocumentation",
										"src": "4365:255:9",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n unsuccessful call."
									},
									"id": 2296,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "4634:26:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2259,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4678:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2296,
												"src": "4670:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2258,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4670:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2261,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "4699:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2296,
												"src": "4694:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2260,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4694:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2263,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "4729:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 2296,
												"src": "4716:23:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2262,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4716:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4660:85:9"
									},
									"returnParameters": {
										"id": 2267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2266,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2296,
												"src": "4769:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2265,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4769:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4768:14:9"
									},
									"scope": 2337,
									"src": "4625:582:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2317,
										"nodeType": "Block",
										"src": "5509:122:9",
										"statements": [
											{
												"condition": {
													"id": 2307,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "5523:8:9",
													"subExpression": {
														"id": 2306,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2299,
														"src": "5524:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2315,
													"nodeType": "Block",
													"src": "5583:42:9",
													"statements": [
														{
															"expression": {
																"id": 2313,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2301,
																"src": "5604:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 2305,
															"id": 2314,
															"nodeType": "Return",
															"src": "5597:17:9"
														}
													]
												},
												"id": 2316,
												"nodeType": "IfStatement",
												"src": "5519:106:9",
												"trueBody": {
													"id": 2312,
													"nodeType": "Block",
													"src": "5533:44:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2309,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2301,
																		"src": "5555:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 2308,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2336,
																	"src": "5547:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory) pure"
																	}
																},
																"id": 2310,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5547:19:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2311,
															"nodeType": "ExpressionStatement",
															"src": "5547:19:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2297,
										"nodeType": "StructuredDocumentation",
										"src": "5213:189:9",
										"text": " @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n revert reason or with a default {FailedInnerCall} error."
									},
									"id": 2318,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "5416:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2302,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2299,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "5438:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2318,
												"src": "5433:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2298,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5433:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2301,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "5460:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 2318,
												"src": "5447:23:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2300,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5447:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5432:39:9"
									},
									"returnParameters": {
										"id": 2305,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2304,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2318,
												"src": "5495:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2303,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5495:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5494:14:9"
									},
									"scope": 2337,
									"src": "5407:224:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2335,
										"nodeType": "Block",
										"src": "5798:461:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2327,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2324,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2321,
															"src": "5874:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2325,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5885:6:9",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5874:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2326,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5894:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5874:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2333,
													"nodeType": "Block",
													"src": "6204:49:9",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2330,
																	"name": "FailedInnerCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2100,
																	"src": "6225:15:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2331,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6225:17:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2332,
															"nodeType": "RevertStatement",
															"src": "6218:24:9"
														}
													]
												},
												"id": 2334,
												"nodeType": "IfStatement",
												"src": "5870:383:9",
												"trueBody": {
													"id": 2329,
													"nodeType": "Block",
													"src": "5897:301:9",
													"statements": [
														{
															"AST": {
																"nativeSrc": "6055:133:9",
																"nodeType": "YulBlock",
																"src": "6055:133:9",
																"statements": [
																	{
																		"nativeSrc": "6073:40:9",
																		"nodeType": "YulVariableDeclaration",
																		"src": "6073:40:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nativeSrc": "6102:10:9",
																					"nodeType": "YulIdentifier",
																					"src": "6102:10:9"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "6096:5:9",
																				"nodeType": "YulIdentifier",
																				"src": "6096:5:9"
																			},
																			"nativeSrc": "6096:17:9",
																			"nodeType": "YulFunctionCall",
																			"src": "6096:17:9"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nativeSrc": "6077:15:9",
																				"nodeType": "YulTypedName",
																				"src": "6077:15:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "6141:2:9",
																							"nodeType": "YulLiteral",
																							"src": "6141:2:9",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nativeSrc": "6145:10:9",
																							"nodeType": "YulIdentifier",
																							"src": "6145:10:9"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "6137:3:9",
																						"nodeType": "YulIdentifier",
																						"src": "6137:3:9"
																					},
																					"nativeSrc": "6137:19:9",
																					"nodeType": "YulFunctionCall",
																					"src": "6137:19:9"
																				},
																				{
																					"name": "returndata_size",
																					"nativeSrc": "6158:15:9",
																					"nodeType": "YulIdentifier",
																					"src": "6158:15:9"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "6130:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "6130:6:9"
																			},
																			"nativeSrc": "6130:44:9",
																			"nodeType": "YulFunctionCall",
																			"src": "6130:44:9"
																		},
																		"nativeSrc": "6130:44:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "6130:44:9"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "cancun",
															"externalReferences": [
																{
																	"declaration": 2321,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "6102:10:9",
																	"valueSize": 1
																},
																{
																	"declaration": 2321,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "6145:10:9",
																	"valueSize": 1
																}
															],
															"id": 2328,
															"nodeType": "InlineAssembly",
															"src": "6046:142:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2319,
										"nodeType": "StructuredDocumentation",
										"src": "5637:101:9",
										"text": " @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}."
									},
									"id": 2336,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "5752:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2322,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2321,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "5773:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 2336,
												"src": "5760:23:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2320,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5760:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5759:25:9"
									},
									"returnParameters": {
										"id": 2323,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5798:0:9"
									},
									"scope": 2337,
									"src": "5743:516:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2338,
							"src": "195:6066:9",
							"usedErrors": [
								2092,
								2097,
								2100
							],
							"usedEvents": []
						}
					],
					"src": "101:6161:9"
				},
				"id": 9
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							2367
						]
					},
					"id": 2368,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2339,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:10"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2340,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:10",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 2367,
							"linearizedBaseContracts": [
								2367
							],
							"name": "Context",
							"nameLocation": "642:7:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2348,
										"nodeType": "Block",
										"src": "718:34:10",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 2345,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:10",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 2346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:10",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2344,
												"id": 2347,
												"nodeType": "Return",
												"src": "728:17:10"
											}
										]
									},
									"id": 2349,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2341,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:10"
									},
									"returnParameters": {
										"id": 2344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2343,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2349,
												"src": "709:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2342,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:10"
									},
									"scope": 2367,
									"src": "656:96:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2357,
										"nodeType": "Block",
										"src": "825:32:10",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 2354,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:10",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 2355,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:10",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 2353,
												"id": 2356,
												"nodeType": "Return",
												"src": "835:15:10"
											}
										]
									},
									"id": 2358,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2350,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:10"
									},
									"returnParameters": {
										"id": 2353,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2352,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2358,
												"src": "809:14:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2351,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:10"
									},
									"scope": 2367,
									"src": "758:99:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2365,
										"nodeType": "Block",
										"src": "935:25:10",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 2363,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 2362,
												"id": 2364,
												"nodeType": "Return",
												"src": "945:8:10"
											}
										]
									},
									"id": 2366,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2359,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:10"
									},
									"returnParameters": {
										"id": 2362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2361,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2366,
												"src": "926:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2360,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:10"
									},
									"scope": 2367,
									"src": "863:97:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 2368,
							"src": "624:338:10",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:10"
				},
				"id": 10
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							3421
						]
					},
					"id": 3422,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2369,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "103:24:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Math",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2370,
								"nodeType": "StructuredDocumentation",
								"src": "129:73:11",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3421,
							"linearizedBaseContracts": [
								3421
							],
							"name": "Math",
							"nameLocation": "211:4:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2371,
										"nodeType": "StructuredDocumentation",
										"src": "222:50:11",
										"text": " @dev Muldiv operation overflow."
									},
									"errorSelector": "227bc153",
									"id": 2373,
									"name": "MathOverflowedMulDiv",
									"nameLocation": "283:20:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2372,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "303:2:11"
									},
									"src": "277:29:11"
								},
								{
									"canonicalName": "Math.Rounding",
									"id": 2378,
									"members": [
										{
											"id": 2374,
											"name": "Floor",
											"nameLocation": "336:5:11",
											"nodeType": "EnumValue",
											"src": "336:5:11"
										},
										{
											"id": 2375,
											"name": "Ceil",
											"nameLocation": "379:4:11",
											"nodeType": "EnumValue",
											"src": "379:4:11"
										},
										{
											"id": 2376,
											"name": "Trunc",
											"nameLocation": "421:5:11",
											"nodeType": "EnumValue",
											"src": "421:5:11"
										},
										{
											"id": 2377,
											"name": "Expand",
											"nameLocation": "451:6:11",
											"nodeType": "EnumValue",
											"src": "451:6:11"
										}
									],
									"name": "Rounding",
									"nameLocation": "317:8:11",
									"nodeType": "EnumDefinition",
									"src": "312:169:11"
								},
								{
									"body": {
										"id": 2409,
										"nodeType": "Block",
										"src": "661:140:11",
										"statements": [
											{
												"id": 2408,
												"nodeType": "UncheckedBlock",
												"src": "671:124:11",
												"statements": [
													{
														"assignments": [
															2391
														],
														"declarations": [
															{
																"constant": false,
																"id": 2391,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "703:1:11",
																"nodeType": "VariableDeclaration",
																"scope": 2408,
																"src": "695:9:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2390,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "695:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2395,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2394,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2392,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2381,
																"src": "707:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 2393,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2383,
																"src": "711:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "707:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "695:17:11"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2398,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2396,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2391,
																"src": "730:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 2397,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2381,
																"src": "734:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "730:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2403,
														"nodeType": "IfStatement",
														"src": "726:28:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2399,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "745:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2400,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "752:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2401,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "744:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2389,
															"id": 2402,
															"nodeType": "Return",
															"src": "737:17:11"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2404,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "776:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2405,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2391,
																	"src": "782:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2406,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "775:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2389,
														"id": 2407,
														"nodeType": "Return",
														"src": "768:16:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2379,
										"nodeType": "StructuredDocumentation",
										"src": "487:93:11",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag."
									},
									"id": 2410,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "594:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2384,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2381,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "609:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2410,
												"src": "601:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2380,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2383,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "620:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2410,
												"src": "612:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2382,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:22:11"
									},
									"returnParameters": {
										"id": 2389,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2386,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2410,
												"src": "646:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2385,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "646:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2388,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2410,
												"src": "652:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2387,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:15:11"
									},
									"scope": 3421,
									"src": "585:216:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2437,
										"nodeType": "Block",
										"src": "984:113:11",
										"statements": [
											{
												"id": 2436,
												"nodeType": "UncheckedBlock",
												"src": "994:97:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2424,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2422,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2415,
																"src": "1022:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 2423,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2413,
																"src": "1026:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1022:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2429,
														"nodeType": "IfStatement",
														"src": "1018:28:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2425,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1037:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2426,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1044:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2427,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1036:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2421,
															"id": 2428,
															"nodeType": "Return",
															"src": "1029:17:11"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2430,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1068:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2433,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2431,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2413,
																		"src": "1074:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 2432,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2415,
																		"src": "1078:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1074:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2434,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1067:13:11",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2421,
														"id": 2435,
														"nodeType": "Return",
														"src": "1060:20:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2411,
										"nodeType": "StructuredDocumentation",
										"src": "807:96:11",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag."
									},
									"id": 2438,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "917:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2413,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "932:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2438,
												"src": "924:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2412,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "924:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2415,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "943:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2438,
												"src": "935:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2414,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "935:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "923:22:11"
									},
									"returnParameters": {
										"id": 2421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2418,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2438,
												"src": "969:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2417,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "969:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2420,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2438,
												"src": "975:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2419,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "975:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "968:15:11"
									},
									"scope": 3421,
									"src": "908:189:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2479,
										"nodeType": "Block",
										"src": "1283:417:11",
										"statements": [
											{
												"id": 2478,
												"nodeType": "UncheckedBlock",
												"src": "1293:401:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2452,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2450,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2441,
																"src": "1551:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2451,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1556:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1551:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2457,
														"nodeType": "IfStatement",
														"src": "1547:28:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 2453,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1567:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 2454,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1573:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2455,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1566:9:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2449,
															"id": 2456,
															"nodeType": "Return",
															"src": "1559:16:11"
														}
													},
													{
														"assignments": [
															2459
														],
														"declarations": [
															{
																"constant": false,
																"id": 2459,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1597:1:11",
																"nodeType": "VariableDeclaration",
																"scope": 2478,
																"src": "1589:9:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2458,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1589:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2463,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2462,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2460,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2441,
																"src": "1601:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2461,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2443,
																"src": "1605:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1601:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1589:17:11"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2468,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2466,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2464,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2459,
																	"src": "1624:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2465,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2441,
																	"src": "1628:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1624:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 2467,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2443,
																"src": "1633:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1624:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2473,
														"nodeType": "IfStatement",
														"src": "1620:33:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2469,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1644:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2470,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1651:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2471,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1643:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2449,
															"id": 2472,
															"nodeType": "Return",
															"src": "1636:17:11"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2474,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1675:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2475,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2459,
																	"src": "1681:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2476,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1674:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2449,
														"id": 2477,
														"nodeType": "Return",
														"src": "1667:16:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2439,
										"nodeType": "StructuredDocumentation",
										"src": "1103:99:11",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag."
									},
									"id": 2480,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1216:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2444,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2441,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1231:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2480,
												"src": "1223:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2440,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2443,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1242:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2480,
												"src": "1234:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2442,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1222:22:11"
									},
									"returnParameters": {
										"id": 2449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2446,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2480,
												"src": "1268:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2445,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2448,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2480,
												"src": "1274:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2447,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1274:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:15:11"
									},
									"scope": 3421,
									"src": "1207:493:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2507,
										"nodeType": "Block",
										"src": "1887:114:11",
										"statements": [
											{
												"id": 2506,
												"nodeType": "UncheckedBlock",
												"src": "1897:98:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2494,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2492,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2485,
																"src": "1925:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2493,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1930:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1925:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2499,
														"nodeType": "IfStatement",
														"src": "1921:29:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2495,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1941:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2496,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1948:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2497,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1940:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2491,
															"id": 2498,
															"nodeType": "Return",
															"src": "1933:17:11"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2500,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1972:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2503,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2501,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2483,
																		"src": "1978:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2502,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2485,
																		"src": "1982:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1978:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2504,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1971:13:11",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2491,
														"id": 2505,
														"nodeType": "Return",
														"src": "1964:20:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2481,
										"nodeType": "StructuredDocumentation",
										"src": "1706:100:11",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag."
									},
									"id": 2508,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1820:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2486,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2483,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1835:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2508,
												"src": "1827:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2482,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1827:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2485,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1846:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2508,
												"src": "1838:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2484,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1838:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1826:22:11"
									},
									"returnParameters": {
										"id": 2491,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2488,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2508,
												"src": "1872:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2487,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1872:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2490,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2508,
												"src": "1878:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2489,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1878:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1871:15:11"
									},
									"scope": 3421,
									"src": "1811:190:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2535,
										"nodeType": "Block",
										"src": "2198:114:11",
										"statements": [
											{
												"id": 2534,
												"nodeType": "UncheckedBlock",
												"src": "2208:98:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2522,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2520,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2513,
																"src": "2236:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2521,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2241:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2236:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2527,
														"nodeType": "IfStatement",
														"src": "2232:29:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2523,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2252:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2524,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2259:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2525,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2251:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2519,
															"id": 2526,
															"nodeType": "Return",
															"src": "2244:17:11"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2528,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2283:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2531,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2529,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2511,
																		"src": "2289:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 2530,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2513,
																		"src": "2293:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2289:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2532,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2282:13:11",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2519,
														"id": 2533,
														"nodeType": "Return",
														"src": "2275:20:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2509,
										"nodeType": "StructuredDocumentation",
										"src": "2007:110:11",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."
									},
									"id": 2536,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2131:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2514,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2511,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2146:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2536,
												"src": "2138:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2510,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2138:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2513,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2157:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2536,
												"src": "2149:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2512,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2149:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2137:22:11"
									},
									"returnParameters": {
										"id": 2519,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2516,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2536,
												"src": "2183:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2515,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2183:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2518,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2536,
												"src": "2189:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2517,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2189:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2182:15:11"
									},
									"scope": 3421,
									"src": "2122:190:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2553,
										"nodeType": "Block",
										"src": "2449:37:11",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2548,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2546,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2539,
															"src": "2466:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 2547,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2541,
															"src": "2470:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2466:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2550,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2541,
														"src": "2478:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2551,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2466:13:11",
													"trueExpression": {
														"id": 2549,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2539,
														"src": "2474:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2545,
												"id": 2552,
												"nodeType": "Return",
												"src": "2459:20:11"
											}
										]
									},
									"documentation": {
										"id": 2537,
										"nodeType": "StructuredDocumentation",
										"src": "2318:59:11",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 2554,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "2391:3:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2542,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2539,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2403:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2554,
												"src": "2395:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2538,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2395:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2541,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2414:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2554,
												"src": "2406:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2540,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2406:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2394:22:11"
									},
									"returnParameters": {
										"id": 2545,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2544,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2554,
												"src": "2440:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2543,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2440:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2439:9:11"
									},
									"scope": 3421,
									"src": "2382:104:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2571,
										"nodeType": "Block",
										"src": "2624:37:11",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2566,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2564,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2557,
															"src": "2641:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2565,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2559,
															"src": "2645:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2641:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2568,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2559,
														"src": "2653:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2569,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2641:13:11",
													"trueExpression": {
														"id": 2567,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2557,
														"src": "2649:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2563,
												"id": 2570,
												"nodeType": "Return",
												"src": "2634:20:11"
											}
										]
									},
									"documentation": {
										"id": 2555,
										"nodeType": "StructuredDocumentation",
										"src": "2492:60:11",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 2572,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "2566:3:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2560,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2557,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2578:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2572,
												"src": "2570:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2556,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2559,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2589:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2572,
												"src": "2581:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2558,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2581:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:22:11"
									},
									"returnParameters": {
										"id": 2563,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2562,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2572,
												"src": "2615:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2561,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2615:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2614:9:11"
									},
									"scope": 3421,
									"src": "2557:104:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2594,
										"nodeType": "Block",
										"src": "2845:82:11",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2592,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2584,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2582,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2575,
																	"src": "2900:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2583,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2577,
																	"src": "2904:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2900:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2585,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2899:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2591,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2588,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2586,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2575,
																		"src": "2910:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 2587,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2577,
																		"src": "2914:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2910:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2589,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2909:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 2590,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2919:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "2909:11:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2899:21:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2581,
												"id": 2593,
												"nodeType": "Return",
												"src": "2892:28:11"
											}
										]
									},
									"documentation": {
										"id": 2573,
										"nodeType": "StructuredDocumentation",
										"src": "2667:102:11",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 2595,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "2783:7:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2578,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2575,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2799:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2595,
												"src": "2791:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2574,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2791:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2577,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2810:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2595,
												"src": "2802:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2576,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2802:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2790:22:11"
									},
									"returnParameters": {
										"id": 2581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2580,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2595,
												"src": "2836:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2579,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2836:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2835:9:11"
									},
									"scope": 3421,
									"src": "2774:153:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2628,
										"nodeType": "Block",
										"src": "3219:260:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2607,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2605,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2600,
														"src": "3233:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2606,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3238:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3233:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2613,
												"nodeType": "IfStatement",
												"src": "3229:127:11",
												"trueBody": {
													"id": 2612,
													"nodeType": "Block",
													"src": "3241:115:11",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2610,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2608,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2598,
																	"src": "3340:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2609,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2600,
																	"src": "3344:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3340:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2604,
															"id": 2611,
															"nodeType": "Return",
															"src": "3333:12:11"
														}
													]
												}
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2616,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2614,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2598,
															"src": "3444:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 2615,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3449:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3444:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2625,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2623,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2620,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2618,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2598,
																			"src": "3458:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2619,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3462:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3458:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2621,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3457:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2622,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2600,
																"src": "3467:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3457:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2624,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3471:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "3457:15:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2626,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "3444:28:11",
													"trueExpression": {
														"hexValue": "30",
														"id": 2617,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3453:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2604,
												"id": 2627,
												"nodeType": "Return",
												"src": "3437:35:11"
											}
										]
									},
									"documentation": {
										"id": 2596,
										"nodeType": "StructuredDocumentation",
										"src": "2933:210:11",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."
									},
									"id": 2629,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "3157:7:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2601,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2598,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3173:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2629,
												"src": "3165:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2597,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3165:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2600,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3184:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2629,
												"src": "3176:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2599,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3176:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3164:22:11"
									},
									"returnParameters": {
										"id": 2604,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2603,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2629,
												"src": "3210:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2602,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3210:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3209:9:11"
									},
									"scope": 3421,
									"src": "3148:331:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2754,
										"nodeType": "Block",
										"src": "3901:4018:11",
										"statements": [
											{
												"id": 2753,
												"nodeType": "UncheckedBlock",
												"src": "3911:4002:11",
												"statements": [
													{
														"assignments": [
															2642
														],
														"declarations": [
															{
																"constant": false,
																"id": 2642,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "4240:5:11",
																"nodeType": "VariableDeclaration",
																"scope": 2753,
																"src": "4232:13:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2641,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4232:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2646,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2645,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2643,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2632,
																"src": "4248:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2644,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2634,
																"src": "4252:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4248:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4232:21:11"
													},
													{
														"assignments": [
															2648
														],
														"declarations": [
															{
																"constant": false,
																"id": 2648,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "4320:5:11",
																"nodeType": "VariableDeclaration",
																"scope": 2753,
																"src": "4312:13:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2647,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4312:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2649,
														"nodeType": "VariableDeclarationStatement",
														"src": "4312:13:11"
													},
													{
														"AST": {
															"nativeSrc": "4392:122:11",
															"nodeType": "YulBlock",
															"src": "4392:122:11",
															"statements": [
																{
																	"nativeSrc": "4410:30:11",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4410:30:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "4427:1:11",
																				"nodeType": "YulIdentifier",
																				"src": "4427:1:11"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "4430:1:11",
																				"nodeType": "YulIdentifier",
																				"src": "4430:1:11"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4437:1:11",
																						"nodeType": "YulLiteral",
																						"src": "4437:1:11",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "4433:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "4433:3:11"
																				},
																				"nativeSrc": "4433:6:11",
																				"nodeType": "YulFunctionCall",
																				"src": "4433:6:11"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "4420:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "4420:6:11"
																		},
																		"nativeSrc": "4420:20:11",
																		"nodeType": "YulFunctionCall",
																		"src": "4420:20:11"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nativeSrc": "4414:2:11",
																			"nodeType": "YulTypedName",
																			"src": "4414:2:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4457:43:11",
																	"nodeType": "YulAssignment",
																	"src": "4457:43:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "4474:2:11",
																						"nodeType": "YulIdentifier",
																						"src": "4474:2:11"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4478:5:11",
																						"nodeType": "YulIdentifier",
																						"src": "4478:5:11"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "4470:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "4470:3:11"
																				},
																				"nativeSrc": "4470:14:11",
																				"nodeType": "YulFunctionCall",
																				"src": "4470:14:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "4489:2:11",
																						"nodeType": "YulIdentifier",
																						"src": "4489:2:11"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4493:5:11",
																						"nodeType": "YulIdentifier",
																						"src": "4493:5:11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "4486:2:11",
																					"nodeType": "YulIdentifier",
																					"src": "4486:2:11"
																				},
																				"nativeSrc": "4486:13:11",
																				"nodeType": "YulFunctionCall",
																				"src": "4486:13:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4466:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "4466:3:11"
																		},
																		"nativeSrc": "4466:34:11",
																		"nodeType": "YulFunctionCall",
																		"src": "4466:34:11"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "4457:5:11",
																			"nodeType": "YulIdentifier",
																			"src": "4457:5:11"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2642,
																"isOffset": false,
																"isSlot": false,
																"src": "4478:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2642,
																"isOffset": false,
																"isSlot": false,
																"src": "4493:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2648,
																"isOffset": false,
																"isSlot": false,
																"src": "4457:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2632,
																"isOffset": false,
																"isSlot": false,
																"src": "4427:1:11",
																"valueSize": 1
															},
															{
																"declaration": 2634,
																"isOffset": false,
																"isSlot": false,
																"src": "4430:1:11",
																"valueSize": 1
															}
														],
														"id": 2650,
														"nodeType": "InlineAssembly",
														"src": "4383:131:11"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2653,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2651,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2648,
																"src": "4595:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2652,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4604:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4595:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2659,
														"nodeType": "IfStatement",
														"src": "4591:368:11",
														"trueBody": {
															"id": 2658,
															"nodeType": "Block",
															"src": "4607:352:11",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2656,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2654,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2642,
																			"src": "4925:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 2655,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2636,
																			"src": "4933:11:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4925:19:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 2640,
																	"id": 2657,
																	"nodeType": "Return",
																	"src": "4918:26:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2662,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2660,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2636,
																"src": "5065:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 2661,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2648,
																"src": "5080:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5065:20:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2667,
														"nodeType": "IfStatement",
														"src": "5061:88:11",
														"trueBody": {
															"id": 2666,
															"nodeType": "Block",
															"src": "5087:62:11",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 2663,
																			"name": "MathOverflowedMulDiv",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2373,
																			"src": "5112:20:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 2664,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5112:22:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 2665,
																	"nodeType": "RevertStatement",
																	"src": "5105:29:11"
																}
															]
														}
													},
													{
														"assignments": [
															2669
														],
														"declarations": [
															{
																"constant": false,
																"id": 2669,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "5412:9:11",
																"nodeType": "VariableDeclaration",
																"scope": 2753,
																"src": "5404:17:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2668,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5404:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2670,
														"nodeType": "VariableDeclarationStatement",
														"src": "5404:17:11"
													},
													{
														"AST": {
															"nativeSrc": "5444:291:11",
															"nodeType": "YulBlock",
															"src": "5444:291:11",
															"statements": [
																{
																	"nativeSrc": "5513:38:11",
																	"nodeType": "YulAssignment",
																	"src": "5513:38:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "5533:1:11",
																				"nodeType": "YulIdentifier",
																				"src": "5533:1:11"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "5536:1:11",
																				"nodeType": "YulIdentifier",
																				"src": "5536:1:11"
																			},
																			{
																				"name": "denominator",
																				"nativeSrc": "5539:11:11",
																				"nodeType": "YulIdentifier",
																				"src": "5539:11:11"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "5526:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "5526:6:11"
																		},
																		"nativeSrc": "5526:25:11",
																		"nodeType": "YulFunctionCall",
																		"src": "5526:25:11"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nativeSrc": "5513:9:11",
																			"nodeType": "YulIdentifier",
																			"src": "5513:9:11"
																		}
																	]
																},
																{
																	"nativeSrc": "5633:41:11",
																	"nodeType": "YulAssignment",
																	"src": "5633:41:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nativeSrc": "5646:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "5646:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nativeSrc": "5656:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "5656:9:11"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "5667:5:11",
																						"nodeType": "YulIdentifier",
																						"src": "5667:5:11"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nativeSrc": "5653:2:11",
																					"nodeType": "YulIdentifier",
																					"src": "5653:2:11"
																				},
																				"nativeSrc": "5653:20:11",
																				"nodeType": "YulFunctionCall",
																				"src": "5653:20:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5642:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "5642:3:11"
																		},
																		"nativeSrc": "5642:32:11",
																		"nodeType": "YulFunctionCall",
																		"src": "5642:32:11"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "5633:5:11",
																			"nodeType": "YulIdentifier",
																			"src": "5633:5:11"
																		}
																	]
																},
																{
																	"nativeSrc": "5691:30:11",
																	"nodeType": "YulAssignment",
																	"src": "5691:30:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "5704:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "5704:5:11"
																			},
																			{
																				"name": "remainder",
																				"nativeSrc": "5711:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "5711:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5700:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "5700:3:11"
																		},
																		"nativeSrc": "5700:21:11",
																		"nodeType": "YulFunctionCall",
																		"src": "5700:21:11"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "5691:5:11",
																			"nodeType": "YulIdentifier",
																			"src": "5691:5:11"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2636,
																"isOffset": false,
																"isSlot": false,
																"src": "5539:11:11",
																"valueSize": 1
															},
															{
																"declaration": 2642,
																"isOffset": false,
																"isSlot": false,
																"src": "5667:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2642,
																"isOffset": false,
																"isSlot": false,
																"src": "5691:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2642,
																"isOffset": false,
																"isSlot": false,
																"src": "5704:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2648,
																"isOffset": false,
																"isSlot": false,
																"src": "5633:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2648,
																"isOffset": false,
																"isSlot": false,
																"src": "5646:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2669,
																"isOffset": false,
																"isSlot": false,
																"src": "5513:9:11",
																"valueSize": 1
															},
															{
																"declaration": 2669,
																"isOffset": false,
																"isSlot": false,
																"src": "5656:9:11",
																"valueSize": 1
															},
															{
																"declaration": 2669,
																"isOffset": false,
																"isSlot": false,
																"src": "5711:9:11",
																"valueSize": 1
															},
															{
																"declaration": 2632,
																"isOffset": false,
																"isSlot": false,
																"src": "5533:1:11",
																"valueSize": 1
															},
															{
																"declaration": 2634,
																"isOffset": false,
																"isSlot": false,
																"src": "5536:1:11",
																"valueSize": 1
															}
														],
														"id": 2671,
														"nodeType": "InlineAssembly",
														"src": "5435:300:11"
													},
													{
														"assignments": [
															2673
														],
														"declarations": [
															{
																"constant": false,
																"id": 2673,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "5947:4:11",
																"nodeType": "VariableDeclaration",
																"scope": 2753,
																"src": "5939:12:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2672,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5939:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2680,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2679,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2674,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2636,
																"src": "5954:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2677,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "30",
																			"id": 2675,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5969:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 2676,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2636,
																			"src": "5973:11:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5969:15:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2678,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5968:17:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5954:31:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "5939:46:11"
													},
													{
														"AST": {
															"nativeSrc": "6008:362:11",
															"nodeType": "YulBlock",
															"src": "6008:362:11",
															"statements": [
																{
																	"nativeSrc": "6073:37:11",
																	"nodeType": "YulAssignment",
																	"src": "6073:37:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nativeSrc": "6092:11:11",
																				"nodeType": "YulIdentifier",
																				"src": "6092:11:11"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "6105:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "6105:4:11"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "6088:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "6088:3:11"
																		},
																		"nativeSrc": "6088:22:11",
																		"nodeType": "YulFunctionCall",
																		"src": "6088:22:11"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nativeSrc": "6073:11:11",
																			"nodeType": "YulIdentifier",
																			"src": "6073:11:11"
																		}
																	]
																},
																{
																	"nativeSrc": "6177:25:11",
																	"nodeType": "YulAssignment",
																	"src": "6177:25:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "6190:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "6190:5:11"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "6197:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "6197:4:11"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "6186:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "6186:3:11"
																		},
																		"nativeSrc": "6186:16:11",
																		"nodeType": "YulFunctionCall",
																		"src": "6186:16:11"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "6177:5:11",
																			"nodeType": "YulIdentifier",
																			"src": "6177:5:11"
																		}
																	]
																},
																{
																	"nativeSrc": "6317:39:11",
																	"nodeType": "YulAssignment",
																	"src": "6317:39:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6337:1:11",
																								"nodeType": "YulLiteral",
																								"src": "6337:1:11",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nativeSrc": "6340:4:11",
																								"nodeType": "YulIdentifier",
																								"src": "6340:4:11"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "6333:3:11",
																							"nodeType": "YulIdentifier",
																							"src": "6333:3:11"
																						},
																						"nativeSrc": "6333:12:11",
																						"nodeType": "YulFunctionCall",
																						"src": "6333:12:11"
																					},
																					{
																						"name": "twos",
																						"nativeSrc": "6347:4:11",
																						"nodeType": "YulIdentifier",
																						"src": "6347:4:11"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nativeSrc": "6329:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "6329:3:11"
																				},
																				"nativeSrc": "6329:23:11",
																				"nodeType": "YulFunctionCall",
																				"src": "6329:23:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6354:1:11",
																				"nodeType": "YulLiteral",
																				"src": "6354:1:11",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6325:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "6325:3:11"
																		},
																		"nativeSrc": "6325:31:11",
																		"nodeType": "YulFunctionCall",
																		"src": "6325:31:11"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nativeSrc": "6317:4:11",
																			"nodeType": "YulIdentifier",
																			"src": "6317:4:11"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2636,
																"isOffset": false,
																"isSlot": false,
																"src": "6073:11:11",
																"valueSize": 1
															},
															{
																"declaration": 2636,
																"isOffset": false,
																"isSlot": false,
																"src": "6092:11:11",
																"valueSize": 1
															},
															{
																"declaration": 2642,
																"isOffset": false,
																"isSlot": false,
																"src": "6177:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2642,
																"isOffset": false,
																"isSlot": false,
																"src": "6190:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2673,
																"isOffset": false,
																"isSlot": false,
																"src": "6105:4:11",
																"valueSize": 1
															},
															{
																"declaration": 2673,
																"isOffset": false,
																"isSlot": false,
																"src": "6197:4:11",
																"valueSize": 1
															},
															{
																"declaration": 2673,
																"isOffset": false,
																"isSlot": false,
																"src": "6317:4:11",
																"valueSize": 1
															},
															{
																"declaration": 2673,
																"isOffset": false,
																"isSlot": false,
																"src": "6340:4:11",
																"valueSize": 1
															},
															{
																"declaration": 2673,
																"isOffset": false,
																"isSlot": false,
																"src": "6347:4:11",
																"valueSize": 1
															}
														],
														"id": 2681,
														"nodeType": "InlineAssembly",
														"src": "5999:371:11"
													},
													{
														"expression": {
															"id": 2686,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2682,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2642,
																"src": "6436:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2685,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2683,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2648,
																	"src": "6445:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2684,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2673,
																	"src": "6453:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6445:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6436:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2687,
														"nodeType": "ExpressionStatement",
														"src": "6436:21:11"
													},
													{
														"assignments": [
															2689
														],
														"declarations": [
															{
																"constant": false,
																"id": 2689,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "6783:7:11",
																"nodeType": "VariableDeclaration",
																"scope": 2753,
																"src": "6775:15:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2688,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6775:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2696,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2695,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2692,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 2690,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6794:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 2691,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2636,
																			"src": "6798:11:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6794:15:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2693,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6793:17:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 2694,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6813:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "6793:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "6775:39:11"
													},
													{
														"expression": {
															"id": 2703,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2697,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2689,
																"src": "7031:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2702,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2698,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7042:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2701,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2699,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2636,
																		"src": "7046:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2700,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2689,
																		"src": "7060:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7046:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7042:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7031:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2704,
														"nodeType": "ExpressionStatement",
														"src": "7031:36:11"
													},
													{
														"expression": {
															"id": 2711,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2705,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2689,
																"src": "7100:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2710,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2706,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7111:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2709,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2707,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2636,
																		"src": "7115:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2708,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2689,
																		"src": "7129:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7115:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7111:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7100:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2712,
														"nodeType": "ExpressionStatement",
														"src": "7100:36:11"
													},
													{
														"expression": {
															"id": 2719,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2713,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2689,
																"src": "7170:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2718,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2714,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7181:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2717,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2715,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2636,
																		"src": "7185:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2716,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2689,
																		"src": "7199:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7185:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7181:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7170:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2720,
														"nodeType": "ExpressionStatement",
														"src": "7170:36:11"
													},
													{
														"expression": {
															"id": 2727,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2721,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2689,
																"src": "7240:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2726,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2722,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7251:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2725,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2723,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2636,
																		"src": "7255:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2724,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2689,
																		"src": "7269:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7255:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7251:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7240:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2728,
														"nodeType": "ExpressionStatement",
														"src": "7240:36:11"
													},
													{
														"expression": {
															"id": 2735,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2729,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2689,
																"src": "7310:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2734,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2730,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7321:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2733,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2731,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2636,
																		"src": "7325:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2732,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2689,
																		"src": "7339:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7325:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7321:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7310:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2736,
														"nodeType": "ExpressionStatement",
														"src": "7310:36:11"
													},
													{
														"expression": {
															"id": 2743,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2737,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2689,
																"src": "7381:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2742,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2738,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7392:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2741,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2739,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2636,
																		"src": "7396:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2740,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2689,
																		"src": "7410:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7396:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7392:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7381:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2744,
														"nodeType": "ExpressionStatement",
														"src": "7381:36:11"
													},
													{
														"expression": {
															"id": 2749,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2745,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2639,
																"src": "7851:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2748,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2746,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2642,
																	"src": "7860:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2747,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2689,
																	"src": "7868:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7860:15:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7851:24:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2750,
														"nodeType": "ExpressionStatement",
														"src": "7851:24:11"
													},
													{
														"expression": {
															"id": 2751,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2639,
															"src": "7896:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2640,
														"id": 2752,
														"nodeType": "Return",
														"src": "7889:13:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2630,
										"nodeType": "StructuredDocumentation",
										"src": "3485:313:11",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."
									},
									"id": 2755,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "3812:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2637,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2632,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "3827:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2755,
												"src": "3819:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2631,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3819:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2634,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "3838:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2755,
												"src": "3830:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2633,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3830:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2636,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "3849:11:11",
												"nodeType": "VariableDeclaration",
												"scope": 2755,
												"src": "3841:19:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2635,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3841:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3818:43:11"
									},
									"returnParameters": {
										"id": 2640,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2639,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "3893:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2755,
												"src": "3885:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2638,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3885:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3884:16:11"
									},
									"scope": 3421,
									"src": "3803:4116:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2797,
										"nodeType": "Block",
										"src": "8161:192:11",
										"statements": [
											{
												"assignments": [
													2771
												],
												"declarations": [
													{
														"constant": false,
														"id": 2771,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8179:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 2797,
														"src": "8171:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2770,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8171:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2777,
												"initialValue": {
													"arguments": [
														{
															"id": 2773,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2758,
															"src": "8195:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2774,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2760,
															"src": "8198:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2775,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2762,
															"src": "8201:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2772,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2755,
															2798
														],
														"referencedDeclaration": 2755,
														"src": "8188:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 2776,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8188:25:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8171:42:11"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2788,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2779,
																"name": "rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2765,
																"src": "8244:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Rounding_$2378",
																	"typeString": "enum Math.Rounding"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_enum$_Rounding_$2378",
																	"typeString": "enum Math.Rounding"
																}
															],
															"id": 2778,
															"name": "unsignedRoundsUp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3420,
															"src": "8227:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2378_$returns$_t_bool_$",
																"typeString": "function (enum Math.Rounding) pure returns (bool)"
															}
														},
														"id": 2780,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8227:26:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2787,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2782,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2758,
																	"src": "8264:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2783,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2760,
																	"src": "8267:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2784,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2762,
																	"src": "8270:11:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2781,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "8257:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2785,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8257:25:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2786,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8285:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8257:29:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8227:59:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2794,
												"nodeType": "IfStatement",
												"src": "8223:101:11",
												"trueBody": {
													"id": 2793,
													"nodeType": "Block",
													"src": "8288:36:11",
													"statements": [
														{
															"expression": {
																"id": 2791,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2789,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2771,
																	"src": "8302:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 2790,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8312:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8302:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2792,
															"nodeType": "ExpressionStatement",
															"src": "8302:11:11"
														}
													]
												}
											},
											{
												"expression": {
													"id": 2795,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2771,
													"src": "8340:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2769,
												"id": 2796,
												"nodeType": "Return",
												"src": "8333:13:11"
											}
										]
									},
									"documentation": {
										"id": 2756,
										"nodeType": "StructuredDocumentation",
										"src": "7925:121:11",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 2798,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "8060:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2766,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2758,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "8075:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2798,
												"src": "8067:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2757,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8067:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2760,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "8086:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2798,
												"src": "8078:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2759,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8078:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2762,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "8097:11:11",
												"nodeType": "VariableDeclaration",
												"scope": 2798,
												"src": "8089:19:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2761,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8089:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2765,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8119:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2798,
												"src": "8110:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2378",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2764,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2763,
														"name": "Rounding",
														"nameLocations": [
															"8110:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2378,
														"src": "8110:8:11"
													},
													"referencedDeclaration": 2378,
													"src": "8110:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2378",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8066:62:11"
									},
									"returnParameters": {
										"id": 2769,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2768,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2798,
												"src": "8152:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2767,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8152:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8151:9:11"
									},
									"scope": 3421,
									"src": "8051:302:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2909,
										"nodeType": "Block",
										"src": "8644:1585:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2808,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2806,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2801,
														"src": "8658:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2807,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8663:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8658:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2812,
												"nodeType": "IfStatement",
												"src": "8654:45:11",
												"trueBody": {
													"id": 2811,
													"nodeType": "Block",
													"src": "8666:33:11",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2809,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8687:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2805,
															"id": 2810,
															"nodeType": "Return",
															"src": "8680:8:11"
														}
													]
												}
											},
											{
												"assignments": [
													2814
												],
												"declarations": [
													{
														"constant": false,
														"id": 2814,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9386:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 2909,
														"src": "9378:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2813,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9378:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2823,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2822,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 2815,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9395:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2820,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2817,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2801,
																			"src": "9406:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2816,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			3077,
																			3112
																		],
																		"referencedDeclaration": 3077,
																		"src": "9401:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 2818,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9401:7:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2819,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9412:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9401:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2821,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9400:14:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9395:19:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9378:36:11"
											},
											{
												"id": 2908,
												"nodeType": "UncheckedBlock",
												"src": "9815:408:11",
												"statements": [
													{
														"expression": {
															"id": 2833,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2824,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2814,
																"src": "9839:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2832,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2829,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2825,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2814,
																				"src": "9849:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2828,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2826,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2801,
																					"src": "9858:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2827,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2814,
																					"src": "9862:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9858:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9849:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2830,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9848:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2831,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9873:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9848:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9839:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2834,
														"nodeType": "ExpressionStatement",
														"src": "9839:35:11"
													},
													{
														"expression": {
															"id": 2844,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2835,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2814,
																"src": "9888:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2843,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2840,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2836,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2814,
																				"src": "9898:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2839,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2837,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2801,
																					"src": "9907:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2838,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2814,
																					"src": "9911:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9907:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9898:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2841,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9897:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2842,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9922:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9897:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9888:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2845,
														"nodeType": "ExpressionStatement",
														"src": "9888:35:11"
													},
													{
														"expression": {
															"id": 2855,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2846,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2814,
																"src": "9937:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2854,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2851,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2847,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2814,
																				"src": "9947:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2850,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2848,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2801,
																					"src": "9956:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2849,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2814,
																					"src": "9960:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9956:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9947:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2852,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9946:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2853,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9971:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9946:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9937:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2856,
														"nodeType": "ExpressionStatement",
														"src": "9937:35:11"
													},
													{
														"expression": {
															"id": 2866,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2857,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2814,
																"src": "9986:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2865,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2862,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2858,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2814,
																				"src": "9996:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2861,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2859,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2801,
																					"src": "10005:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2860,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2814,
																					"src": "10009:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10005:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9996:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2863,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9995:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2864,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10020:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9995:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9986:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2867,
														"nodeType": "ExpressionStatement",
														"src": "9986:35:11"
													},
													{
														"expression": {
															"id": 2877,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2868,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2814,
																"src": "10035:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2876,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2873,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2869,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2814,
																				"src": "10045:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2872,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2870,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2801,
																					"src": "10054:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2871,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2814,
																					"src": "10058:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10054:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10045:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2874,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10044:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2875,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10069:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10044:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10035:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2878,
														"nodeType": "ExpressionStatement",
														"src": "10035:35:11"
													},
													{
														"expression": {
															"id": 2888,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2879,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2814,
																"src": "10084:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2887,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2884,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2880,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2814,
																				"src": "10094:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2883,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2881,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2801,
																					"src": "10103:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2882,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2814,
																					"src": "10107:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10103:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10094:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2885,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10093:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2886,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10118:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10093:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10084:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2889,
														"nodeType": "ExpressionStatement",
														"src": "10084:35:11"
													},
													{
														"expression": {
															"id": 2899,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2890,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2814,
																"src": "10133:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2898,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2895,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2891,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2814,
																				"src": "10143:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2894,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2892,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2801,
																					"src": "10152:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2893,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2814,
																					"src": "10156:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10152:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10143:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2896,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10142:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2897,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10167:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10142:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10133:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2900,
														"nodeType": "ExpressionStatement",
														"src": "10133:35:11"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 2902,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2814,
																	"src": "10193:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2905,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2903,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2801,
																		"src": "10201:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2904,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2814,
																		"src": "10205:6:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "10201:10:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2901,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2572,
																"src": "10189:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2906,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10189:23:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2805,
														"id": 2907,
														"nodeType": "Return",
														"src": "10182:30:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2799,
										"nodeType": "StructuredDocumentation",
										"src": "8359:223:11",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 2910,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8596:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2802,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2801,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8609:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2910,
												"src": "8601:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2800,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8601:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8600:11:11"
									},
									"returnParameters": {
										"id": 2805,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2804,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2910,
												"src": "8635:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2803,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8635:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8634:9:11"
									},
									"scope": 3421,
									"src": "8587:1642:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2944,
										"nodeType": "Block",
										"src": "10405:164:11",
										"statements": [
											{
												"id": 2943,
												"nodeType": "UncheckedBlock",
												"src": "10415:148:11",
												"statements": [
													{
														"assignments": [
															2922
														],
														"declarations": [
															{
																"constant": false,
																"id": 2922,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "10447:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 2943,
																"src": "10439:14:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2921,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "10439:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2926,
														"initialValue": {
															"arguments": [
																{
																	"id": 2924,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2913,
																	"src": "10461:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2923,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2910,
																	2945
																],
																"referencedDeclaration": 2910,
																"src": "10456:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2925,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10456:7:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "10439:24:11"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2941,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2927,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2922,
																"src": "10484:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2936,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 2929,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2916,
																						"src": "10511:8:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2378",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2378",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 2928,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3420,
																					"src": "10494:16:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2378_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 2930,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "10494:26:11",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2935,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2933,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2931,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2922,
																						"src": "10524:6:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 2932,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2922,
																						"src": "10533:6:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "10524:15:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2934,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2913,
																					"src": "10542:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10524:19:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "10494:49:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2938,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10550:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2939,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "10494:57:11",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2937,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10546:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2940,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "10493:59:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "10484:68:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2920,
														"id": 2942,
														"nodeType": "Return",
														"src": "10477:75:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2911,
										"nodeType": "StructuredDocumentation",
										"src": "10235:89:11",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 2945,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "10338:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2917,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2913,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "10351:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2945,
												"src": "10343:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2912,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10343:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2916,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10363:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2945,
												"src": "10354:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2378",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2915,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2914,
														"name": "Rounding",
														"nameLocations": [
															"10354:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2378,
														"src": "10354:8:11"
													},
													"referencedDeclaration": 2378,
													"src": "10354:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2378",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10342:30:11"
									},
									"returnParameters": {
										"id": 2920,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2919,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2945,
												"src": "10396:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2918,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10396:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10395:9:11"
									},
									"scope": 3421,
									"src": "10329:240:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3076,
										"nodeType": "Block",
										"src": "10760:922:11",
										"statements": [
											{
												"assignments": [
													2954
												],
												"declarations": [
													{
														"constant": false,
														"id": 2954,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10778:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 3076,
														"src": "10770:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2953,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10770:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2956,
												"initialValue": {
													"hexValue": "30",
													"id": 2955,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10787:1:11",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10770:18:11"
											},
											{
												"id": 3073,
												"nodeType": "UncheckedBlock",
												"src": "10798:855:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2961,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2959,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2957,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2948,
																	"src": "10826:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2958,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10835:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "10826:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2960,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10841:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10826:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2971,
														"nodeType": "IfStatement",
														"src": "10822:99:11",
														"trueBody": {
															"id": 2970,
															"nodeType": "Block",
															"src": "10844:77:11",
															"statements": [
																{
																	"expression": {
																		"id": 2964,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2962,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2948,
																			"src": "10862:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2963,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10872:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10862:13:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2965,
																	"nodeType": "ExpressionStatement",
																	"src": "10862:13:11"
																},
																{
																	"expression": {
																		"id": 2968,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2966,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2954,
																			"src": "10893:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2967,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10903:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10893:13:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2969,
																	"nodeType": "ExpressionStatement",
																	"src": "10893:13:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2976,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2974,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2972,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2948,
																	"src": "10938:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2973,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10947:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10938:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2975,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10952:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10938:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2986,
														"nodeType": "IfStatement",
														"src": "10934:96:11",
														"trueBody": {
															"id": 2985,
															"nodeType": "Block",
															"src": "10955:75:11",
															"statements": [
																{
																	"expression": {
																		"id": 2979,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2977,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2948,
																			"src": "10973:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2978,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10983:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10973:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2980,
																	"nodeType": "ExpressionStatement",
																	"src": "10973:12:11"
																},
																{
																	"expression": {
																		"id": 2983,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2981,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2954,
																			"src": "11003:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2982,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11013:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11003:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2984,
																	"nodeType": "ExpressionStatement",
																	"src": "11003:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2991,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2989,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2987,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2948,
																	"src": "11047:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2988,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11056:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "11047:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2990,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11061:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11047:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3001,
														"nodeType": "IfStatement",
														"src": "11043:96:11",
														"trueBody": {
															"id": 3000,
															"nodeType": "Block",
															"src": "11064:75:11",
															"statements": [
																{
																	"expression": {
																		"id": 2994,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2992,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2948,
																			"src": "11082:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2993,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11092:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11082:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2995,
																	"nodeType": "ExpressionStatement",
																	"src": "11082:12:11"
																},
																{
																	"expression": {
																		"id": 2998,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2996,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2954,
																			"src": "11112:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2997,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11122:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11112:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2999,
																	"nodeType": "ExpressionStatement",
																	"src": "11112:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3006,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3004,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3002,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2948,
																	"src": "11156:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3003,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11165:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "11156:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3005,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11170:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11156:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3016,
														"nodeType": "IfStatement",
														"src": "11152:96:11",
														"trueBody": {
															"id": 3015,
															"nodeType": "Block",
															"src": "11173:75:11",
															"statements": [
																{
																	"expression": {
																		"id": 3009,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3007,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2948,
																			"src": "11191:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3008,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11201:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11191:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3010,
																	"nodeType": "ExpressionStatement",
																	"src": "11191:12:11"
																},
																{
																	"expression": {
																		"id": 3013,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3011,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2954,
																			"src": "11221:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3012,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11231:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11221:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3014,
																	"nodeType": "ExpressionStatement",
																	"src": "11221:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3021,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3019,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3017,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2948,
																	"src": "11265:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3018,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11274:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "11265:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3020,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11278:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11265:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3031,
														"nodeType": "IfStatement",
														"src": "11261:93:11",
														"trueBody": {
															"id": 3030,
															"nodeType": "Block",
															"src": "11281:73:11",
															"statements": [
																{
																	"expression": {
																		"id": 3024,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3022,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2948,
																			"src": "11299:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3023,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11309:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11299:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3025,
																	"nodeType": "ExpressionStatement",
																	"src": "11299:11:11"
																},
																{
																	"expression": {
																		"id": 3028,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3026,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2954,
																			"src": "11328:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3027,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11338:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11328:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3029,
																	"nodeType": "ExpressionStatement",
																	"src": "11328:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3036,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3034,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3032,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2948,
																	"src": "11371:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3033,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11380:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "11371:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3035,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11384:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11371:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3046,
														"nodeType": "IfStatement",
														"src": "11367:93:11",
														"trueBody": {
															"id": 3045,
															"nodeType": "Block",
															"src": "11387:73:11",
															"statements": [
																{
																	"expression": {
																		"id": 3039,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3037,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2948,
																			"src": "11405:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3038,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11415:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11405:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3040,
																	"nodeType": "ExpressionStatement",
																	"src": "11405:11:11"
																},
																{
																	"expression": {
																		"id": 3043,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3041,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2954,
																			"src": "11434:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3042,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11444:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11434:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3044,
																	"nodeType": "ExpressionStatement",
																	"src": "11434:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3051,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3049,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3047,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2948,
																	"src": "11477:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3048,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11486:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "11477:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3050,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11490:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11477:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3061,
														"nodeType": "IfStatement",
														"src": "11473:93:11",
														"trueBody": {
															"id": 3060,
															"nodeType": "Block",
															"src": "11493:73:11",
															"statements": [
																{
																	"expression": {
																		"id": 3054,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3052,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2948,
																			"src": "11511:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3053,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11521:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11511:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3055,
																	"nodeType": "ExpressionStatement",
																	"src": "11511:11:11"
																},
																{
																	"expression": {
																		"id": 3058,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3056,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2954,
																			"src": "11540:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3057,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11550:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11540:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3059,
																	"nodeType": "ExpressionStatement",
																	"src": "11540:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3066,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3064,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3062,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2948,
																	"src": "11583:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3063,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11592:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "11583:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3065,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11596:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11583:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3072,
														"nodeType": "IfStatement",
														"src": "11579:64:11",
														"trueBody": {
															"id": 3071,
															"nodeType": "Block",
															"src": "11599:44:11",
															"statements": [
																{
																	"expression": {
																		"id": 3069,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3067,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2954,
																			"src": "11617:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3068,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11627:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "11617:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3070,
																	"nodeType": "ExpressionStatement",
																	"src": "11617:11:11"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3074,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2954,
													"src": "11669:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2952,
												"id": 3075,
												"nodeType": "Return",
												"src": "11662:13:11"
											}
										]
									},
									"documentation": {
										"id": 2946,
										"nodeType": "StructuredDocumentation",
										"src": "10575:119:11",
										"text": " @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3077,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "10708:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2949,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2948,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10721:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 3077,
												"src": "10713:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2947,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10713:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10712:15:11"
									},
									"returnParameters": {
										"id": 2952,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2951,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3077,
												"src": "10751:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2950,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10751:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10750:9:11"
									},
									"scope": 3421,
									"src": "10699:983:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3111,
										"nodeType": "Block",
										"src": "11915:168:11",
										"statements": [
											{
												"id": 3110,
												"nodeType": "UncheckedBlock",
												"src": "11925:152:11",
												"statements": [
													{
														"assignments": [
															3089
														],
														"declarations": [
															{
																"constant": false,
																"id": 3089,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11957:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 3110,
																"src": "11949:14:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3088,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11949:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3093,
														"initialValue": {
															"arguments": [
																{
																	"id": 3091,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3080,
																	"src": "11971:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3090,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3077,
																	3112
																],
																"referencedDeclaration": 3077,
																"src": "11966:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3092,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11966:11:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11949:28:11"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3108,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3094,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3089,
																"src": "11998:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3103,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3096,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3083,
																						"src": "12025:8:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2378",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2378",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3095,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3420,
																					"src": "12008:16:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2378_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3097,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "12008:26:11",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3102,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3100,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3098,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12038:1:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 3099,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3089,
																						"src": "12043:6:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12038:11:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3101,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3080,
																					"src": "12052:5:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12038:19:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12008:49:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3105,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12064:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3106,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12008:57:11",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3104,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12060:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3107,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12007:59:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11998:68:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3087,
														"id": 3109,
														"nodeType": "Return",
														"src": "11991:75:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3078,
										"nodeType": "StructuredDocumentation",
										"src": "11688:142:11",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3112,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "11844:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3084,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3080,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11857:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 3112,
												"src": "11849:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3079,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11849:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3083,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "11873:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 3112,
												"src": "11864:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2378",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3082,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3081,
														"name": "Rounding",
														"nameLocations": [
															"11864:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2378,
														"src": "11864:8:11"
													},
													"referencedDeclaration": 2378,
													"src": "11864:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2378",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11848:34:11"
									},
									"returnParameters": {
										"id": 3087,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3086,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3112,
												"src": "11906:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3085,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11906:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11905:9:11"
									},
									"scope": 3421,
									"src": "11835:248:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3240,
										"nodeType": "Block",
										"src": "12276:854:11",
										"statements": [
											{
												"assignments": [
													3121
												],
												"declarations": [
													{
														"constant": false,
														"id": 3121,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "12294:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 3240,
														"src": "12286:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3120,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12286:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3123,
												"initialValue": {
													"hexValue": "30",
													"id": 3122,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12303:1:11",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12286:18:11"
											},
											{
												"id": 3237,
												"nodeType": "UncheckedBlock",
												"src": "12314:787:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3128,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3124,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3115,
																"src": "12342:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 3127,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3125,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12351:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3126,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12357:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "12351:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "12342:17:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3140,
														"nodeType": "IfStatement",
														"src": "12338:103:11",
														"trueBody": {
															"id": 3139,
															"nodeType": "Block",
															"src": "12361:80:11",
															"statements": [
																{
																	"expression": {
																		"id": 3133,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3129,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3115,
																			"src": "12379:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 3132,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3130,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12388:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 3131,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12394:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "12388:8:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "12379:17:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3134,
																	"nodeType": "ExpressionStatement",
																	"src": "12379:17:11"
																},
																{
																	"expression": {
																		"id": 3137,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3135,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3121,
																			"src": "12414:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3136,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12424:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "12414:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3138,
																	"nodeType": "ExpressionStatement",
																	"src": "12414:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3145,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3141,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3115,
																"src": "12458:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 3144,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3142,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12467:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3143,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12473:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "12467:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "12458:17:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3157,
														"nodeType": "IfStatement",
														"src": "12454:103:11",
														"trueBody": {
															"id": 3156,
															"nodeType": "Block",
															"src": "12477:80:11",
															"statements": [
																{
																	"expression": {
																		"id": 3150,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3146,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3115,
																			"src": "12495:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 3149,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3147,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12504:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 3148,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12510:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "12504:8:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "12495:17:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3151,
																	"nodeType": "ExpressionStatement",
																	"src": "12495:17:11"
																},
																{
																	"expression": {
																		"id": 3154,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3152,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3121,
																			"src": "12530:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3153,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12540:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "12530:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3155,
																	"nodeType": "ExpressionStatement",
																	"src": "12530:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3162,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3158,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3115,
																"src": "12574:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 3161,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3159,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12583:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3160,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12589:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "12583:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "12574:17:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3174,
														"nodeType": "IfStatement",
														"src": "12570:103:11",
														"trueBody": {
															"id": 3173,
															"nodeType": "Block",
															"src": "12593:80:11",
															"statements": [
																{
																	"expression": {
																		"id": 3167,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3163,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3115,
																			"src": "12611:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 3166,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3164,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12620:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 3165,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12626:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "12620:8:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "12611:17:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3168,
																	"nodeType": "ExpressionStatement",
																	"src": "12611:17:11"
																},
																{
																	"expression": {
																		"id": 3171,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3169,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3121,
																			"src": "12646:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3170,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12656:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "12646:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3172,
																	"nodeType": "ExpressionStatement",
																	"src": "12646:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3179,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3175,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3115,
																"src": "12690:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 3178,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3176,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12699:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3177,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12705:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "12699:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "12690:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3191,
														"nodeType": "IfStatement",
														"src": "12686:100:11",
														"trueBody": {
															"id": 3190,
															"nodeType": "Block",
															"src": "12708:78:11",
															"statements": [
																{
																	"expression": {
																		"id": 3184,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3180,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3115,
																			"src": "12726:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 3183,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3181,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12735:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 3182,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12741:1:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "12735:7:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "12726:16:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3185,
																	"nodeType": "ExpressionStatement",
																	"src": "12726:16:11"
																},
																{
																	"expression": {
																		"id": 3188,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3186,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3121,
																			"src": "12760:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3187,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12770:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "12760:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3189,
																	"nodeType": "ExpressionStatement",
																	"src": "12760:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3196,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3192,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3115,
																"src": "12803:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 3195,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3193,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12812:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3194,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12818:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "12812:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "12803:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3208,
														"nodeType": "IfStatement",
														"src": "12799:100:11",
														"trueBody": {
															"id": 3207,
															"nodeType": "Block",
															"src": "12821:78:11",
															"statements": [
																{
																	"expression": {
																		"id": 3201,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3197,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3115,
																			"src": "12839:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 3200,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3198,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12848:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 3199,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12854:1:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "12848:7:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "12839:16:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3202,
																	"nodeType": "ExpressionStatement",
																	"src": "12839:16:11"
																},
																{
																	"expression": {
																		"id": 3205,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3203,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3121,
																			"src": "12873:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3204,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12883:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "12873:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3206,
																	"nodeType": "ExpressionStatement",
																	"src": "12873:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3213,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3209,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3115,
																"src": "12916:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 3212,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3210,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12925:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3211,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12931:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "12925:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "12916:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3225,
														"nodeType": "IfStatement",
														"src": "12912:100:11",
														"trueBody": {
															"id": 3224,
															"nodeType": "Block",
															"src": "12934:78:11",
															"statements": [
																{
																	"expression": {
																		"id": 3218,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3214,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3115,
																			"src": "12952:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 3217,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3215,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12961:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 3216,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12967:1:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "12961:7:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "12952:16:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3219,
																	"nodeType": "ExpressionStatement",
																	"src": "12952:16:11"
																},
																{
																	"expression": {
																		"id": 3222,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3220,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3121,
																			"src": "12986:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3221,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12996:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "12986:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3223,
																	"nodeType": "ExpressionStatement",
																	"src": "12986:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3230,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3226,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3115,
																"src": "13029:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 3229,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3227,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13038:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3228,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13044:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "13038:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "13029:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3236,
														"nodeType": "IfStatement",
														"src": "13025:66:11",
														"trueBody": {
															"id": 3235,
															"nodeType": "Block",
															"src": "13047:44:11",
															"statements": [
																{
																	"expression": {
																		"id": 3233,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3231,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3121,
																			"src": "13065:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3232,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13075:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "13065:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3234,
																	"nodeType": "ExpressionStatement",
																	"src": "13065:11:11"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3238,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3121,
													"src": "13117:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3119,
												"id": 3239,
												"nodeType": "Return",
												"src": "13110:13:11"
											}
										]
									},
									"documentation": {
										"id": 3113,
										"nodeType": "StructuredDocumentation",
										"src": "12089:120:11",
										"text": " @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3241,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "12223:5:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3115,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12237:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 3241,
												"src": "12229:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3114,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12229:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12228:15:11"
									},
									"returnParameters": {
										"id": 3119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3118,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3241,
												"src": "12267:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3117,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12267:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12266:9:11"
									},
									"scope": 3421,
									"src": "12214:916:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3275,
										"nodeType": "Block",
										"src": "13365:170:11",
										"statements": [
											{
												"id": 3274,
												"nodeType": "UncheckedBlock",
												"src": "13375:154:11",
												"statements": [
													{
														"assignments": [
															3253
														],
														"declarations": [
															{
																"constant": false,
																"id": 3253,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "13407:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 3274,
																"src": "13399:14:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3252,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "13399:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3257,
														"initialValue": {
															"arguments": [
																{
																	"id": 3255,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3244,
																	"src": "13422:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3254,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3241,
																	3276
																],
																"referencedDeclaration": 3241,
																"src": "13416:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3256,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13416:12:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "13399:29:11"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3272,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3258,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3253,
																"src": "13449:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3267,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3260,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3247,
																						"src": "13476:8:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2378",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2378",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3259,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3420,
																					"src": "13459:16:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2378_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3261,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "13459:26:11",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3266,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3264,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 3262,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "13489:2:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 3263,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3253,
																						"src": "13495:6:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "13489:12:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3265,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3244,
																					"src": "13504:5:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "13489:20:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "13459:50:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3269,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13516:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3270,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "13459:58:11",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3268,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13512:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3271,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "13458:60:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "13449:69:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3251,
														"id": 3273,
														"nodeType": "Return",
														"src": "13442:76:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3242,
										"nodeType": "StructuredDocumentation",
										"src": "13136:143:11",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3276,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "13293:5:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3244,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13307:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 3276,
												"src": "13299:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3243,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13299:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3247,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "13323:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 3276,
												"src": "13314:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2378",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3246,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3245,
														"name": "Rounding",
														"nameLocations": [
															"13314:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2378,
														"src": "13314:8:11"
													},
													"referencedDeclaration": 2378,
													"src": "13314:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2378",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13298:34:11"
									},
									"returnParameters": {
										"id": 3251,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3250,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3276,
												"src": "13356:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3249,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13356:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13355:9:11"
									},
									"scope": 3421,
									"src": "13284:251:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3362,
										"nodeType": "Block",
										"src": "13855:600:11",
										"statements": [
											{
												"assignments": [
													3285
												],
												"declarations": [
													{
														"constant": false,
														"id": 3285,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "13873:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 3362,
														"src": "13865:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3284,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13865:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3287,
												"initialValue": {
													"hexValue": "30",
													"id": 3286,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "13882:1:11",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13865:18:11"
											},
											{
												"id": 3359,
												"nodeType": "UncheckedBlock",
												"src": "13893:533:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3292,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3290,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3288,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3279,
																	"src": "13921:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3289,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13930:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "13921:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3291,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13936:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "13921:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3302,
														"nodeType": "IfStatement",
														"src": "13917:98:11",
														"trueBody": {
															"id": 3301,
															"nodeType": "Block",
															"src": "13939:76:11",
															"statements": [
																{
																	"expression": {
																		"id": 3295,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3293,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3279,
																			"src": "13957:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3294,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13967:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "13957:13:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3296,
																	"nodeType": "ExpressionStatement",
																	"src": "13957:13:11"
																},
																{
																	"expression": {
																		"id": 3299,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3297,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3285,
																			"src": "13988:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3298,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13998:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "13988:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3300,
																	"nodeType": "ExpressionStatement",
																	"src": "13988:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3307,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3305,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3303,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3279,
																	"src": "14032:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3304,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14041:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "14032:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3306,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14046:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14032:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3317,
														"nodeType": "IfStatement",
														"src": "14028:95:11",
														"trueBody": {
															"id": 3316,
															"nodeType": "Block",
															"src": "14049:74:11",
															"statements": [
																{
																	"expression": {
																		"id": 3310,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3308,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3279,
																			"src": "14067:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3309,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14077:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "14067:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3311,
																	"nodeType": "ExpressionStatement",
																	"src": "14067:12:11"
																},
																{
																	"expression": {
																		"id": 3314,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3312,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3285,
																			"src": "14097:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3313,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14107:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "14097:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3315,
																	"nodeType": "ExpressionStatement",
																	"src": "14097:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3322,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3320,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3318,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3279,
																	"src": "14140:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3319,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14149:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "14140:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3321,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14154:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14140:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3332,
														"nodeType": "IfStatement",
														"src": "14136:95:11",
														"trueBody": {
															"id": 3331,
															"nodeType": "Block",
															"src": "14157:74:11",
															"statements": [
																{
																	"expression": {
																		"id": 3325,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3323,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3279,
																			"src": "14175:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3324,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14185:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "14175:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3326,
																	"nodeType": "ExpressionStatement",
																	"src": "14175:12:11"
																},
																{
																	"expression": {
																		"id": 3329,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3327,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3285,
																			"src": "14205:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3328,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14215:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "14205:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3330,
																	"nodeType": "ExpressionStatement",
																	"src": "14205:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3337,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3335,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3333,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3279,
																	"src": "14248:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3334,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14257:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "14248:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3336,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14262:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14248:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3347,
														"nodeType": "IfStatement",
														"src": "14244:95:11",
														"trueBody": {
															"id": 3346,
															"nodeType": "Block",
															"src": "14265:74:11",
															"statements": [
																{
																	"expression": {
																		"id": 3340,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3338,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3279,
																			"src": "14283:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3339,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14293:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "14283:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3341,
																	"nodeType": "ExpressionStatement",
																	"src": "14283:12:11"
																},
																{
																	"expression": {
																		"id": 3344,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3342,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3285,
																			"src": "14313:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3343,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14323:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "14313:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3345,
																	"nodeType": "ExpressionStatement",
																	"src": "14313:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3352,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3350,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3348,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3279,
																	"src": "14356:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3349,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14365:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "14356:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3351,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14369:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14356:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3358,
														"nodeType": "IfStatement",
														"src": "14352:64:11",
														"trueBody": {
															"id": 3357,
															"nodeType": "Block",
															"src": "14372:44:11",
															"statements": [
																{
																	"expression": {
																		"id": 3355,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3353,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3285,
																			"src": "14390:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3354,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14400:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "14390:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3356,
																	"nodeType": "ExpressionStatement",
																	"src": "14390:11:11"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3360,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3285,
													"src": "14442:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3283,
												"id": 3361,
												"nodeType": "Return",
												"src": "14435:13:11"
											}
										]
									},
									"documentation": {
										"id": 3277,
										"nodeType": "StructuredDocumentation",
										"src": "13541:246:11",
										"text": " @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 3363,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "13801:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3279,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13816:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 3363,
												"src": "13808:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3278,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13808:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13807:15:11"
									},
									"returnParameters": {
										"id": 3283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3282,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3363,
												"src": "13846:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3281,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13846:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13845:9:11"
									},
									"scope": 3421,
									"src": "13792:663:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3400,
										"nodeType": "Block",
										"src": "14692:177:11",
										"statements": [
											{
												"id": 3399,
												"nodeType": "UncheckedBlock",
												"src": "14702:161:11",
												"statements": [
													{
														"assignments": [
															3375
														],
														"declarations": [
															{
																"constant": false,
																"id": 3375,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "14734:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 3399,
																"src": "14726:14:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3374,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "14726:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3379,
														"initialValue": {
															"arguments": [
																{
																	"id": 3377,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3366,
																	"src": "14750:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3376,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3363,
																	3401
																],
																"referencedDeclaration": 3363,
																"src": "14743:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3378,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14743:13:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "14726:30:11"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3397,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3380,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3375,
																"src": "14777:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3392,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3382,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3369,
																						"src": "14804:8:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2378",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2378",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3381,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3420,
																					"src": "14787:16:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2378_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3383,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "14787:26:11",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3391,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3389,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3384,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "14817:1:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 3387,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 3385,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3375,
																									"src": "14823:6:11",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "33",
																									"id": 3386,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "14833:1:11",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"src": "14823:11:11",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 3388,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "14822:13:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "14817:18:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3390,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3366,
																					"src": "14838:5:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "14817:26:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "14787:56:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3394,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14850:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3395,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "14787:64:11",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3393,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14846:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3396,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "14786:66:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "14777:75:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3373,
														"id": 3398,
														"nodeType": "Return",
														"src": "14770:82:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3364,
										"nodeType": "StructuredDocumentation",
										"src": "14461:144:11",
										"text": " @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3401,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "14619:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3370,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3366,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "14634:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 3401,
												"src": "14626:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3365,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14626:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3369,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "14650:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 3401,
												"src": "14641:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2378",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3368,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3367,
														"name": "Rounding",
														"nameLocations": [
															"14641:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2378,
														"src": "14641:8:11"
													},
													"referencedDeclaration": 2378,
													"src": "14641:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2378",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14625:34:11"
									},
									"returnParameters": {
										"id": 3373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3372,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3401,
												"src": "14683:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3371,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14683:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14682:9:11"
									},
									"scope": 3421,
									"src": "14610:259:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3419,
										"nodeType": "Block",
										"src": "15067:48:11",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 3417,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 3415,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 3412,
																	"name": "rounding",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3405,
																	"src": "15090:8:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_Rounding_$2378",
																		"typeString": "enum Math.Rounding"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_enum$_Rounding_$2378",
																		"typeString": "enum Math.Rounding"
																	}
																],
																"id": 3411,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "15084:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 3410,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "15084:5:11",
																	"typeDescriptions": {}
																}
															},
															"id": 3413,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15084:15:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "%",
														"rightExpression": {
															"hexValue": "32",
															"id": 3414,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15102:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "15084:19:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "31",
														"id": 3416,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "15107:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "15084:24:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 3409,
												"id": 3418,
												"nodeType": "Return",
												"src": "15077:31:11"
											}
										]
									},
									"documentation": {
										"id": 3402,
										"nodeType": "StructuredDocumentation",
										"src": "14875:113:11",
										"text": " @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."
									},
									"id": 3420,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unsignedRoundsUp",
									"nameLocation": "15002:16:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3406,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3405,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "15028:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 3420,
												"src": "15019:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2378",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3404,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3403,
														"name": "Rounding",
														"nameLocations": [
															"15019:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2378,
														"src": "15019:8:11"
													},
													"referencedDeclaration": 2378,
													"src": "15019:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2378",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15018:19:11"
									},
									"returnParameters": {
										"id": 3409,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3408,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3420,
												"src": "15061:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3407,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15061:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15060:6:11"
									},
									"scope": 3421,
									"src": "14993:122:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3422,
							"src": "203:14914:11",
							"usedErrors": [
								2373
							],
							"usedEvents": []
						}
					],
					"src": "103:15015:11"
				},
				"id": 11
			},
			"contracts/Pool.sol": {
				"ast": {
					"absolutePath": "contracts/Pool.sol",
					"exportedSymbols": {
						"Context": [
							2367
						],
						"ERC20": [
							969
						],
						"ERC4626": [
							1732
						],
						"IERC20": [
							1047
						],
						"IERC20Metadata": [
							1758
						],
						"IERC4626": [
							317
						],
						"Math": [
							3421
						],
						"Ownable": [
							147
						],
						"Pool": [
							3644
						],
						"SafeERC20": [
							2084
						]
					},
					"id": 3645,
					"license": "SEE LICENSE IN LICENSE",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3423,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".24"
							],
							"nodeType": "PragmaDirective",
							"src": "51:24:12"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 3424,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3645,
							"sourceUnit": 148,
							"src": "77:52:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol",
							"id": 3425,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3645,
							"sourceUnit": 1733,
							"src": "130:68:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
							"file": "@openzeppelin/contracts/utils/math/Math.sol",
							"id": 3426,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3645,
							"sourceUnit": 3422,
							"src": "199:53:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3427,
										"name": "ERC4626",
										"nameLocations": [
											"271:7:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1732,
										"src": "271:7:12"
									},
									"id": 3428,
									"nodeType": "InheritanceSpecifier",
									"src": "271:7:12"
								}
							],
							"canonicalName": "Pool",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 3644,
							"linearizedBaseContracts": [
								3644,
								1732,
								317,
								969,
								359,
								1758,
								1047,
								2367
							],
							"name": "Pool",
							"nameLocation": "263:4:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "866c99e2",
									"id": 3431,
									"mutability": "mutable",
									"name": "satoken",
									"nameLocation": "299:7:12",
									"nodeType": "VariableDeclaration",
									"scope": 3644,
									"src": "285:21:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$1047",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 3430,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 3429,
											"name": "IERC20",
											"nameLocations": [
												"285:6:12"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1047,
											"src": "285:6:12"
										},
										"referencedDeclaration": 1047,
										"src": "285:6:12",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$1047",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 3434,
									"mutability": "mutable",
									"name": "isDeposit",
									"nameLocation": "325:9:12",
									"nodeType": "VariableDeclaration",
									"scope": 3644,
									"src": "312:30:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 3432,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "312:4:12",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"value": {
										"hexValue": "66616c7365",
										"id": 3433,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "bool",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "337:5:12",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										},
										"value": "false"
									},
									"visibility": "private"
								},
								{
									"errorSelector": "a9a2322b",
									"id": 3436,
									"name": "DEPRECATED_FUNCTION",
									"nameLocation": "354:19:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3435,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "373:2:12"
									},
									"src": "348:28:12"
								},
								{
									"body": {
										"id": 3450,
										"nodeType": "Block",
										"src": "399:91:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 3445,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 3441,
																		"name": "satoken",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3431,
																		"src": "425:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$1047",
																			"typeString": "contract IERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$1047",
																			"typeString": "contract IERC20"
																		}
																	],
																	"id": 3440,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "417:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 3439,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "417:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 3442,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "417:16:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 3443,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "437:3:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 3444,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "441:6:12",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "437:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "417:30:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "53656e646572206973204e6f74205661756c7473",
															"id": 3446,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "449:22:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8bb8eaf1580515f96cb5013e54fb02bd0d2d1120f2636292a4ac84c518b1b5a3",
																"typeString": "literal_string \"Sender is Not Vaults\""
															},
															"value": "Sender is Not Vaults"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8bb8eaf1580515f96cb5013e54fb02bd0d2d1120f2636292a4ac84c518b1b5a3",
																"typeString": "literal_string \"Sender is Not Vaults\""
															}
														],
														"id": 3438,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "409:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3447,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "409:63:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3448,
												"nodeType": "ExpressionStatement",
												"src": "409:63:12"
											},
											{
												"id": 3449,
												"nodeType": "PlaceholderStatement",
												"src": "482:1:12"
											}
										]
									},
									"id": 3451,
									"name": "auth",
									"nameLocation": "392:4:12",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 3437,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "396:2:12"
									},
									"src": "383:107:12",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3471,
										"nodeType": "Block",
										"src": "586:43:12",
										"statements": [
											{
												"expression": {
													"id": 3469,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3465,
														"name": "satoken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3431,
														"src": "596:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$1047",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 3467,
																"name": "_satoken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3453,
																"src": "613:8:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 3466,
															"name": "IERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1047,
															"src": "606:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20_$1047_$",
																"typeString": "type(contract IERC20)"
															}
														},
														"id": 3468,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "606:16:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$1047",
															"typeString": "contract IERC20"
														}
													},
													"src": "596:26:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1047",
														"typeString": "contract IERC20"
													}
												},
												"id": 3470,
												"nodeType": "ExpressionStatement",
												"src": "596:26:12"
											}
										]
									},
									"id": 3472,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"arguments": [
														{
															"id": 3457,
															"name": "_satoken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3453,
															"src": "541:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 3456,
														"name": "IERC20",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1047,
														"src": "534:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_contract$_IERC20_$1047_$",
															"typeString": "type(contract IERC20)"
														}
													},
													"id": 3458,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "534:16:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1047",
														"typeString": "contract IERC20"
													}
												}
											],
											"id": 3459,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3455,
												"name": "ERC4626",
												"nameLocations": [
													"526:7:12"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1732,
												"src": "526:7:12"
											},
											"nodeType": "ModifierInvocation",
											"src": "526:25:12"
										},
										{
											"arguments": [
												{
													"hexValue": "522d736861726564206155534443",
													"id": 3461,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "558:16:12",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_4e81e37bc0ef04742085fdbc312355d9a93cb5f56bc269e25ce1229c39677d2c",
														"typeString": "literal_string \"R-shared aUSDC\""
													},
													"value": "R-shared aUSDC"
												},
												{
													"hexValue": "72736155534443",
													"id": 3462,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "575:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_74eced49128f4aca3c2fc409fd77e99826e6b308676b2cf34d02a3cc4915e6c4",
														"typeString": "literal_string \"rsaUSDC\""
													},
													"value": "rsaUSDC"
												}
											],
											"id": 3463,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3460,
												"name": "ERC20",
												"nameLocations": [
													"552:5:12"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 969,
												"src": "552:5:12"
											},
											"nodeType": "ModifierInvocation",
											"src": "552:33:12"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3454,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3453,
												"mutability": "mutable",
												"name": "_satoken",
												"nameLocation": "516:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 3472,
												"src": "508:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3452,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "508:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "507:18:12"
									},
									"returnParameters": {
										"id": 3464,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "586:0:12"
									},
									"scope": 3644,
									"src": "496:133:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1445
									],
									"body": {
										"id": 3529,
										"nodeType": "Block",
										"src": "725:406:12",
										"statements": [
											{
												"expression": {
													"id": 3486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3484,
														"name": "isDeposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3434,
														"src": "735:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 3485,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "747:4:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "735:16:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3487,
												"nodeType": "ExpressionStatement",
												"src": "735:16:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3491,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3489,
																"name": "assets",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3474,
																"src": "770:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3490,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "779:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "770:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416d6f756e74206d7573742062652067726561746572207468616e2030",
															"id": 3492,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "782:31:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3e76f273c719bb7d23db533a2dc9a822ae7d899fcd42eb8910272e24764e8296",
																"typeString": "literal_string \"Amount must be greater than 0\""
															},
															"value": "Amount must be greater than 0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3e76f273c719bb7d23db533a2dc9a822ae7d899fcd42eb8910272e24764e8296",
																"typeString": "literal_string \"Amount must be greater than 0\""
															}
														],
														"id": 3488,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "762:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3493,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "762:52:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3494,
												"nodeType": "ExpressionStatement",
												"src": "762:52:12"
											},
											{
												"assignments": [
													3496
												],
												"declarations": [
													{
														"constant": false,
														"id": 3496,
														"mutability": "mutable",
														"name": "maxAssets",
														"nameLocation": "832:9:12",
														"nodeType": "VariableDeclaration",
														"scope": 3529,
														"src": "824:17:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3495,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "824:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3500,
												"initialValue": {
													"arguments": [
														{
															"id": 3498,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3476,
															"src": "855:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 3497,
														"name": "maxDeposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1291,
														"src": "844:10:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 3499,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "844:20:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "824:40:12"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3503,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3501,
														"name": "assets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3474,
														"src": "878:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 3502,
														"name": "maxAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3496,
														"src": "887:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "878:18:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3511,
												"nodeType": "IfStatement",
												"src": "874:110:12",
												"trueBody": {
													"id": 3510,
													"nodeType": "Block",
													"src": "898:86:12",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 3505,
																		"name": "receiver",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3476,
																		"src": "945:8:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 3506,
																		"name": "assets",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3474,
																		"src": "955:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 3507,
																		"name": "maxAssets",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3496,
																		"src": "963:9:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 3504,
																	"name": "ERC4626ExceededMaxDeposit",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1081,
																	"src": "919:25:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256,uint256) pure"
																	}
																},
																"id": 3508,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "919:54:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 3509,
															"nodeType": "RevertStatement",
															"src": "912:61:12"
														}
													]
												}
											},
											{
												"assignments": [
													3513
												],
												"declarations": [
													{
														"constant": false,
														"id": 3513,
														"mutability": "mutable",
														"name": "shares",
														"nameLocation": "1010:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 3529,
														"src": "1002:14:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3512,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1002:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3517,
												"initialValue": {
													"arguments": [
														{
															"id": 3515,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3474,
															"src": "1034:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3514,
														"name": "previewDeposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1353,
														"src": "1019:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 3516,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1019:22:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1002:39:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3519,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3476,
															"src": "1057:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3520,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3513,
															"src": "1067:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3518,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 809,
														"src": "1051:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3521,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1051:23:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3522,
												"nodeType": "ExpressionStatement",
												"src": "1051:23:12"
											},
											{
												"expression": {
													"id": 3525,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3523,
														"name": "isDeposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3434,
														"src": "1084:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 3524,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1096:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "1084:17:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3526,
												"nodeType": "ExpressionStatement",
												"src": "1084:17:12"
											},
											{
												"expression": {
													"id": 3527,
													"name": "shares",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3513,
													"src": "1118:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3483,
												"id": 3528,
												"nodeType": "Return",
												"src": "1111:13:12"
											}
										]
									},
									"functionSelector": "6e553f65",
									"id": 3530,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3479,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3478,
												"name": "auth",
												"nameLocations": [
													"686:4:12"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 3451,
												"src": "686:4:12"
											},
											"nodeType": "ModifierInvocation",
											"src": "686:4:12"
										}
									],
									"name": "deposit",
									"nameLocation": "644:7:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3480,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "698:8:12"
									},
									"parameters": {
										"id": 3477,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3474,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "660:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 3530,
												"src": "652:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3473,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3476,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "676:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 3530,
												"src": "668:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3475,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "651:34:12"
									},
									"returnParameters": {
										"id": 3483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3482,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3530,
												"src": "716:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3481,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "716:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "715:9:12"
									},
									"scope": 3644,
									"src": "635:496:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1536
									],
									"body": {
										"id": 3575,
										"nodeType": "Block",
										"src": "1284:280:12",
										"statements": [
											{
												"assignments": [
													3546
												],
												"declarations": [
													{
														"constant": false,
														"id": 3546,
														"mutability": "mutable",
														"name": "maxAssets",
														"nameLocation": "1302:9:12",
														"nodeType": "VariableDeclaration",
														"scope": 3575,
														"src": "1294:17:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3545,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1294:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3550,
												"initialValue": {
													"arguments": [
														{
															"id": 3548,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3537,
															"src": "1326:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 3547,
														"name": "maxWithdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1324,
														"src": "1314:11:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 3549,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1314:18:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1294:38:12"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3553,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3551,
														"name": "assets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3533,
														"src": "1346:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 3552,
														"name": "maxAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3546,
														"src": "1355:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1346:18:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3561,
												"nodeType": "IfStatement",
												"src": "1342:108:12",
												"trueBody": {
													"id": 3560,
													"nodeType": "Block",
													"src": "1366:84:12",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 3555,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3537,
																		"src": "1414:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 3556,
																		"name": "assets",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3533,
																		"src": "1421:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 3557,
																		"name": "maxAssets",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3546,
																		"src": "1429:9:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 3554,
																	"name": "ERC4626ExceededMaxWithdraw",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1099,
																	"src": "1387:26:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256,uint256) pure"
																	}
																},
																"id": 3558,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1387:52:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 3559,
															"nodeType": "RevertStatement",
															"src": "1380:59:12"
														}
													]
												}
											},
											{
												"assignments": [
													3563
												],
												"declarations": [
													{
														"constant": false,
														"id": 3563,
														"mutability": "mutable",
														"name": "shares",
														"nameLocation": "1468:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 3575,
														"src": "1460:14:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3562,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1460:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3567,
												"initialValue": {
													"arguments": [
														{
															"id": 3565,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3533,
															"src": "1493:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3564,
														"name": "previewWithdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1385,
														"src": "1477:15:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 3566,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1477:23:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1460:40:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3569,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3537,
															"src": "1516:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3570,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3563,
															"src": "1523:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3568,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 842,
														"src": "1510:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3571,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1510:20:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3572,
												"nodeType": "ExpressionStatement",
												"src": "1510:20:12"
											},
											{
												"expression": {
													"id": 3573,
													"name": "maxAssets",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3546,
													"src": "1548:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3544,
												"id": 3574,
												"nodeType": "Return",
												"src": "1541:16:12"
											}
										]
									},
									"documentation": {
										"id": 3531,
										"nodeType": "StructuredDocumentation",
										"src": "1137:36:12",
										"text": "@dev See {IERC4626-withdraw}. "
									},
									"functionSelector": "b460af94",
									"id": 3576,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3540,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3539,
												"name": "auth",
												"nameLocations": [
													"1245:4:12"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 3451,
												"src": "1245:4:12"
											},
											"nodeType": "ModifierInvocation",
											"src": "1245:4:12"
										}
									],
									"name": "withdraw",
									"nameLocation": "1187:8:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3541,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1257:8:12"
									},
									"parameters": {
										"id": 3538,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3533,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "1204:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 3576,
												"src": "1196:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3532,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1196:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3535,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1220:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 3576,
												"src": "1212:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3534,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1212:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3537,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1238:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3576,
												"src": "1230:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3536,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1230:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1195:49:12"
									},
									"returnParameters": {
										"id": 3544,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3543,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3576,
												"src": "1275:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3542,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1275:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1274:9:12"
									},
									"scope": 3644,
									"src": "1178:386:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1489
									],
									"body": {
										"id": 3589,
										"nodeType": "Block",
										"src": "1654:45:12",
										"statements": [
											{
												"errorCall": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3586,
														"name": "DEPRECATED_FUNCTION",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3436,
														"src": "1671:19:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_error_pure$__$returns$__$",
															"typeString": "function () pure"
														}
													},
													"id": 3587,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1671:21:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3588,
												"nodeType": "RevertStatement",
												"src": "1664:28:12"
											}
										]
									},
									"functionSelector": "94bf804d",
									"id": 3590,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "1581:4:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3582,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1627:8:12"
									},
									"parameters": {
										"id": 3581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3578,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "1594:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 3590,
												"src": "1586:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3577,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1586:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3580,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1610:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 3590,
												"src": "1602:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3579,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1602:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1585:34:12"
									},
									"returnParameters": {
										"id": 3585,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3584,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3590,
												"src": "1645:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3583,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1645:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1644:9:12"
									},
									"scope": 3644,
									"src": "1572:127:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1611
									],
									"body": {
										"id": 3642,
										"nodeType": "Block",
										"src": "1930:291:12",
										"statements": [
											{
												"condition": {
													"id": 3602,
													"name": "isDeposit",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3434,
													"src": "1944:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 3640,
													"nodeType": "Block",
													"src": "2091:121:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 3625,
																		"name": "assets",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3593,
																		"src": "2124:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 3632,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 3626,
																				"name": "totalSupply",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 542,
																				"src": "2132:11:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																					"typeString": "function () view returns (uint256)"
																				}
																			},
																			"id": 3627,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2132:13:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3631,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3628,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2148:2:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"id": 3629,
																					"name": "_decimalsOffset",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1731,
																					"src": "2154:15:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																						"typeString": "function () view returns (uint8)"
																					}
																				},
																				"id": 3630,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2154:17:12",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"src": "2148:23:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2132:39:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 3636,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 3633,
																				"name": "totalAssets",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1244,
																				"src": "2173:11:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																					"typeString": "function () view returns (uint256)"
																				}
																			},
																			"id": 3634,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2173:13:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 3635,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2189:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "2173:17:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 3637,
																		"name": "rounding",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3596,
																		"src": "2192:8:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_Rounding_$2378",
																			"typeString": "enum Math.Rounding"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_enum$_Rounding_$2378",
																			"typeString": "enum Math.Rounding"
																		}
																	],
																	"expression": {
																		"id": 3623,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3421,
																		"src": "2112:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$3421_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 3624,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2117:6:12",
																	"memberName": "mulDiv",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2798,
																	"src": "2112:11:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_enum$_Rounding_$2378_$returns$_t_uint256_$",
																		"typeString": "function (uint256,uint256,uint256,enum Math.Rounding) pure returns (uint256)"
																	}
																},
																"id": 3638,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2112:89:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 3601,
															"id": 3639,
															"nodeType": "Return",
															"src": "2105:96:12"
														}
													]
												},
												"id": 3641,
												"nodeType": "IfStatement",
												"src": "1940:272:12",
												"trueBody": {
													"id": 3622,
													"nodeType": "Block",
													"src": "1955:130:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 3605,
																		"name": "assets",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3593,
																		"src": "1988:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 3612,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 3606,
																				"name": "totalSupply",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 542,
																				"src": "1996:11:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																					"typeString": "function () view returns (uint256)"
																				}
																			},
																			"id": 3607,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1996:13:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3611,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3608,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2012:2:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"id": 3609,
																					"name": "_decimalsOffset",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1731,
																					"src": "2018:15:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																						"typeString": "function () view returns (uint8)"
																					}
																				},
																				"id": 3610,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2018:17:12",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"src": "2012:23:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "1996:39:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 3618,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3616,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"id": 3613,
																					"name": "totalAssets",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1244,
																					"src": "2037:11:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																						"typeString": "function () view returns (uint256)"
																					}
																				},
																				"id": 3614,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2037:13:12",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 3615,
																				"name": "assets",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3593,
																				"src": "2053:6:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "2037:22:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 3617,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2062:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "2037:26:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 3619,
																		"name": "rounding",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3596,
																		"src": "2065:8:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_Rounding_$2378",
																			"typeString": "enum Math.Rounding"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_enum$_Rounding_$2378",
																			"typeString": "enum Math.Rounding"
																		}
																	],
																	"expression": {
																		"id": 3603,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3421,
																		"src": "1976:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$3421_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 3604,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1981:6:12",
																	"memberName": "mulDiv",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2798,
																	"src": "1976:11:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_enum$_Rounding_$2378_$returns$_t_uint256_$",
																		"typeString": "function (uint256,uint256,uint256,enum Math.Rounding) pure returns (uint256)"
																	}
																},
																"id": 3620,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1976:98:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 3601,
															"id": 3621,
															"nodeType": "Return",
															"src": "1969:105:12"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 3591,
										"nodeType": "StructuredDocumentation",
										"src": "1705:113:12",
										"text": " @dev Internal conversion function (from assets to shares) with support for rounding direction."
									},
									"id": 3643,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_convertToShares",
									"nameLocation": "1832:16:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3598,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1903:8:12"
									},
									"parameters": {
										"id": 3597,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3593,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "1857:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 3643,
												"src": "1849:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3592,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1849:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3596,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "1879:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 3643,
												"src": "1865:22:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2378",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3595,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3594,
														"name": "Math.Rounding",
														"nameLocations": [
															"1865:4:12",
															"1870:8:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2378,
														"src": "1865:13:12"
													},
													"referencedDeclaration": 2378,
													"src": "1865:13:12",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2378",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1848:40:12"
									},
									"returnParameters": {
										"id": 3601,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3600,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3643,
												"src": "1921:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3599,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1921:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1920:9:12"
									},
									"scope": 3644,
									"src": "1823:398:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3645,
							"src": "254:1970:12",
							"usedErrors": [
								329,
								334,
								339,
								348,
								353,
								358,
								1081,
								1090,
								1099,
								1108,
								1811,
								2092,
								2097,
								2100,
								2373,
								3436
							],
							"usedEvents": [
								168,
								180,
								981,
								990
							]
						}
					],
					"src": "51:2173:12"
				},
				"id": 12
			}
		}
	}
}